<?php $stopwatch = microtime (); define ('IGNORE_VERSION_MISMATCH', false); define ('E2_VERSION', 3335); define ('E2_RELEASE', '2.8b'); define ('E2_UA_STRING', 'E2 (v'. E2_VERSION .'; Aegea)'); define ('E2_MINIMUM_PHP', '5.4'); define ('E2_MINIMUM_MYSQL', 4.1); define ('XML_AS_TEXT', 0); define ('BUILDER_OBFUSCATE', 0); define ('BUILDER_FLATTEN', 1); header ('X-Powered-By: E2 Aegea v'. E2_VERSION); if (version_compare (PHP_VERSION, E2_MINIMUM_PHP) < 0) { die ('PHP version must be '. E2_MINIMUM_PHP .' or later, you are running '. PHP_VERSION); } define ('OUTPUT_CHARSET', 'UTF-8'); setlocale (LC_CTYPE, 'ru_RU.UTF'); mb_internal_encoding ('UTF-8'); define ('HSC_ENC', 'UTF-8'); if (function_exists ('date_default_timezone_set')) date_default_timezone_set ('GMT'); error_reporting (E_ALL); define ('RUN_ID', chr (rand (65, 90))); define ('DEV_TRACK_TIME', false); define ('DEV_HOST', 'e2'); define ('SECONDS_IN_A_MINUTE', 60); define ('SECONDS_IN_AN_HOUR', 3600); define ('SECONDS_IN_A_DAY', 86400); define ('SECONDS_IN_A_MONTH', 2592000); define ('SECONDS_IN_A_YEAR', 31536000); define ('YEAR_DISPLAY_THRESH', 7884000); define ('KILO_THRESH', 768); define ('BYTES_DECIMALS', 1); define ('FILE_READ_BUFFER', 64 * 1024); define ('KEYWORDS_MANY_THRESH', 50); if (defined ('JSON_PRETTY_PRINT')) { define ('E2_JSON_STYLE', JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE); } else { define ('E2_JSON_STYLE', 0); } define ('NEW_FILES_RIGHTS', 0777); if (is_file ('multiuser')) { define ('USER_MODE', 'multi'); } else { define ('USER_MODE', 'single'); } if (is_file ('superconfig.php')) { include 'superconfig.php'; } $_protocol = ( !empty ($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' or $_SERVER['SERVER_PORT'] == 443 or isset ($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' or isset ($_SERVER['HTTP_X_HTTPS']) && ($_SERVER['HTTP_X_HTTPS']) ) ? 'https' : 'http'; if (is_file ('force-https')) { $_protocol = 'https'; } $folder_on_server = substr ( $_SERVER['PHP_SELF'], 0, strpos ($_SERVER['PHP_SELF'], '/index.php') ); list ($server_name, ) = explode (':', $_SERVER['HTTP_HOST']); $full_blog_url = $_protocol. '://'. $server_name . $folder_on_server; $_user_folder_name = str_replace ('/', '--', $server_name . $folder_on_server); if (substr ($_user_folder_name, 0, 4) == 'www.') { $_user_folder_name = substr ($_user_folder_name, 4); } if (USER_MODE == 'multi') { if (@array_key_exists ($_user_folder_name, $_superconfig['rewrites'])) { $_user_folder_name = $_superconfig['rewrites'][$_user_folder_name]; } define ('USER_FOLDER', 'users/'. $_user_folder_name .'/'); } else { define ('USER_FOLDER', @$__E2_FOLDER_PREFIX__ . 'user/'); } if (@$_superconfig['store_files_by_users']) { define ('MEDIA_ROOT_FOLDER', USER_FOLDER .'files/'); } else { define ('MEDIA_ROOT_FOLDER', ''); } define ('EXTRAS_FOLDER', USER_FOLDER . 'extras/'); define ('BACKUP_FOLDER', USER_FOLDER . 'backup/'); define ('CACHES_FOLDER', USER_FOLDER . 'caches/'); define ('USER_LIBRARY_FOLDER', USER_FOLDER . 'library/'); define ('LOG_FILE', USER_FOLDER . 'log.txt'); define ('LOG_SPECIAL_FILE', USER_FOLDER . 'log-special.txt'); define ('PICTURES_FOLDER', 'pictures/'); define ('THUMBNAILS_FOLDER', 'pictures/thumbs/'); define ('AUDIO_FOLDER', 'audio/'); define ('TEMPLATES_FOLDER', 'themes/'); define ('SYSTEM_FOLDER', 'system/'); define ('SCRIPTS_FOLDER', 'system/js/'); define ('SYSTEM_LIBRARY_FOLDER', 'system/library/'); define ('SYSTEM_TEMPLATE_FOLDER', 'system/theme/'); define ('DEFAULT_USERPIC_FILENAME', 'system/theme/images/userpic.svg'); define ('DEFAULT_USERPIC_PLACEHOLDER_FILENAME', 'system/theme/images/userpic-placeholder.svg'); define ('AUDIO_ICON_IMAGE', 'system/theme/images/audio.svg'); define ('AUDIO_ICON_WIDTH', 64); define ('AUDIO_ICON_HEIGHT', 64); define ('LANGUAGES_FOLDER', 'system/languages/'); define ('DEFAULTS_FOLDER', 'system/default/'); define ('MTMPL_FOLDER', 'system/default/mail/'); define ('DEFAULT_TEMPLATE', 'plain'); if (substr (@$_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2) == 'ru') { define ('DEFAULT_LANGUAGE', 'ru'); } else { define ('DEFAULT_LANGUAGE', 'en'); } @include DEFAULTS_FOLDER. 'config.php'; $_default_config = $_config; @include USER_FOLDER. 'config.php'; $_config = array_merge ($_default_config, $_config); if ( $_config['write_log'] and ($_config['write_log_create'] or is_file (LOG_FILE)) ) define ('__LOG', 1); else define ('__LOG', 0); if (@$_config['write_log_limit'] and is_file (LOG_FILE)) { $fs = @stat (LOG_FILE); $fs = $fs['size']; if ($fs > $_config['write_log_limit']) { @rename (LOG_FILE, LOG_FILE .'.bak'); @chmod (LOG_FILE .'.bak', NEW_FILES_RIGHTS); @file_put_contents (LOG_FILE, ''); } } define ('CACHE', true); define ('CACHE_NOTES', CACHE and true); define ('CACHE_NOTES_COMMENTS', CACHE and true); define ('CACHE_POPULAR', CACHE and true); define ('CACHE_HOT', CACHE and true); define ('CACHE_FAVS', CACHE and true); define ('CACHE_TAGS', CACHE and true); define ('CACHE_FAVTAGS', CACHE and true); define ('CACHE_NOTES_COUNTS', CACHE and true); define ('CACHE_EDGE_TIMEINFO', CACHE and true); define ('CACHE_FRONTPAGE', CACHE and true); define ('CACHE_FRONTPAGE_FEED', CACHE and true); define ('CACHE_FULLLIST', CACHE and true); define ('CACHE_DRAFTS', CACHE and true); define ('CACHE_DRAFTS_ALIAS_USE_COUNTS', CACHE and true); define ('CACHE_LASTMODIFIEDS', CACHE and true); define ('CACHE_FILENAMES_NOTES', CACHES_FOLDER . 'note-*.ctree.psa'); define ('CACHE_FILENAMES_NOTES_COMMENTS', CACHES_FOLDER . 'note-*-comments.ctree.psa' ); define ('CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR', CACHES_FOLDER . 'note-*-comments-author.ctree.psa' ); define ('CACHE_FILENAMES_NOTES_COUNTS', CACHES_FOLDER . 'notes-count-*.txt'); define ('CACHE_FILENAMES_EDGE_TIMEINFO', CACHES_FOLDER . '*.e2time.psa'); define ('CACHE_FILENAME_POPULAR', CACHES_FOLDER . 'popular.ctree.psa'); define ('CACHE_FILENAME_POPULAR_EXPIRES', CACHES_FOLDER . 'popular-expires.txt'); define ('CACHE_FILENAME_HOT', CACHES_FOLDER . 'hot.ctree.psa'); define ('CACHE_FILENAME_HOT_EXPIRES', CACHES_FOLDER . 'hot-expires.txt'); define ('CACHE_FILENAME_FAVS', CACHES_FOLDER . 'favourites.ctree.psa'); define ('CACHE_FILENAME_TAGS', CACHES_FOLDER . 'tags.ctree.psa'); define ('CACHE_FILENAME_TAGS_AUTHOR', CACHES_FOLDER . 'tags-author.ctree.psa'); define ('CACHE_FILENAME_FAVTAGS', CACHES_FOLDER . 'favtags.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE', CACHES_FOLDER . 'frontpage.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE_AUTHOR', CACHES_FOLDER . 'frontpage-author.ctree.psa'); define ('CACHE_FILENAME_FRONTPAGE_FEED', CACHES_FOLDER . 'frontpage-feed.psa'); define ('CACHE_FILENAME_FULLLIST', CACHES_FOLDER . 'notes-list.ctree.psa'); define ('CACHE_FILENAME_DRAFTS', CACHES_FOLDER . 'drafts.psa'); define ('CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS', CACHES_FOLDER . 'drafts-auc.psa'); define ('CACHE_FILENAME_LASTMODIFIEDS', CACHES_FOLDER . 'last-modifieds-by-id.psa'); define ('E2E_STRANGE_ERROR', 10); define ('E2E_USER_ERROR', 20); define ('E2E_PERMISSIONS_ERROR', 30); define ('E2E_DATABASE_ERROR', 40); define ('E2E_MESSAGE', 100); define ('E2E_DIAGNOSTICS_MESSAGE', 110); define ('DB_PASSWORD_RECOVER_AND_SHOW', false); define ('DEFAULT_ITEMS_PER_PAGE', 10); define ('MAX_ITEMS_PER_PAGE', 100); define ('DB_OK', 0); define ('DB_CANNOT_FIND', -1); define ('DB_CANNOT_CONNECT', -2); define ('DB_QUERY_ERROR', -3); define ('DB_TOO_OLD', -4); define ('FP_NO_ID_OR_NEW', -1); define ('FP_INSERT_ERROR', -10); define ('FP_UPDATE_ERROR', -11); define ('FP_EMPTY_FIELD', -20); define ('FP_TITLE_OR_TEXT_EMPTY', -21); define ('FP_NOT_COMMENTABLE', -30); define ('FP_COMMENT_DOUBLE_POST', -101); define ('FP_COMMENT_TOO_LONG', -102); define ('FP_COMMENT_SPAM_SUSPECT', -103); define ('NOTE_COMMENTABLE_NOW', -1); define ('NOTE_COMMENTABLE_NOW_CONDITIONALLY', -2); define ('ENTITY_TYPE_UNSPECIFIED', ''); define ('ENTITY_TYPE_NOTE', 'n'); define ('ENTITY_TYPE_TAG', 't'); define ('THUMB_WIDTH', 200); define ('THUMB_HEIGHT', 160); define ('THUMB_JPG_QUALITY', 90); define ('SCALED_IMAGE_JPG_QUALITY', 80); define ('USERPIC_WIDTH', 80); define ('USERPIC_HEIGHT', 80); define ('USERPIC_JPG_QUALITY', 95); define ('RESOURCES_ALL', 0); define ('RESOURCES_LOCAL', 1); $ua = @$_SERVER['HTTP_USER_AGENT'] or $ua = ''; $_ios = strstr ($ua, 'iPhone') || strstr ($ua, 'iPad'); $_macintosh = strstr ($ua, 'Macintosh'); error_reporting (E_ALL); $_db_error = false; $_fp_error = false; $built = true; if (strstr (__FILE__, 'all.php')) $built = false; function __log ($text, $level = 0) { global $stopwatch, $_log_depth; if ($text === null) { if (function_exists ('file_put_contents')) { @file_put_contents (LOG_FILE, ''); @chmod (LOG_FILE, NEW_FILES_RIGHTS); } return; } $microtime = ''; $elapsed = str_pad (round (getmicrotime () - $stopwatch, 5), 10, ' ', STR_PAD_RIGHT); if ($text[0] == '}') { -- $_log_depth; if ($_log_depth < 0) $_log_depth = 0; } $put = ( RUN_ID .' '. $microtime .''. $elapsed .' '. str_repeat (' ', $_log_depth * 2). $text . "\n" ); if ($text[strlen ($text) - 1] == '{') { ++ $_log_depth; } $mode = FILE_APPEND; if (function_exists ('file_put_contents')) { @file_put_contents (LOG_FILE, $put, $mode); @chmod (LOG_FILE, NEW_FILES_RIGHTS); if ($text[0] == '#') { @file_put_contents (LOG_SPECIAL_FILE, $put, $mode); @chmod (LOG_SPECIAL_FILE, NEW_FILES_RIGHTS); } } } function e2_go_to ($where = '') { global $_protocol, $errors, $server_name, $folder_on_server; @session_start (); $_SESSION['errors'] = $errors; if (substr ($where, 0, strlen ($_protocol) + 3) != $_protocol .'://') { header ('Location: '. $_protocol .'://'. $server_name . $folder_on_server .'/'. $where); } else { header ('Location: '. $where); } flush (); return true; } function e2_go_back () { $back = $_SERVER['HTTP_REFERER']; return e2_go_to ($back); } function e2_go_back_or_to ($where) { if ($_SERVER['HTTP_REFERER']) $where = $_SERVER['HTTP_REFERER']; return e2_go_to ($where); } function e2_cookie_prefix ($var = '') { $x = substr_count ($_SERVER['HTTP_HOST'], '.'); $ret = @str_repeat ('_', $x) . $var; return $ret; } function e2_set_cookie ($var, $value = '', $permanent = true) { $expire = $permanent? (time () + 3600 * 24 * 365) : (0); $domain = $_SERVER['HTTP_HOST']; $dots = substr_count ($domain, '.'); if ($dots < 3) $domain = str_repeat ('.', 3 - $dots) . $domain; $x = setcookie (e2_cookie_prefix ($var), $value, $expire, '/'); } function e2_smart_explode ($exploder, $string, $sort = '') { if (trim ($string) != '') { $string = explode ($exploder, $string); foreach ($string as $i => $k) $string[$i] = trim ($k); foreach ($string as $i => $k) if ($k == '') unset ($string[$i]); $u = array_unique ($string); if ('sort' == $sort) sort ($u); return $u; } else return array (); } function e2_add_or_remove_from_set ($set, $action, $what) { if (!is_array ($set)) $set = array (); if ($action == 'add') { $set = array_unique (array_merge ($set, $what)); } if ($action == 'remove') { unset ($set[array_search ($what, $set)]); } if (!is_array ($set)) $set = array (); return $set; } function e2_shortcut ($string) { global $_macintosh, $_ios; if ($_ios) return ''; if ($string == 'submit') { if ($_macintosh) { return '&#x2303; &#x21a9;'; } else { return 'Ctrl + Enter'; } } if ($string == 'livesave') { if ($_macintosh) { return '&#x2318; S'; } else { return 'Ctrl + S'; } } if ($string == 'navigation') { if ($_macintosh) { return '&#x2325;'; } else { return 'Ctrl'; } } if ($string == 'navigation-later') { if ($_macintosh) { return '&#x2325; &uarr;'; } else { return 'Ctrl + &uarr;'; } } if ($string == 'navigation-earlier') { if ($_macintosh) { return '&#x2325; &darr;'; } else { return 'Ctrl + &darr;'; } } } function e2_html_lt_gt ($text) { $text = str_replace ('<', '&lt;', $text); $text = str_replace ('>', '&gt;', $text); return $text; } function e2_html_quot ($text) { $text = str_replace ('"', '&quot;', $text); return $text; } function e2_round ($value, $accuracy) { return str_replace ('.', ',', round ($value, $accuracy)); } function e2_stripslashes_array ($array) { return is_array ($array) ? array_map ('e2_stripslashes_array', $array) : stripslashes ($array); } function e2_deal_with_magic_quotes () { if (get_magic_quotes_runtime ()) { set_magic_quotes_runtime (0); } if (get_magic_quotes_gpc ()) { $_GET = e2_stripslashes_array ($_GET); $_POST = e2_stripslashes_array ($_POST); $_COOKIE = e2_stripslashes_array ($_COOKIE); $_REQUEST = e2_stripslashes_array ($_REQUEST); } } function e2_ip_num_from_str ($ip) { return sprintf ('%u', ip2long ($ip)); } function e2_ip_str_from_num ($number) { return long2ip (sprintf ('%d', $number)); } function e2_decline_for_number ($text, $number = null) { $text_only = $text; if ($number === null) { $number = substr ($text, 0, strpos ($text, ' ')); $text_only = substr ($text, strpos ($text, ' ') + 1); } $p_open = strpos ($text_only, '('); $p_close = strpos ($text_only, ')'); if ($p_close > $p_open) $options_str = substr ($text_only, $p_open, $p_close - $p_open + 1); $options = explode (',', trim (@$options_str, '()')); if (count ($options) == 2) array_unshift ($options, ''); $cases = array (2, 0, 1, 1, 1, 2, 2, 2, 2, 2); if ($number%100 > 10 and $number%100 < 20) $case = 2; else $case = $cases[$number%10]; $option = $options[$case]; $text = str_replace ($options_str, $option, $text); if (strstr ($text, '(') and strstr ($text, ')')) { return e2_decline_for_number ($text, $number); } else { return $text; } } function e2_unlink_glob ($mask) { $filenames = glob ($mask, GLOB_NOSORT); if (is_array ($filenames)) { foreach ($filenames as $filename) { @unlink ($filename); } } } function e2_cleandir ($dir) { $filenames = glob ($dir .'*', GLOB_NOSORT); if (is_array ($filenames)) { foreach ($filenames as $filename) { if (basename ($filename) != '.' and basename ($filename) != '..') { if (is_dir ($filename)) { if (e2_cleandir ($filename .'/')) { if (!rmdir ($filename)) { return false; } } else { return false; } } else { @unlink ($filename); } } } return true; } else { return false; } } function forcedirectories ($path) { $path = trim ($path, '/'); $path = explode ('/', $path); $dir = ''; foreach ($path as $p) { $dir = $dir.$p; if (!is_dir ($dir)) { if (@mkdir ($dir)) { @chmod ($dir, NEW_FILES_RIGHTS); } else { return false; } } $dir = $dir.'/'; } return true; } function optimize_path ($path) { return preg_replace ('/\/([^\/]+?)\/\.\./', '', $path); } function unhtmlentities ($string) { $trans_tbl = get_html_translation_table (HTML_ENTITIES); $trans_tbl = array_flip ($trans_tbl); return strtr ($string, $trans_tbl); } function getmicrotime ($from_what = NULL) { if (NULL == $from_what) $from_what = microtime (); list ($usec, $sec) = explode (' ', $from_what); return ((float) $usec + (float) $sec); } $stopwatch = getmicrotime ($stopwatch); function e2utf8__unformat_htmlentity ($x) { global $_e2utf8__unformat_htmlentity_neasden; if ($_e2utf8__unformat_htmlentity_neasden) { return $x; } else { return '((html '. $x .'))'; } } function e2_windows_1251_from_utf ($str_utf8, $htmlentities = false) { $str_win1251 = ''; $len = strlen ($str_utf8); for ($i = 0; $i < 256; ++ $i) { $leading_1s[$i] = 0; $num = $i; while ($num & 0x00000080) { $num <<= 1; ++ $leading_1s[$i]; } } for ($i = 0xd090; $i <= 0xd0bf; $i++) $cyrillics[$i] = chr (($i & 0x000000ff) + 48); for ($i = 0xd180; $i <= 0xd18f; $i++) $cyrillics[$i] = chr (($i & 0x000000ff) + 112); $cyrillics[0xd081] = "\xa8"; $cyrillics[0xd191] = "\xb8"; $cyrillics[0xc299] = "\x99"; $cyrillics[0xc2a9] = "\xa9"; $cyrillics[0xc2ae] = "\xae"; $cyrillics[0xc2ab] = "\xab"; $cyrillics[0xc2bb] = "\xbb"; $cyrillics[0xc2a0] = "\xa0"; $i = 0; while ($i < $len) { $si = $str_utf8{$i}; $ordi = ord ($si); if ($leading_1s[$ordi] == 0) { $str_win1251 .= $si; ++ $i; } elseif ($leading_1s[$ordi] == 2) { $char_win1251 = $cyrillics[($ordi << 8) | ord ($str_utf8{$i+1})]; $str_win1251 .= ($char_win1251 != null)? $char_win1251 : ( $htmlentities? (e2utf8__unformat_htmlentity ( e2utf8__htmlentity_from_utf8_char (substr ($str_utf8, $i, 2)) )) : '?' ); $i += 2; } else { $char_utf8 = substr ($str_utf8, $i, $leading_1s[$ordi]); if ($char_utf8 == "\xe2\x84\x96") $str_win1251 .= "\xb9"; elseif ($char_utf8 == "\xe2\x80\x93") $str_win1251 .= "\x96"; elseif ($char_utf8 == "\xe2\x80\x94") $str_win1251 .= "\x97"; elseif ($char_utf8 == "\xe2\x80\x98") $str_win1251 .= "\x91"; elseif ($char_utf8 == "\xe2\x80\x99") $str_win1251 .= "\x92"; elseif ($char_utf8 == "\xe2\x80\x9a") $str_win1251 .= "\x82"; elseif ($char_utf8 == "\xe2\x80\x9c") $str_win1251 .= "\x93"; elseif ($char_utf8 == "\xe2\x80\x9d") $str_win1251 .= "\x94"; elseif ($char_utf8 == "\xe2\x80\x9e") $str_win1251 .= "\x84"; elseif ($char_utf8 == "\xe2\x80\xa6") $str_win1251 .= "\x85"; elseif ($char_utf8 == "\xe2\x80\xb9") $str_win1251 .= "\x8b"; elseif ($char_utf8 == "\xe2\x80\xba") $str_win1251 .= "\x9b"; elseif ($char_utf8 == "\xe2\x82\xac") $str_win1251 .= "\x88"; elseif ($char_utf8 == "\xe2\x84\xa2") $str_win1251 .= "\x99"; else $str_win1251 .= $htmlentities? (e2utf8__unformat_htmlentity ( e2utf8__htmlentity_from_utf8_char ($char_utf8) )) : '?'; $i += $leading_1s[$ordi]; } } return $str_win1251; } function e2utf8__htmlentity_from_utf8_char ($c) { $bits = ''; $len = strlen ($c); for ($i = 0; $i < $len; ++ $i) { $bits .= preg_replace ('/^1*0/', '', decbin (ord ($c{$i}))); } return '&#'. bindec ($bits) .';'; } function e2_utf_from_windows_1251 ($str) { $ret = $str; $ret = preg_replace_callback ('/([\x80-\xFF])/', 'e2_utf_from_windows_1251_char', $ret); return $ret; } function e2_utf_from_windows_1251_char ($c) { list (, $c) = $c; if ($c == "\xa8") return "\xd0\x81"; if ($c == "\xb8") return "\xd1\x91"; if ($c >= "\xc0" && $c <= "\xef") return "\xd0" . chr (ord ($c) - 48); if ($c >= "\xf0") return "\xd1" . chr (ord ($c) - 112); if ($c == "\x85") return "\xe2\x80\xa6"; if ($c == "\x96") return "\xe2\x80\x93"; if ($c == "\x97") return "\xe2\x80\x94"; if ($c == "\xab") return "\xc2\xab"; if ($c == "\xbb") return "\xc2\xbb"; if ($c == "\x91") return "\xe2\x80\x98"; if ($c == "\x92") return "\xe2\x80\x99"; if ($c == "\x93") return "\xe2\x80\x9c"; if ($c == "\x94") return "\xe2\x80\x9d"; if ($c == "\x84") return "\xe2\x80\x9e"; if ($c == "\x99") return "\xe2\x84\xa2"; if ($c == "\xb9") return "\xe2\x84\x96"; if ($c == "\xa0") return "\xc2\xa0"; return '?'; }; function e2_utf8_version_of_array_($array) { foreach ($array as $k => $v) { if (!array_key_exists ($k.'.u?', $array)) { if (is_string ($array[$k])) { $array[$k] = e2_utf_from_windows_1251 ($array[$k]); } elseif (is_array ($array[$k])) { $array[$k] = e2_utf8_version_of_array_($array[$k]); } } } return $array; } function e2_question_long_utf8_chars_helper ($m) { return mb_convert_encoding ($m[0], 'HTML-ENTITIES', 'UTF-8'); } function e2_question_long_utf8_chars ($str, $ishtml = false) { if ($ishtml) { return preg_replace_callback ( '/[\x{10000}-\x{fffff}]/u', 'e2_question_long_utf8_chars_helper', $str ); } else { return preg_replace ('/[\x{10000}-\x{fffff}]/u', '?', $str); } } function e2img_filename_by_processing ( $source_filename, $dest_filename, $constraints_array, $crop_mode, $quality ) { global $_config; if (__LOG) __log ('Process image: "'. $source_filename .'" -> "'. $dest_filename .'"'); if (!is_file ($source_filename)) return false; if (!e2_has_raster_image_extension ($source_filename)) { if (__LOG) __log ('Process image: SVG, no processing'); return $source_filename; } if (is_file ($dest_filename) and !e2_are_same_filenames ($source_filename, $dest_filename)) { if (__LOG) __log ('Process image: Already exists'); return $dest_filename; } if (!extension_loaded ('gd') and !dl ('gd.so')) return false; $dest_pathinfo = pathinfo ($dest_filename); if (!@forcedirectories ($dest_pathinfo['dirname'])) { if (__LOG) __log ( 'Process image: Can’t create directory <'. $dest_pathinfo['dirname'] .'>' ); return false; } if (__LOG) __log ('Process image: Detecting image type'); $type = e2img__type_of_file ($source_filename); if (!$type) return false; $imagecreate_func = 'imagecreatefrom'. $type; if (!function_exists ($imagecreate_func)) return false; if (__LOG) __log ('Process image: Opening original image'); $original_res = call_user_func ($imagecreate_func, $source_filename); if (!$original_res) return false; if ($angle = e2img__orientation_of_file ($source_filename)) { if (__LOG) __log ('Process image: Needs orientation fix'); $original_res = e2img__res_rotate ($original_res, -$angle); } $original_metrics_array = [imagesx ($original_res), imagesy ($original_res)]; $result_metrics_array = $original_metrics_array; $crop_array = [0, 0, 0, 0]; if ($crop_mode == CROP_SQUARE) { if (__LOG) __log ('Process image: Needs crop'); list ($result_metrics_array, $crop_array) = ( e2img__crop_metrics_to_square ($result_metrics_array) ); } $result_metrics_array = e2img__fit_metrics_to_constraints ( $result_metrics_array, $constraints_array ); if ( $angle === 0 and $result_metrics_array === $original_metrics_array ) { if (__LOG) __log ('Process image: No changes necessary, leaving original'); return $source_filename; } if (__LOG) __log (var_export ($result_metrics_array, true)); if (__LOG) __log (var_export ($crop_array, true)); $result_res = e2img__create_copy_resampled ( $original_res, $result_metrics_array, $crop_array, $type ); imagejpeg ($result_res, $dest_filename, $quality); if (!is_file ($dest_filename)) { if (__LOG) __log ('Process image: File not created by imagejpeg'); return false; } chmod ($dest_filename, $_config['uploaded_files_mode']); if (__LOG) __log ('Process image: Done'); return $dest_filename; } function e2img__create_copy_resampled ( $original_res, $result_metrics_array, $crop_array, $type ) { list ($result_width, $result_height) = $result_metrics_array; list ($crop_left, $crop_top, $crop_horizontal, $crop_vertical) = $crop_array; $result_res = imagecreatetruecolor ($result_width, $result_height); if ($type === 'png') { imagefill ($result_res, 0, 0, imagecolorallocate ($result_res, 255, 255, 255)); imagealphablending ($result_res, true); } $original_width = imagesx ($original_res); $original_height = imagesy ($original_res); imagecopyresampled ( $result_res, $original_res, 0, 0, 0 + $crop_left, 0 + $crop_top, $result_width, $result_height, $original_width - $crop_horizontal, $original_height - $crop_vertical ); imageinterlace ($result_res, 1); return $result_res; } function e2img__type_of_file ($filename) { $info = @getimagesize ($filename); if (!$info or $info[2] > 3) return false; if ($info[2] == IMAGETYPE_GIF) return 'gif'; if ($info[2] == IMAGETYPE_JPEG) return 'jpeg'; if ($info[2] == IMAGETYPE_PNG) return 'png'; return false; } function e2img__orientation_of_file ($filename) { if (!function_exists ('exif_read_data')) return 0; if (($exif = @exif_read_data ($filename)) === false) return 0; if ($exif['Orientation'] == 3) return -180; if ($exif['Orientation'] == 6) return -270; if ($exif['Orientation'] == 8) return -90; return 0; } function e2img__res_rotate ($res, $angle) { $rotated_res = imagerotate ($res, $angle, 0); if ($rotated_res !== false) { imagedestroy ($res); $res = $rotated_res; } return $res; } function e2img__fit_metrics_to_constraints ( $metrics_array, $constraints_array ) { if ($constraints_array === false) $constraints_array = [0, 0]; list ($width, $height) = $metrics_array; list ($fit_width, $fit_height) = $constraints_array; $scales = [1]; if ($fit_width) $scales[] = $fit_width / $width; if ($fit_height) $scales[] = $fit_height / $height; $scale = min ($scales); if ($scale < 1) { $width = round ($width * $scale); $height = round ($height * $scale); } return [$width, $height]; } function e2img__crop_metrics_to_square ($metrics_array) { $left = $top = $horizontal = $vertical = 0; list ($width, $height) = $metrics_array; if ($width > $height) { $horizontal = $width - $height; $left = floor ($horizontal / 2); $height = $width; } elseif ($width < $height) { $vertical = $height - $width; $top = floor ($horizontal / 2); $width = $height; } $crop_array = [$left, $top, $horizontal, $vertical]; $new_metrics_array = [$width, $height]; return [$new_metrics_array, $crop_array]; } $_folders_written = array ( '.', USER_FOLDER, CACHES_FOLDER, BACKUP_FOLDER, MEDIA_ROOT_FOLDER . PICTURES_FOLDER, MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER, MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'remote/', MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER .'remote/', MEDIA_ROOT_FOLDER . AUDIO_FOLDER, ); $_files_written = array ( USER_FOLDER . 'password-hash.psa', USER_FOLDER . 'password-wait.psa', USER_FOLDER . 'last-comment.psa', USER_FOLDER . 'new-uploads.psa', USER_FOLDER . 'settings.json', USER_FOLDER . 'indexing.psa', USER_FOLDER . 'auth.psa', USER_FOLDER . 'log.txt', ); define ('CROP_NONE', 0); define ('CROP_SQUARE', 1); define ('PROVIDE_DATA_SPAWN', 10); define ('PROVIDE_DATA_NOW', 20); function e2_paths_with_write_problems () { global $_folders_written, $_files_written; clearstatcache (); $list = array (); foreach ($_folders_written as $f) { if (is_dir ($f) and !is_writable ($f)) { $list[] = $f; } } foreach ($_files_written as $f) { if (is_file ($f) and !is_writable ($f)) { $list[] = $f; } } return $list; } function write_file ($file, $string) { if (!@file_put_contents ($file, $string, LOCK_EX)) { return false; } @chmod ($file, NEW_FILES_RIGHTS); return true; } function e2_generate_filename_for_thumbnail ($basename) { if (preg_match ('/^https?\:\/\//iu', $basename)) { $dest_name = $basename; $dest_name = preg_replace ('/^https?\:\/\//iu', '', $dest_name); $dest_name = str_replace ('/', '--', $dest_name); $dest_name = MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER . $dest_name; } else { $dest_name = MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER . $basename; } $dest_name = e2files__add_ext_prefix ($dest_name, 'thumb@2x'); return $dest_name; } function e2_scale_image_to_thumbnail ($basename) { if (preg_match ('/^https?\:\/\//iu', $basename)) { $source_name = $basename; } else { $source_name = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $basename; } $dest_name = e2img_filename_by_processing ( $source_name, e2_generate_filename_for_thumbnail ($basename), [THUMB_WIDTH, THUMB_HEIGHT], CROP_NONE, THUMB_JPG_QUALITY ); if ($dest_name === false) return false; $len = strlen (MEDIA_ROOT_FOLDER); if (substr ($dest_name, 0, $len) == MEDIA_ROOT_FOLDER) { $dest_basename = substr ($dest_name, $len); } return $dest_basename; } function e2_has_image_extension ($source_name) { $source_pathinfo = pathinfo ($source_name); $ext = $source_pathinfo['extension']; return (in_array (strtolower ($ext), array ('jpg', 'jpeg', 'gif', 'png', 'svg'))); } function e2_has_raster_image_extension ($source_name) { $source_pathinfo = pathinfo ($source_name); $ext = $source_pathinfo['extension']; return (in_array (strtolower ($ext), array ('jpg', 'jpeg', 'gif', 'png'))); } function e2_image_type_by_extension ($source_name) { $source_pathinfo = pathinfo ($source_name); $ext = $source_pathinfo['extension']; if ($ext == 'png') return IMAGETYPE_PNG; if ($ext == 'gif') return IMAGETYPE_GIF; if ($ext == 'jpg' or $ext == 'jpeg') return IMAGETYPE_JPEG; } function e2_getimagesize ($filename) { if (e2_has_raster_image_extension ($filename)) { list ($width, $height) = getimagesize ($filename); } else { $xmlget = simplexml_load_string (file_get_contents ($filename)); if ($xmlget) { $xmlattributes = $xmlget->attributes (); list ($width, $height) = array ((string) $xmlattributes -> width, (string) $xmlattributes -> height); } else { return false; } } if (substr ($filename, strrpos ($filename, '.') - 3, 3) == '@2x') { $width = (int) floor ($width / 2); $height = (int) floor ($height / 2); } return array ($width, $height); } function e2s_retrieve ($parameters) { $source = urldecode (base64_decode ($parameters['url'])); if (__LOG) __log ('Retrieve: '. $source); e2_provide_data_for_resource ($source, PROVIDE_DATA_NOW); } function e2_resouce_info ($item) { global $full_blog_url; $parts = parse_url ($item); if (isset ($parts['scheme'])) { if (e2_has_image_extension ($parts['path'])) { return array ( 'type' => 'remote-image', 'is-local?' => false, ); } elseif ($parts['host'] == 'www.youtube.com') { $id = basename ($parts['path']); $local_cover_name = 'remote/youtube-'. $id .'-cover.jpg'; return array ( 'type' => 'online-video', 'is-local?' => false, 'video-service' => 'youtube', 'video-id' => $id, 'local-cover-name' => $local_cover_name, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER . $local_cover_name, 'local-full-filename' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $local_cover_name, 'local-full-failname' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $local_cover_name . '.failed', ); } elseif ($parts['host'] == 'player.vimeo.com') { $id = basename ($parts['path']); $local_cover_name = 'remote/vimeo-'. $id .'-cover.jpg'; return array ( 'type' => 'online-video', 'is-local?' => false, 'video-service' => 'vimeo', 'video-id' => $id, 'local-cover-name' => $local_cover_name, 'local-cover-href' => $full_blog_url .'/'. PICTURES_FOLDER . $local_cover_name, 'local-full-filename' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $local_cover_name, 'local-full-failname' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $local_cover_name . '.failed', ); } } else { if (e2_has_image_extension ($parts['path'])) { return array ( 'type' => 'local-image', 'is-local?' => true, 'local-href' => $full_blog_url .'/'. PICTURES_FOLDER . $parts['path'], 'local-full-filename' => MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $parts['path'] ); } else { return array ( 'type' => 'local-non-image', 'is-local?' => true, ); } } } function e2_provide_data_for_resource ($item, $how) { $resource_info = e2_resouce_info ($item); if ($resource_info['type'] == 'remote-image') { } elseif ($resource_info['type'] == 'online-video') { if (is_file ($resource_info['local-full-filename'])) { if (__LOG) __log ('Already exists: '. $resource_info['local-full-filename']); } elseif (is_file ($resource_info['local-full-failname'])) { if (__LOG) __log ('Already tried and failed: '. $resource_info['local-full-filename']); } else { if (__LOG) __log ($item.' is missing a cover, retrieving'); if ($how == PROVIDE_DATA_SPAWN) { e2_spawn (e2_compose_url ('e2s_retrieve', array ( 'url' => urlencode (base64_encode ($item)), ))); } if ($how == PROVIDE_DATA_NOW) { if ($resource_info['video-service'] == 'youtube') { $youtube_filenames = array ( 'maxresdefault', 'hqdefault', 'mqdefault', 'sddefault', 'default' ); foreach ($youtube_filenames as $youtube_filename) { $url = 'http://img.youtube.com/vi/'. $resource_info['video-id'] .'/'. $youtube_filename .'.jpg'; if (__LOG) __log ('Getting ' . $url .' as '. $resource_info['local-full-filename']); $cover_image = file_get_contents ($url); if ($cover_image !== false) break; } } if ($resource_info['video-service'] == 'vimeo') { $video_info = unserialize ( file_get_contents ('http://vimeo.com/api/v2/video/'. $resource_info['video-id'] .'.php') ); if (isset ($video_info[0]['thumbnail_large'])) { $cover_image = file_get_contents ($video_info[0]['thumbnail_large']); } } if ($cover_image !== false) { write_file ($resource_info['local-full-filename'], $cover_image); } else { write_file ($resource_info['local-full-failname'], ''); } } } if ($how == PROVIDE_DATA_NOW) { if (is_file ($resource_info['local-full-filename'])) { e2_scale_image_to_thumbnail ($resource_info['local-cover-name']); } } } elseif ($resource_info['type'] == 'local-image') { if (__LOG) __log ($item.' is a local image'); e2_scale_image_to_thumbnail ($item); } elseif ($resource_info['type'] == 'local-non-image') { if (__LOG) __log ($item.' is a local non-image'); } } function e2_provide_data_for_resources_async ($list) { if (!is_array ($list)) return; if (__LOG) __log ('Provide data for resources {'); foreach ($list as $item) { e2_provide_data_for_resource ($item, PROVIDE_DATA_SPAWN); } if (__LOG) __log ('}'); } function e2_pasteable_thumbnails_for_editor ($entity_type, $entity_id, $resource_mentions) { $uploads = e2_list_uploads_for_entity ($entity_type, $entity_id); $resources = array_merge ($uploads, $resource_mentions); $resources = array_reverse ($resources); $resources = array_unique ($resources); $resources = array_reverse ($resources); return e2_list_available_thumbnails_for_resources ($resources, RESOURCES_LOCAL); } function e2_augment_uploads_using_formatinfo ($noteortagrec, $formatinfo) { $preserved_uploads = array (); if (is_array ($formatinfo['meta']['resources-detected'])) { $resource_mentions = $formatinfo['meta']['resources-detected']; $preserved_uploads = e2_list_local_resources_from_mentions ($resource_mentions); } $registered_uploads = @unserialize ( $noteortagrec['Uploads'] ) or $registered_uploads = array (); $missing_uploads = array_diff ($preserved_uploads, $registered_uploads); e2_register_upload ('note', $noteortagrec['ID'], 'add', $missing_uploads); return $missing_uploads; } function e2_list_local_resources_from_mentions ($mentions) { $list = array (); foreach ($mentions as $mention) { $resource_info = e2_resouce_info ($mention); if ($resource_info['is-local?']) $list[] = $mention; } return $list; } function e2_list_available_thumbnails_for_resources ($resources, $which = RESOURCES_ALL) { global $full_blog_url; $images_names = array (); $images = array (); if (!is_array ($resources)) return $images; e2_provide_data_for_resources_async ($resources); foreach ($resources as $resource) { $resource_info = e2_resouce_info ($resource); if ($which == RESOURCES_LOCAL and !$resource_info['is-local?']) continue; if ($resource_info['type'] == 'remote-image') { } elseif ($resource_info['type'] == 'online-video') { if ($thumb_relative_path = e2_scale_image_to_thumbnail ($resource_info['local-cover-name'])) { $size = e2_getimagesize (MEDIA_ROOT_FOLDER . $thumb_relative_path); list ($width, $height) = $size; if (!in_array ($resource, $images_names)) { $images_names[] = $resource; $images[] = array ( 'original-filename' => $resource, 'href' => $full_blog_url .'/'. $thumb_relative_path, 'width' => $width, 'height' => $height, ); } } } elseif ($resource_info['type'] == 'local-image') { if ($thumb_relative_path = e2_scale_image_to_thumbnail ($resource)) { $size = e2_getimagesize (MEDIA_ROOT_FOLDER . $thumb_relative_path); list ($width, $height) = $size; if (!$width) $width = THUMB_WIDTH/2; if (!$height) $height = THUMB_HEIGHT/2; if (!in_array ($resource, $images_names)) { $images_names[] = $resource; $images[] = array ( 'original-filename' => $resource, 'href' => $full_blog_url .'/'. $thumb_relative_path, 'width' => $width, 'height' => $height, ); } } } elseif ($resource_info['type'] == 'local-non-image') { if (is_file (MEDIA_ROOT_FOLDER . AUDIO_FOLDER . $resource)) { if (!in_array ($resource, $images_names)) { $images_names[] = $resource; $images[] = array ( 'original-filename' => $resource, 'href' => $full_blog_url .'/'. AUDIO_ICON_IMAGE, 'width' => AUDIO_ICON_WIDTH, 'height' => AUDIO_ICON_HEIGHT, ); } } } } return $images; } function e2_og_images ($entity_type, $entity_id, $resources) { global $full_blog_url; $list = array (); if (is_array ($resources)) { $list = e2files__list_og_images_for_resources_($resources); } $uploads = e2_list_uploads_for_entity ($entity_type, $entity_id); if (is_array ($uploads)) { foreach ($uploads as $k => $v) { if (is_file (MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $v)) { $uploads[$k] = $full_blog_url .'/'. PICTURES_FOLDER . $v; } else { unset ($uploads[$k]); } } $list = array_merge ($uploads, $list); } $list = array_reverse ($list); $list = array_unique ($list); $list = array_reverse ($list); return $list; } function e2files__list_og_images_for_resources_($resources) { $images = array (); e2_provide_data_for_resources_async ($resources); foreach ($resources as $resource) { $resource_info = e2_resouce_info ($resource); if ($resource_info['type'] == 'remote-image') { } elseif ($resource_info['type'] == 'online-video') { if (is_file ($resource_info['local-full-filename'])) { $images[] = $resource_info['local-cover-href']; } } elseif ($resource_info['type'] == 'local-image') { if (is_file ($resource_info['local-full-filename'])) { $images[] = $resource_info['local-href']; } } elseif ($resource_info['type'] == 'local-non-image') { } } return $images; } function e2files__safe_filename_from_utf8 ($name, $file_kind) { if (preg_match('//u', $name)) $name = e2_windows_1251_from_utf ($name, false); if ($file_kind == 'image') { $folder = MEDIA_ROOT_FOLDER . PICTURES_FOLDER; } elseif ($file_kind == 'audio') { $folder = MEDIA_ROOT_FOLDER . AUDIO_FOLDER; } else { return false; } $newname = ''; for ($i = 0; $i < strlen ($name); $i++) { if ($name[$i] == '?') { $newname .= ''; } elseif ($name[$i] == ' ') { $newname .= '-'; } elseif (ord ($name[$i]) <= 127) { $newname .= $name[$i]; } } if ($newname == '') $newname = $file_kind; if ($newname[0] == '.') $newname = $file_kind . $newname; return $newname; } function e2_is_upload_referenced ($upload) { global $_config; if (__LOG) __log ('Count references for upload <'. $upload .'>'); $uploads_1 = $uploads_2 = $uploads_3 = array (); if (is_file (USER_FOLDER . 'new-uploads.psa')) { $uploads_1 = @unserialize (file_get_contents (USER_FOLDER . 'new-uploads.psa')); if (!is_array ($uploads_1)) $uploads_1 = array (); } $upload_pattern = '%'. str_replace ('%', '#%', $upload) .'%'; if (e2_mysql_query ( "SELECT `ID`, `Text`, `FormatterID`, `Uploads` ". "FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `Text` LIKE '". $upload_pattern ."' ESCAPE '#' ". "OR `Uploads` LIKE '". $upload_pattern ."' ESCAPE '#'" )) { $result = e2_mysql_result_as_array (); $uploads_2 = @unserialize ($result[0]['Uploads']); if (!is_array ($uploads_2)) { foreach ($result as $noterec) { $formatinfo = e2_format_with_formatter ( $noterec['FormatterID'], @$noterec['Text'], 'full-rss' ); $uploads_2 = e2_augment_uploads_using_formatinfo ($noterec, $formatinfo); } } } if (e2_mysql_query ( "SELECT `ID`, `Description`, `Uploads` ". "FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE `Description` LIKE '". $upload_pattern ."' ESCAPE '#' ". "WHERE `Uploads` LIKE '". $upload_pattern ."' ESCAPE '#'" )) { $result = e2_mysql_result_as_array (); $uploads_3 = @unserialize ($result[0]['Uploads']); if (!is_array ($uploads_3)) { foreach ($result as $tagrec) { $formatinfo = e2_format_with_default_formatter ( @$tagrec['Description'], 'full-rss' ); $uploads_3 = e2_augment_uploads_using_formatinfo ($tagrec, $formatinfo); } } } $uploads = array_merge ($uploads_1, $uploads_2, $uploads_3); if (__LOG) __log ('References found in relevant entries: '. var_export ($uploads, true)); if (in_array ($upload, $uploads)) { if (__LOG) __log ('Still referenced, do not delete file'); return true; } return false; } function e2_list_uploads_for_entity ($entity, $id) { global $_config; if ($entity == 'note' and $id == 'new') { if (is_file (USER_FOLDER . 'new-uploads.psa')) { $uploads = @unserialize (file_get_contents (USER_FOLDER . 'new-uploads.psa')); } } elseif ($entity == 'note') { if (e2_mysql_query ( "SELECT `Uploads` FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `ID`=". $id )) { $result = e2_mysql_result_as_array (); $uploads = @unserialize ($result[0]['Uploads']); } } elseif ($entity == 'tag') { if (e2_mysql_query ( "SELECT `Uploads` FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE `ID`=". $id )) { $result = e2_mysql_result_as_array (); $uploads = @unserialize ($result[0]['Uploads']); } } if (!is_array ($uploads)) $uploads = array (); return $uploads; } function e2_store_uploads_for_entity ($entity, $id, $uploads) { global $_config; if ($entity == 'note' and $id == 'new') { if (!@write_file (USER_FOLDER . 'new-uploads.psa', serialize ($uploads))) { e2_error ('ERROR', E2E_PERMISSIONS_ERROR); } } elseif ($entity == 'note') { e2_mysql_query ( "UPDATE `". $_config['db_table_prefix'] . "Notes` ". "SET `Uploads`='". serialize ($uploads) ."' ". "WHERE `ID`=". $id ); } elseif ($entity == 'tag') { e2_mysql_query ( "UPDATE `". $_config['db_table_prefix'] . "Keywords` ". "SET `Uploads`='". serialize ($uploads) ."' ". "WHERE `ID`=". $id ); } else { return false; } if (!is_array ($uploads)) $uploads = array (); return $uploads; } function e2_register_upload ($entity, $id, $action, $what) { global $_config; $uploads = array (); if (__LOG) __log ('Register upload: <'. $entity.', '. $id.', '. $action.', '. $what .'>'); $uploads = e2_list_uploads_for_entity ($entity, $id); $uploads = e2_add_or_remove_from_set ($uploads, $action, $what); e2_store_uploads_for_entity ($entity, $id, $uploads); } function e2_register_unregistered_uploads ($table_name, $record, $resource_mentions) { $registered_uploads = @unserialize ($record['Uploads']) or $registered_uploads = array (); $unregistered_uploads = e2_list_local_resources_from_mentions ($resource_mentions); $uploads = e2_add_or_remove_from_set ($registered_uploads, 'add', $unregistered_uploads); $uploads = serialize ($uploads); if ($uploads != $record['Uploads']) { $record['Uploads'] = $uploads; e2_update_record ($table_name, $record); } } function e2j_file_upload ($parameters = array ()) { global $_config, $full_blog_url; @forcedirectories (MEDIA_ROOT_FOLDER . PICTURES_FOLDER); @chmod (MEDIA_ROOT_FOLDER . PICTURES_FOLDER, $_config['uploaded_files_mode']); @forcedirectories (MEDIA_ROOT_FOLDER . AUDIO_FOLDER); @chmod (MEDIA_ROOT_FOLDER . AUDIO_FOLDER, $_config['uploaded_files_mode']); $response = array (); $response['success'] = 0; if (count ($_FILES) > 0) { foreach ($_FILES as $file) { if (!$file['error']) { if (__LOG) __log ('Ajax file upload: <'. $file['name'].'>'); $response['file-kind'] = 'image'; $folder = MEDIA_ROOT_FOLDER . PICTURES_FOLDER; if (substr ($file['name'], strrpos ($file['name'], '.')) == '.mp3') { $response['file-kind'] = 'audio'; $folder = MEDIA_ROOT_FOLDER . AUDIO_FOLDER; } $overwrite = ( array_key_exists ('overwrite', $_GET) and is_file ($folder . $file['name']) ); $same_file_as_existing = false; $response['overwrite'] = (int) $overwrite; if (__LOG) __log ('Ajax file upload: Overwrite is resolved to <'. (int) $overwrite.'>'); $newname = e2files__safe_filename_from_utf8 ($file['name'], $response['file-kind']); if (__LOG) __log ('Ajax file upload: Safe name is <'. $newname.'>'); if (is_file ($folder . $newname)) { if (file_get_contents ($folder . $newname) == file_get_contents ($file['tmp_name'])) { if (__LOG) __log ('Ajax file upload: Existing file is the same'); $same_file_as_existing = true; } elseif (!$overwrite) { $newname = e2files__find_free_filename ($folder, $newname); } } if (!$same_file_as_existing) { move_uploaded_file ($file['tmp_name'], $folder . $newname); @chmod ($save_as, $_config['uploaded_files_mode']); } if (__LOG) __log ('Ajax file upload: File kind is <'. $response['file-kind'].'>'); if ($response['file-kind'] == 'image') { $newname_after = e2files__find_free_filename_with_added_ext ( MEDIA_ROOT_FOLDER . PICTURES_FOLDER, $newname, 'jpg' ); $full_name_before = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $newname; $full_name_after = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $newname_after; if (__LOG) __log ('Ajax file upload: Process uploaded image <'. $full_name_before.'>'. ' to possibly <'. $full_name_after.'>'); $full_name_after = e2img_filename_by_processing ( $full_name_before, $full_name_after, [ $_config['fit_uploaded_images'], $_config['fit_uploaded_images'], ], CROP_NONE, SCALED_IMAGE_JPG_QUALITY ); if (!e2_are_same_filenames ($full_name_after, $full_name_before)) { @unlink ($full_name_before); $newname = $newname_after; } if ($overwrite) { @unlink (e2_generate_filename_for_thumbnail ($newname)); } if ($thumb_relative_path = e2_scale_image_to_thumbnail ($newname)) { if (__LOG) __log ('Ajax file upload: thumbnail, done'); list ($width, $height) = e2_getimagesize (MEDIA_ROOT_FOLDER . $thumb_relative_path); $response['success'] = 1; $response['new-name'] = $newname; $response['thumb'] = $full_blog_url .'/'. $thumb_relative_path; $response['width'] = $width; $response['height'] = $height; e2_register_upload ($parameters['entity'], $parameters['entity-id'], 'add', array ($newname)); } else { if (__LOG) __log ('Ajax file upload: couldn’t create thumbnail'); @unlink ($folder . $newname); $response['error'] = 'could-not-create-thumbnail'; } } if ($response['file-kind'] == 'audio') { if (__LOG) __log ('Ajax file upload: audio, done'); $response['success'] = 1; $response['new-name'] = $newname; $response['thumb'] = AUDIO_ICON_IMAGE; $response['width'] = AUDIO_ICON_WIDTH; $response['height'] = AUDIO_ICON_HEIGHT; } } elseif (4 != $file['error']) { if ($file['error'] == 1) { $response['error'] = 'too-big'; } elseif ($file['error'] == 2) { $response['error'] = 'too-big'; } elseif ($file['error'] == 3) { $response['error'] = 'partial'; } else { $response['error'] = $file['error']; } } } } else { if (__LOG) __log ('Ajax file upload error: no files'); $response['error'] = 'no-files'; } $response = json_encode ($response); die ($response); } function e2j_userpic_upload () { global $_config; if (count ($_FILES) == 1) { $file = array_pop ($_FILES); if (!$file['error']) { if (__LOG) __log ('Ajax userpic upload: <'. $file['name'].'>'); $pathinfo = pathinfo ($file['name']); $ext = strtolower ($pathinfo['extension']); if ($ext != 'png') $ext = 'jpg'; $filename = 'userpic.original.'. $ext; move_uploaded_file ($file['tmp_name'], USER_FOLDER . $filename); @chmod (USER_FOLDER . $filename, $_config['uploaded_files_mode']); @unlink (USER_FOLDER . 'userpic@2x.png'); @unlink (USER_FOLDER . 'userpic@2x.jpg'); $thumb = e2img_filename_by_processing ( USER_FOLDER . $filename, USER_FOLDER .'userpic@2x.jpg', [USERPIC_WIDTH, USERPIC_HEIGHT], CROP_SQUARE, USERPIC_JPG_QUALITY ); @unlink (USER_FOLDER . $filename); if ($thumb) { if (__LOG) __log ('Ajax userpic upload: userpic, done'); die ('image|'. $thumb); } else { die ('image|' . DEFAULT_USERPIC_FILENAME); } } elseif (4 != $file['error']) { if ($file['error'] == 1) { die ('error|too-big'); } elseif ($file['error'] == 2) { die ('error|too-big'); } elseif ($file['error'] == 3) { die ('error|partial'); } else { die ('error|'. $file['error']); } } } else { if (__LOG) __log ('Ajax userpic upload error: no or too many files'); die ('error|no-or-too-many-files'); } die ('error|uncatched-error'); } function e2j_file_remove ($parameters) { $file = $thumb = ''; if (array_key_exists ('file', $_POST)) $file = $_POST['file']; e2_register_upload ($parameters['entity'], $parameters['entity-id'], 'remove', $file); if (e2_is_upload_referenced ($file)) { die ('nothing'); } else { if (substr ($file, strrpos ($file, '.')) == '.mp3') { @unlink (MEDIA_ROOT_FOLDER . AUDIO_FOLDER . $file); die ('nothing'); } else { $thumb = e2files__add_ext_prefix ($file, 'thumb@2x'); if ($file) { $filedel = @unlink (MEDIA_ROOT_FOLDER . PICTURES_FOLDER . $file); $thumbdel = @unlink (MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER . $thumb); die ('nothing'); } } } die ('error|no-filename-passed'); } function e2_space_usage () { global $_config; if (!$_config['files_total_size_limit']) return false; $files_size = 0; foreach (glob (MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'/*') as $file) { $x = stat ($file); $files_size += $x['size']; } foreach (glob (MEDIA_ROOT_FOLDER . AUDIO_FOLDER .'/*') as $file) { $x = stat ($file); $files_size += $x['size']; } $files_size_limit = $_config['files_total_size_limit']; $percent = round ($files_size / $files_size_limit * 100); if ($files_size > 0 and $percent == 0) $percent = 1; if ($files_size < $files_size_limit and $percent == 100) $percent = 99; return array ($files_size, $files_size_limit, $percent); } function e2_are_same_filenames ($f1, $f2) { return strcasecmp ($f1, $f2) === 0; } function e2_uploads_enabled ($space_usage) { $uploads_enabled = true; if (list ($files_size, $files_size_limit, $percent) = $space_usage) { $uploads_enabled = ($files_size_limit - $files_size) > 0; } return $uploads_enabled; } function e2_space_usage_string ($space_usage, $always = false) { $files_size_str = ''; if (list ($files_size, $files_size_limit, $percent) = $space_usage) { $space_usage = array ( 'used' => round ($files_size / 1024 / 1024), 'total' => round ($files_size_limit / 1024 / 1024), 'percent' => $percent ); if ($always or ($files_size_limit - $files_size) < 1024 * 1024 * 10) { if ($files_size < $files_size_limit) { $files_size_str = e2l_get_string ('gs--used', $space_usage); } else { $files_size_str = e2l_get_string ('gs--used-all', $space_usage); } } } return $files_size_str; } function e2files__find_free_filename ($folder, $filename) { if (!is_file ($folder . $filename)) return $filename; $extless = e2files__extless ($filename); $ext = substr ($filename, strrpos ($filename, '.')); $i = 0; while (is_file ($folder . $extless .'-'. (++$i) . $ext)); $filename = $extless .'-'. $i . $ext; return $filename; } function e2files__add_ext_prefix ($filename, $extprefix) { if ($extprefix) { $path_elements = explode ('/', $filename); $basename = array_pop ($path_elements); $basename_elements = explode ('.', $basename); if (count ($basename_elements) < 2) $basename_elements[] = ''; $ext = array_pop ($basename_elements); $basename_elements[] = $extprefix; if ($ext) $basename_elements[] = $ext; $basename = implode ('.', $basename_elements); $path_elements[] = $basename; $filename = implode ('/', $path_elements); } return $filename; } function e2files__extless ($filename) { return substr ($filename, 0, strrpos ($filename, '.')); } function e2files__find_free_filename_with_added_ext ($folder, $filename, $added_ext) { $ext = pathinfo ($filename, PATHINFO_EXTENSION); if (!strcasecmp ($ext, $added_ext)) return $filename; return e2files__find_free_filename ($folder, $filename .'.'. $added_ext); } function e2_load_settings () { global $settings; if (!isset ($settings)) $settings = array (); $tmp = array (); if (is_file (USER_FOLDER . 'settings.json')) { $tmp = json_decode (file_get_contents (USER_FOLDER . 'settings.json'), true); $test = 13; } elseif (is_file (USER_FOLDER . 'settings.psa')) { $tmp = unserialize (file_get_contents (USER_FOLDER . 'settings.psa')); } if (!is_array ($tmp)) $tmp = array (); $settings = array_merge ($settings, $tmp); if ( !is_numeric (@$settings['appearance']['notes_per_page']) or @$settings['appearance']['notes_per_page'] < 1 ) { $settings['appearance']['notes_per_page'] = DEFAULT_ITEMS_PER_PAGE; } if ( @$settings['appearance']['notes_per_page'] > MAX_ITEMS_PER_PAGE ) { $settings['appearance']['notes_per_page'] = MAX_ITEMS_PER_PAGE; } if ( !array_key_exists ('comments', $settings) or !array_key_exists ('default_on', @$settings['comments']) ) { $settings['comments']['default_on'] = false; } return true; } function e2m_settings () { global $settings, $_template, $_strings; $languages = array (); $current_language = @$settings['language']? $settings['language'] : DEFAULT_LANGUAGE; foreach (glob (LANGUAGES_FOLDER. '*.php') as $filename) { $ll = substr (basename ($filename), 0, 2); $contents = file_get_contents ($filename); if (preg_match ( '/^ *\/\/ *display_name *\= *(.*?) *$/ismu', $contents, $matches )) { $display_name = $matches[1]; } else { $display_name = $ll; } $languages[$ll] = array ( 'selected?' => (bool) ($current_language == $ll), 'display-name' => $display_name, ); } $ret['title'] = $_strings['pt--settings']; $ret['heading'] = $_strings['pt--settings']; $ret['form'] = 'form-preferences'; $ret['form-preferences'] = array ( 'blog-title-default' => htmlspecialchars ($_strings['e2--default-blog-title'], ENT_COMPAT, HSC_ENC), 'blog-title' => htmlspecialchars (e2_blog_title (), ENT_COMPAT, HSC_ENC), 'blog-description' => htmlspecialchars (@$settings['description'], ENT_COMPAT, HSC_ENC), 'blog-author-default' => htmlspecialchars ($_strings['e2--default-blog-author'], ENT_COMPAT, HSC_ENC), 'blog-author' => htmlspecialchars (@$settings['author'], ENT_COMPAT, HSC_ENC), 'languages' => $languages, 'language' => $current_language, 'form-action' => e2_compose_url ('e2s_settings_save'), 'notes-per-page' => $settings['appearance']['notes_per_page'], 'email-notify?' => (bool) @$settings['notifications']['new_comments'], 'email' => htmlspecialchars (@$settings['user']['email'], ENT_NOQUOTES, HSC_ENC), 'comments-default-on?' => (bool) @$settings['comments']['default_on'], 'comments-require-gip?' => (bool) @$settings['comments']['require_gip'], 'comments-fresh-only?' => (bool) @$settings['comments']['fresh_only'], 'show-sharing-buttons?' => (bool) $settings['appearance']['show_sharing_buttons'], 'includes-google-analytics?' => false, 'includes-yandex-metrika?' => false, 'template-name' => $_template['name'], 'templates' => e2o_templates_list (), 'submit-text' => $_strings['fb--save-changes'], 'space-usage' => e2_space_usage_string (e2_space_usage (), true), ); return $ret; } function e2s_settings_save () { global $settings, $_strings; if ($_SERVER['REQUEST_METHOD'] != 'POST') return e2_go_to (e2_compose_url ('e2m_settings')); $blog_title = $description = ''; if (array_key_exists ('blog-title', $_POST)) { $blog_title = trim ($_POST['blog-title']); } if (array_key_exists ('blog-description', $_POST)) { $description = trim ($_POST['blog-description']); } if (array_key_exists ('blog-author', $_POST)) { $author = trim ($_POST['blog-author']); } if (array_key_exists ('language', $_POST)) $language = $_POST['language']; if (array_key_exists ('email', $_POST)) $email = trim ($_POST['email']); $notes_per_page = (int) $_POST['notes-per-page']; $settings['site_title'] = $blog_title; $settings['site_title'] = e2_blog_title (); $settings['description'] = $description; $settings['author'] = $author; $settings['user']['email'] = $email; $settings['notifications']['new_comments'] = isset ($_POST['email-notify']); if (array_key_exists ('template', $_POST)) { $settings['template'] = trim ($_POST['template']); } $settings['comments']['default_on'] = isset ($_POST['comments-default-on']); $settings['comments']['require_gip'] = isset ($_POST['comments-require-gip']); if ( $settings['language'] != $language or $settings['appearance']['notes_per_page'] != $notes_per_page or $settings['appearance']['show_sharing_buttons'] != isset ($_POST['show-sharing-buttons']) or $settings['comments']['fresh_only'] != isset ($_POST['comments-fresh-only']) ) { @unlink (CACHE_FILENAME_FRONTPAGE); @unlink (CACHE_FILENAME_FRONTPAGE_AUTHOR); $settings['language'] = $language; $settings['appearance']['notes_per_page'] = $notes_per_page; $settings['appearance']['show_sharing_buttons'] = isset ($_POST['show-sharing-buttons']); $settings['comments']['fresh_only'] = isset ($_POST['comments-fresh-only']); } e2_unlink_glob (CACHE_FILENAMES_NOTES_COMMENTS); if (!@write_file (USER_FOLDER . 'settings.json', json_encode ($settings, E2_JSON_STYLE))) { e2_error ($_strings['er--settings-not-saved'], E2E_PERMISSIONS_ERROR); e2_go_to (e2_compose_url ('e2m_settings')); die; } e2_go_to (e2_compose_url ('e2m_frontpage', array ('page' => 1))); die; } function e2m_database () { global $settings, $_strings, $_superconfig; if (@$_superconfig['disallow_db_config']) { return e2_error404_mode (); } $ret['title'] = $_strings['pt--database']; $ret['heading'] = $_strings['pt--database']; $ret['form'] = 'form-database'; $ret['form-database'] = array ( 'form-action' => e2_compose_url ('e2s_database_save'), 'db-server' => htmlspecialchars (@$settings['db']['server']? $settings['db']['server'] : 'localhost'), 'db-user' => htmlspecialchars (@$settings['db']['user_name']? $settings['db']['user_name'] : 'root'), 'db-password' => htmlspecialchars (e2_decrypt (@$settings['db']['passw'])), 'db-database' => htmlspecialchars (@$settings['db']['name']), 'submit-text' => $_strings['fb--connect-to-this-db'], ); return $ret; } function e2s_database_save () { global $settings, $_db, $_superconfig, $_strings, $_config; if ($_SERVER['REQUEST_METHOD'] != 'POST') return e2_go_to (e2_compose_url ('e2m_database')); if (@$_superconfig['disallow_db_config']) { return e2_error404_mode (); } $check = e2_check_database_from_http_post (); if ($check == 'bingo-data-exists') { $settings['db']['server'] = @$_POST['db-server']; $settings['db']['user_name'] = @$_POST['db-user']; $settings['db']['passw'] = e2_encrypt (@$_POST['db-password']); $settings['db']['name'] = @$_POST['db-database']; if (!@write_file (USER_FOLDER . 'settings.json', json_encode ($settings, E2_JSON_STYLE))) { e2_error ($_strings['er--settings-not-saved'], E2E_PERMISSIONS_ERROR); e2_go_to (e2_compose_url ('e2m_database')); die; } e2_drop_all_kinds_of_cache (); e2_migrate_db (); if (!$_config['retain_search_indexes_on_db_switch']) { $storage = e2_rose_storage (); try { $storage -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e) { if (__LOG) __log ('Rose not available'); } e2_bsi_start_indexing (); } e2_spawn (e2_compose_url ('e2s_bsi_step')); e2_go_to (e2_compose_url ('e2m_settings')); } else { e2_error ($_strings['er--double-check-db-params']); e2_go_to (e2_compose_url ('e2m_database')); } die; } function e2_can_get_backup () { return class_exists ('ZipArchive'); } function e2m_get_backup () { if (e2_can_get_backup ()) { $z = new ZipArchive (); $backupfilename = BACKUP_FOLDER .'backup.zip'; if ($z -> open ($backupfilename, ZIPARCHIVE::CREATE)) { @ $z -> addFile (USER_FOLDER . 'userpic@2x.jpg', 'userpic@2x.jpg'); @ $z -> addFile (USER_FOLDER . 'userpic@2x.png', 'userpic@2x.png'); foreach (glob (BACKUP_FOLDER .'backup-*.sql') as $file); $z -> addFile ($file, basename ($file)); $z -> close(); } header ('Content-Type: application/zip'); header ('Content-Disposition: attachment; filename="backup.zip"'); readfile ($backupfilename); unlink ($backupfilename); die; } else { die ('Cannot get backup'); } } e2_load_settings (); function e2_error ($description, $type = E2E_STRANGE_ERROR) { global $errors, $settings, $_config, $_strings, $_diagnose; $show_call_stack = (!e2_secure ()+1 <= (int) $_config['show_call_stack']); if ($description) { if ($description[0] != '<') $description = '<p>' . $description .'</p>'; $thiseerror = array ( 'description' => $description, 'type' => $type, ); if ( $type == E2E_STRANGE_ERROR and $show_call_stack and function_exists ('debug_backtrace') ) { $thiseerror['backtrace'] = debug_backtrace (); } $errors[] = $thiseerror; } if ($type == E2E_PERMISSIONS_ERROR) { $_diagnose['need?'] = true; e2_set_cookie ('diagnose', '1'); } if ($type == E2E_DATABASE_ERROR) { } return true; } function e2_diagnose () { global $errors, $secure, $_strings, $_diagnose; $pf = e2_paths_with_write_problems (); if (count ($pf) == 0) { e2_set_cookie ('diagnose', ''); unset ($_COOKIE['diagnose']); $_diagnose['need?'] = false; $_diagnose['ok?'] = true; return true; } else { $msg = ''; $msg .= '<p>'. $_strings['gs--enable-write-permissions-for-the-following'] .'</p>'; $msg .= '<ul>'; foreach ($pf as $f) { if ($f == '.') $f = ''; $msg .= '<li><tt>.../'. $f .'</tt></li>'; if (__LOG) __log ('Diagnostics: cannot write <'. $f .'>'); } $msg .= '</ul>'; $thiseerror = array ( 'title' => $_strings['et--fix-permissions-on-server'], 'description' => $msg, 'type' => E2E_DIAGNOSTICS_MESSAGE, 'class' => 'serious', ); $errors[] = $thiseerror; $_diagnose['ok?'] = false; return false; } } function e2_error_handler ($code, $description, $errfile, $errline, $errcontext) { global $errors; if (0 == error_reporting () or ($code & 8)) return; $errfile = str_replace (__DIR__, '', $errfile); e2_error ($errfile .', line '. $errline .'<br />Error '. $code .': '. $description); $errors[count ($errors)-1]['phpcode'] = $code; } function e2_show_errors () { global $errors, $settings, $_config; @session_start (); if (is_array (@$_SESSION['errors'])) { $e = array_merge (@$_SESSION['errors'], $errors); } else { $e = $errors; } $show_call_stack = (!e2_secure ()+1 <= (int) $_config['show_call_stack']); if (@$_config['store_backtrace'] and $show_call_stack and $e != NULL) { @write_file ('backtrace.psa', serialize ($e)); } else { @unlink ('backtrace.psa'); } if (isset ($_SESSION['errors'])) unset ($_SESSION['errors']); $ret = array (); $some_errors_need_debug = false; if (count ($e) > 0) { foreach ($e as $i => $ee) { if ($ee['type'] == E2E_STRANGE_ERROR) { $ee['class'] = 'serious'; $some_errors_need_debug = true; if ($show_call_stack) { $ee['backtrace'] = e2_display_backtrace ($ee['backtrace']); } } if ($ee['type'] == E2E_MESSAGE) { $ee['class'] = 'info'; } $e[$i] = $ee; } $ret['each'] = $e; if ( $some_errors_need_debug and @$_config['store_backtrace'] and $show_call_stack and is_file ('debug.php') ) { $ret['debug-link'] = 'debug.php'; } } return $ret; } function e2_die_errors () { $errors = e2_show_errors (); foreach ($errors['each'] as $error) { echo '<p>'. $error['description'] .'</p>'; } die; } function e2_display_backtrace ($bt) { global $folder_on_server; if (!is_array ($bt)) return 'No backtrace info'; $bt = array_reverse ($bt); $bt = array_splice ($bt, 0, count ($bt) - 1); $e = '<p style="background: #fea; padding: .25em .5em; line-height: 1em; overflow: hidden">'; foreach ($bt as $i => $t) { $raw_args = @$t['args'] or $raw_args = array (); $args = array (); foreach ($raw_args as $raw_arg) { $args[] = var_export ($raw_arg, true); } $file = @$t['file']; $file = str_replace ($_SERVER['DOCUMENT_ROOT'], '', $file); $line = (@$t['line']? (' #'. $t['line']) : '?'); $e .= '<div style="margin: .25em 0 .5em '. $i*3 .'em">'; $e .= '<span style="float: right; color: #666"> '. $file . $line .'</span>'; $e .= '<tt><b>'. @$t['function'] .' (</b>'; if (count ($args)) { $display_args = str_replace ("array (\n)", 'array ()', $args); $display_args = implode (', ', $display_args); if (0) { $display_args = highlight_string ('<?'. $display_args .'?'.'>', true); $display_args = substr ($display_args, 77, -28); } $display_args = str_replace ('&nbsp;', ' ', $display_args); $display_args = nl2br ($display_args); $e .= '<div style="margin: 0 0 0 1.12em">'. $display_args .'</div>'; } $e .= '<b>)</b> &rarr;</tt></div>'; } $e .= '</p>'; return $e; } set_error_handler ('e2_error_handler'); function e2_error404_mode () { global $_config, $_strings; if ($_config['try_redirect_to_all']) { $try_url = 'all/'. urldecode ($_GET['go']); e2_resolve_url ($try_url); } header ('HTTP/1.1 404 Not found'); $return['class'] = '404'; $return['heading'] = $_strings['pt--page-not-found']; $return['title'] = $_strings['pt--page-not-found']; return $return; } include_once 'neasden/neasden.php'; function e2_kavychki ($text) { $Nn = new Neasden; $Nn->profile_name = 'kavychki'; return $Nn->format ($text); } function e2_detect_resources_in_text ($formatter, $text, $context) { if ($text === '') return array (); if ($formatter == 'calliope') { preg_match_all ('/\(\(([^ ]*)( |\)\))/', $text, $matches); return $matches[1]; } elseif ($formatter == 'neasden') { $Nn = new Neasden; $Nn->profile_name = $context; $Nn->format ($text); return $Nn->resources_detected; } else { return array (); } } function e2_format_with_formatter ($formatter, $text, $context) { if (__LOG) __log ('Format: format with formatter "'. $formatter .'" in context "'. $context.'"'); if ($formatter == 'calliope') { $text = e2_windows_1251_from_utf ($text); $text = e2__wiki ($text, $context); $meta = array (); $text = e2_utf_from_windows_1251 ($text); $text = '<div class="e2-text-calliope-formatted">'. e2_kavychki ($text) .'</div>'; } elseif ($formatter == 'neasden') { $Nn = new Neasden; $Nn->profile_name = $context; $text = $Nn->format ($text); $meta = array ( 'links-required' => $Nn->links_required, 'resources-detected' => $Nn->resources_detected ); } return array ( 'text-final' => $text, 'meta' => $meta, ); } function e2_format_with_default_formatter ($text, $context) { global $_config; return e2_format_with_formatter ($_config['default_formatter'], $text, $context); } function e2__wiki ($text, $context) { global $_config, $settings, $full_blog_url, $_template; @ (list ($context, $href) = explode ('|', $context)); require_once 'calliope/WikiFormatter.php'; if ('full' == $context) $calliope_mode = WF_FULL_MODE; elseif ('full-rss' == $context) $calliope_mode = WF_FULL_MODE; elseif ('simple' == $context) $calliope_mode = WF_SIMPLE_MODE; elseif ('simple-rss' == $context) $calliope_mode = WF_SIMPLE_MODE; else return $text; $wkf = new WikiFormatter (); $wkf -> replace = array ( '/' => 'i', '+' => 'small', '-' => 's', '*' => 'b', '^' => 'sup', 'v' => 'sub', '#' => 'tt', '!' => 'blockquote', ); $wkf -> settings = array ( 'hrefSize' => 100, 'localImgDir' => $full_blog_url .'/'. PICTURES_FOLDER, 'maxImgWidth' => $_template['max_image_width'], 'mode' => $calliope_mode, 'enableShrinkLongHref' => 1, 'enableHr' => 0, 'enableBr' => 1, 'enableHeaders' => 1, 'headersStartWith' => 1, 'enableTables' => 1, 'simpleTableCSSClass' => 'e2-text-table', 'enableAutoAcronymEngine' => 0, 'enableAcronym' => 0, 'acronymBase' => '', 'enableList' => 1, 'mailSafe' => "<a href=\"\" onmouseover=\"this.href='mailto:'+{email}\">{icon}<script language=\"JavaScript\">document.write({name});</script></a>", 'ljUserTag' => '<a href="http://livejournal.com/users/{name}/">{name}</a>', 'fullVersionURL' => $href, 'enableTagIcons' => 0, 'outerUrlInNewWindow' => 0, 'lineBreak' => "\n", 'extLinkHrefPrefix' => '', ); $text = $wkf -> Wiki2HTML ($text); return $text; } function e2_spawn ($url) { if (__LOG) __log ('Spawn: Curl '. $url .'...'); if (function_exists ('curl_init')) { $curl = curl_init (); $followlocation_on = !ini_get ('open_basedir'); curl_setopt_array ($curl, array ( CURLOPT_URL => $url, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => e2_key_cookie (), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $followlocation_on, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content = curl_exec ($curl); $errno = curl_errno ($curl); $errstr = curl_error ($curl); $header = curl_getinfo ($curl); curl_close ($curl); if (__LOG) __log ('Spawn: Curl returns: ['. print_r ($header, true) .'] ['. $content .'], (errno='. $errno .', errstr='. $errstr .')...'); } else { if (__LOG) __log ('Spawn: Curl functions are not available'); } } function e2_broadcast_noterec_async ($note_record) { global $_config; if (@$_config['broadcast_url'] and !$note_record['IsExternal']) { if (__LOG) __log ('Broadcast-async note: '. $note_record['Title']); $url = e2_compose_url ('e2m_note_broadcast', array ('*note' => $note_record)); if (__LOG) __log ('Broadcast will spawn url: '. $url); e2_spawn ($url); } } function e2_broadcast_note_json_url ($note_json_url) { global $_config; if (!$note_json_url) return false; $url = $_config['broadcast_url']; $url .= '?src='. urlencode ($note_json_url); if (__LOG) __log ('Broadcast: Curl '. $url .'...'); if (function_exists ('curl_init')) { $curl = curl_init (); $followlocation_on = !ini_get ('open_basedir'); curl_setopt_array ($curl, array ( CURLOPT_URL => $url, CURLOPT_CONNECTTIMEOUT => 300, CURLOPT_TIMEOUT => 1, CURLOPT_MAXREDIRS => 1, CURLOPT_COOKIE => e2_key_cookie (), CURLOPT_SSL_VERIFYPEER => false, CURLOPT_FOLLOWLOCATION => $followlocation_on, CURLOPT_RETURNTRANSFER => true, CURLOPT_AUTOREFERER => true, CURLOPT_USERAGENT => E2_UA_STRING, )); $content = curl_exec ($curl); $errno = curl_errno ($curl); $errstr = curl_error ($curl); $header = curl_getinfo ($curl); curl_close ($curl); if (__LOG) __log ('Broadcast: Curl returns: ['. print_r ($header, true) .'] ['. $content .'], (errno='. $errno .', errstr='. $errstr .')...'); if ($errno === 0) return true; } else { if (__LOG) __log ('Spawn: Curl functions are not available'); } return false; } function e2_broadcast_noterec ($note_record) { if (!$note_record) return false; $note_json_url = e2_compose_url ('e2m_note_json', array ('*note' => $note_record)); return e2_broadcast_note_json_url ($note_json_url); } function e2m_note_broadcast ($parameters = array ()) { global $_config; if (@$_config['broadcast_url']) { if (array_key_exists ('*note', $parameters)) { $note_json_url = e2_compose_url ('e2m_note_json', array ('*note' => $parameters['*note'])); } elseif (array_key_exists ('alias', $parameters)) { $note_json_url = e2_compose_url ('e2m_note_json', array ('alias' => $parameters['alias'])); } if (e2_broadcast_note_json_url ($note_json_url)) { die ('Broadcasted.'); } } else { return e2_error404_mode (); } } function e2m_timezone () { global $_strings, $settings; $form_timezone = array ( 'form-action' => e2_compose_url ('e2s_select_timezone'), 'submit-text' => $_strings['fb--select'], 'timezone-selector' => e2_timezone_selector ($settings['timezone']['offset'], 1), 'dst?' => $settings['timezone']['is_dst'], ); return array ( 'title' => $_strings['pt--default-timezone'], 'heading' => $_strings['pt--default-timezone'], 'form' => 'form-timezone', 'form-timezone' => $form_timezone, ); } function e2_timezones () { global $_strings; $timezones = array ( -720 => '', -660 => '', -600 => '', -540 => '', -480 => $_strings['tt--zone-pt'], -420 => $_strings['tt--zone-mt'], -360 => $_strings['tt--zone-ct'], -300 => $_strings['tt--zone-et'], -240 => '', -210 => '', -180 => '', -120 => '', -60 => '', 0 => $_strings['tt--zone-gmt'], 60 => $_strings['tt--zone-cet'], 120 => $_strings['tt--zone-eet'], 180 => '', 210 => '', 240 => $_strings['tt--zone-msk'], 270 => '', 300 => '', 330 => '', 345 => '', 360 => $_strings['tt--zone-ekt'], 390 => '', 420 => '', 480 => '', 540 => '', 570 => '', 600 => '', 660 => '', 720 => '', 780 => '', 840 => '', ); return $timezones; } function e2_timezone_name_by_offset ($offset) { $timezones = e2_timezones (); return @$timezones[(int) $offset/SECONDS_IN_A_MINUTE]; } function e2_format_timezone_offset ($offset) { $sign = '+'; if ($offset < 0) $sign = '&ndash;'; $hours = str_pad ((int) (abs ($offset) / 3600), 2, '0', STR_PAD_LEFT); $minutes = str_pad (abs ($offset) / 60 % 60, 2, '0', STR_PAD_LEFT); return 'GMT'. $sign . $hours .':'. $minutes; } function e2_timezone_selector ($selected_offset, $selector_size = '') { global $_strings; $timezones = e2_timezones (); $ret = ''; if (!$selector_size) $selector_size = count ($timezones); $ret .= '<select name="offset" size="'. $selector_size .'">'; foreach ($timezones as $offset => $timezone_name) { $selectedness = ''; if ($offset * SECONDS_IN_A_MINUTE == $selected_offset) $selectedness = ' selected="selected"'; $ret .= '<option'. $selectedness .' value="'.$offset.'">'; $sign = ''; if ($offset < 0) $sign = '−'; if ($offset > 0) $sign = '+'; $hours = (int) (abs ($offset * SECONDS_IN_A_MINUTE) / 3600); $minutes = (int) (abs ($offset * SECONDS_IN_A_MINUTE) / 60 % 60); if ($hours) { $ret .= ( $sign .' '. $hours .' '. $_strings['gs--timezone-offset-hours'] .' '. ($minutes? ($minutes .' '. $_strings['gs--timezone-offset-minutes']) : '') ); if ($timezone_name) { $ret .= ' ('. $timezone_name. ')'; } } else { $ret .= $timezone_name; } $ret .= '</option>'; } $ret .= '</select>'; return $ret; } function e2s_select_timezone () { global $settings, $_strings; if (@$_POST['offset'] >= -720 and @$_POST['offset'] <= 780) { $settings['timezone']['offset'] = @$_POST['offset'] * SECONDS_IN_A_MINUTE; $settings['timezone']['is_dst'] = isset ($_POST['is_dst']); } if (!@write_file (USER_FOLDER . 'settings.json', json_encode ($settings, E2_JSON_STYLE))) { e2_error ($_strings['er--settings-not-saved'], E2E_PERMISSIONS_ERROR); e2_go_to (e2_compose_url ('e2m_timezone')); die; } e2_go_to (e2_compose_url ('e2m_settings')) and die (); } function e2_note_timezone ($note) { return array ( 'offset' => (int) $note['Offset'], 'is_dst' => (bool) $note['IsDST'], ); } function e2_no_timezone () { return array ( 'offset' => 0, 'is_dst' => false, ); } function e2_current_timezone () { global $settings; return $settings['timezone']; } function e2_is_dst_in_timezone ($timezone, $when) { if (@$timezone['is_dst']) { $dst_on_server = (int) date ('I', $when); $gmt_offset_of_server = date ('Z', $when) - $dst_on_server * SECONDS_IN_AN_HOUR; $gmt_offset_of_timezone = $timezone['offset']; $timezone_offset_from_server = $gmt_offset_of_timezone - $gmt_offset_of_server; $dst_would_be_on_server_then = date ('I', $when + $timezone_offset_from_server); return $dst_would_be_on_server_then; } else { return 0; } } function e2_timezone_gmt_offset_of_timezone ($timezone, $when) { global $settings; if ($timezone and is_array ($timezone)) { return ( $timezone['offset'] + e2_is_dst_in_timezone ($timezone, $when) * SECONDS_IN_AN_HOUR ); } } function e2_timezone_gmt_offset_of_current_timezone ($when) { return e2_timezone_gmt_offset_of_timezone (e2_current_timezone (), $when); } function e2_format_dt_of_timezone ($format, $what, $timezone) { return gmdate ($format, $what + e2_timezone_gmt_offset_of_timezone ($timezone, $what)); } function e2_format_dt_of_current_timezone ($format, $what) { return e2_format_dt_of_timezone ($format, $what, e2_current_timezone ()); } function e2_boundaries_in_gmt ($y, $m = false, $d = false) { if (is_numeric ($d)) { $start = gmmktime (0, 0, 0, $m, $d, $y); $end = gmmktime (0, 0, 0, $m, $d + 1, $y) - 1; } elseif (is_numeric ($m)) { $start = gmmktime (0, 0, 0, $m, 1, $y); $end = gmmktime (0, 0, 0, $m + 1, 1, $y) - 1; } else { $start = gmmktime (0, 0, 0, 1, 1, $y); $end = gmmktime (0, 0, 0, 1, 1, $y + 1) - 1; } return array ($start, $end); } function e2_boundaries_in_timezone ($timezone, $y, $m = false, $d = false) { list ($start, $end) = e2_boundaries_in_gmt ($y, $m, $d); $start -= e2_timezone_gmt_offset_of_timezone ($timezone, $start); $end -= e2_timezone_gmt_offset_of_timezone ($timezone, $end); return array ($start, $end); } function e2_boundaries_in_current_timezone ($y, $m = false, $d = false) { return e2_boundaries_in_timezone (e2_current_timezone (), $y, $m, $d); } function e2_boundaries_worldwide ($y, $m = false, $d = false) { $east = 13; $west = -12; $east += 1; $west -= 1; list ($start, $end) = e2_boundaries_in_gmt ($y, $m, $d); $start -= $east * 3600; $end -= $west * 3600; return array ($start, $end); } function e2_plusminus_gmt_offset ($offset) { if ((int) @$offset > 0) return (string) '+'.abs (@$offset); elseif ((int) @$offset < 0) return (string) '-'.abs (@$offset); else return ''; } function e2_timezone_gmt_offset_of_current_timezone_rfc2822 ($when, $separator = '') { $shift = e2_timezone_gmt_offset_of_current_timezone ($when); $sign = ($shift >= 0)?'+':'-'; $shift = abs ($shift); $s = $shift % 60; $shift -= $s; $m = $shift % 3600 / 60; $shift -= $m * 60; $h = $shift / 3600; if ($h < 10) $h = '0'.$h; if ($m < 10) $m = '0'.$m; return $sign.$h.$separator.$m; } function e2_timezone_from_posted_offset ($gmt_offset_posted) { global $settings; if (is_numeric ($gmt_offset_posted)) { $result['offset'] = SECONDS_IN_A_MINUTE * $gmt_offset_posted; $result['is_dst'] = false; $test_off = SECONDS_IN_A_MINUTE * $gmt_offset_posted - SECONDS_IN_AN_HOUR; $test_tz = array ('offset' => $test_off, 'is_dst' => true); $test_tz = (int) e2_timezone_gmt_offset_of_timezone ($test_tz, time ()); if ($result['offset'] == $test_tz) { $result['offset'] = $test_off; $result['is_dst'] = true; } } else { if (array_key_exists ('timezone', $settings)) { $result = $settings['timezone']; } else { $result['offset'] = 0; $result['is_dst'] = false; } } return $result; } function e2_daytime ($stamp) { $h = e2_format_dt_of_current_timezone ('H', $stamp); if ($h <= 4) return 4; elseif ($h <= 10) return 1; elseif ($h <= 16) return 2; elseif ($h <= 22) return 3; else return 4; } function e2_ago ($then, $then_timezone = null) { global $_strings; if ($then_timezone === null) $then_timezone = e2_current_timezone (); $now_date = e2_format_dt_of_timezone ('d.m.Y', $now, $then_timezone); $then_date = e2_format_dt_of_timezone ('d.m.Y', $then, $then_timezone); $sm = SECONDS_IN_A_MINUTE; $sh = SECONDS_IN_AN_HOUR; $now = time (); $now_daytime = e2_daytime ($now); $then_daytime = e2_daytime ($then); $sec = $now - $then; if ($sec < 0) return $_strings['tt--from-the-future']; if ($sec >= 0 and $sec < 54) return $_strings['tt--just-now']; if ($sec >= 54 and $sec < 108) return $_strings['tt--one-minute-ago']; $sec2 = $sec + 12; $min2 = floor ($sec2 / $sm); if ($sec >= 108 and $sec < 54*$sm) return e2l_get_string ( 'tt--minutes-ago', array ('minutes' => $min2) ); if ($sec >= 54*$sm and $sec < 108*$sm) return $_strings['tt--one-hour-ago']; $sec2 = $sec + 12*$sm; $heu2 = floor ($sec2 / $sh); if ($sec >= 108*$sm and $sec < 4*$sh) return e2l_get_string ( 'tt--hours-ago', array ('hours' => $heu2) ); $time = e2_format_dt_of_timezone ('G:i', $then, $then_timezone); if ($sec >= 4*$sh and $now_daytime > $then_daytime and $now_date == $then_date) { return $_strings['tt--today']; } if ((($now - $then) <= YEAR_DISPLAY_THRESH)) { return e2l_get_string ( 'tt--date', array ( 'day' => e2_format_dt_of_timezone ('j', $then, $then_timezone), 'month' => e2_format_dt_of_timezone ('m', $then, $then_timezone), ) ); } return e2_format_dt_of_timezone ('Y', $then, $then_timezone); } $_model_contractions = array ( 'key' => "INT UNSIGNED AUTO_INCREMENT PRIMARY KEY", 'pkey' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'int' => "INT DEFAULT '0' NOT NULL", 'uint' => "INT UNSIGNED DEFAULT '0' NOT NULL", 'time' => "INT UNSIGNED DEFAULT '0' NOT NULL", '0' => "TINYINT(1) DEFAULT '0' NOT NULL", '1' => "TINYINT(1) DEFAULT '1' NOT NULL", 'v1' => "VARCHAR(1) DEFAULT '' NOT NULL", 'v8' => "VARCHAR(8) DEFAULT '' NOT NULL", 'v15' => "VARCHAR(15) DEFAULT '' NOT NULL", 'v32' => "VARCHAR(32) DEFAULT '' NOT NULL", 'v64' => "VARCHAR(64) DEFAULT '' NOT NULL", 'fid' => "VARCHAR(32) DEFAULT '". $_config['default_formatter'] ."' NOT NULL", 'v255' => "VARCHAR(255) DEFAULT '' NOT NULL", 'text' => "MEDIUMTEXT", ); $_model = array ( 'Actions' => array ( array ('ID', 'key'), array ('EntityID', 'pkey'), array ('Stamp', 'time'), array ('HitCount', 'int'), array ('ReadCount', 'int'), ), 'Aliases' => array ( array ('ID', 'key'), array ('EntityType', 'v1'), array ('EntityID', 'pkey'), array ('Alias', 'v64'), array ('Stamp', 'time'), ), 'Comments' => array ( array ('ID', 'key'), array ('NoteID', 'pkey'), array ('AuthorName', 'v255'), array ('AuthorEmail', 'v255'), array ('Text', 'text'), array ('Reply', 'text'), array ('IsVisible', '1'), array ('IsFavourite', '0'), array ('IsReplyVisible', '0'), array ('IsReplyFavourite', '0'), array ('IsAnswerAware', '1'), array ('IsSubscriber', '0'), array ('IsSpamSuspect', '0'), array ('IsNew', '0'), array ('Stamp', 'time'), array ('LastModified', 'time'), array ('ReplyStamp', 'time'), array ('ReplyLastModified', 'time'), array ('IP', 'v15'), array ('IsGIPUsed', '0'), array ('GIP', 'v15'), array ('GIPAuthorID', 'v64'), ), 'Keywords' => array ( array ('ID', 'key'), array ('Keyword', 'v255'), array ('OriginalAlias', 'v64'), array ('Description', 'text'), array ('Uploads', 'text'), array ('IsFavourite', '0'), ), 'Notes' => array ( array ('ID', 'key'), array ('Title', 'v255'), array ('Text', 'text'), array ('FormatterID', 'fid'), array ('OriginalAlias', 'v64'), array ('Uploads', 'text'), array ('IsPublished', '0'), array ('IsCommentable', '0'), array ('IsVisible', '1'), array ('IsFavourite', '0'), array ('Stamp', 'time'), array ('LastModified', 'time'), array ('Offset', 'int'), array ('IsDST', '0'), array ('IsIndexed', '0'), array ('IsExternal', '0'), array ('SourceID', 'pkey'), array ('SourceNoteID', 'pkey'), array ('SourceNoteURL', 'v255'), array ('SourceNoteJSONURL', 'v255'), array ('SourceNoteData', 'text'), ), 'NotesKeywords' => array ( array ('ID', 'key'), array ('NoteID', 'pkey'), array ('KeywordID', 'pkey'), ), 'GIPsSessions' => array ( array ('ID', 'key'), array ('GIP', 'v15'), array ('GIPAuthorID', 'v64'), array ('AuthorName', 'v255'), array ('SessionToken', 'v255'), array ('Stamp', 'time'), ), 'Sources' => array ( array ('ID', 'key'), array ('TrueID', 'pkey'), array ('Title', 'v255'), array ('AuthorName', 'v255'), array ('URL', 'v255'), array ('PictureURL', 'v255'), array ('IsWhiteListed', '0'), array ('IsTrusted', '0'), ), ); $_model_indexes = array ( 'Actions' => array ( "UNIQUE INDEX (`EntityID`, `Stamp`)", ), 'Aliases' => array ( "INDEX (`Alias`)", "INDEX (`EntityID`)", ), 'Comments' => array ( "INDEX (`NoteID`)", ), 'Keywords' => array (), 'GIPsSessions' => array ( "UNIQUE INDEX (`GIP`, `GIPAuthorID`)" ), 'Notes' => array ( "FULLTEXT (`Title`, `Text`)", "INDEX (`Stamp`)", "INDEX (`SourceID`)", "INDEX (`SourceNoteID`)", ), 'NotesKeywords' => array ( "INDEX (`NoteID`)", ), ); $_model_minimal_table_list = array ( 'Comments', 'Keywords', 'Notes', 'NotesKeywords', ); function e2_model_data_check ($link, $database) { global $_model, $_model_minimal_table_list, $_config; $occupied = false; $found_tables = array (); $sql = 'SHOW TABLES FROM `'. mysqli_real_escape_string ($link, $database). '`'; $result = mysqli_query ($link, $sql); if ($result) { while ($row = mysqli_fetch_row ($result)) { foreach (array_keys ($_model) as $e2_table) { if (strcasecmp ($row[0], $_config['db_table_prefix'] . $e2_table) === 0) { $occupied = true; $found_tables[] = $e2_table; } } } } $complete = true; foreach (array_keys ($_model) as $e2_table) { if (!in_array ($e2_table, $found_tables)) { $complete = false; } } $migrateable = true; foreach ($_model_minimal_table_list as $e2_table) { if (!in_array ($e2_table, $found_tables)) { $migrateable = false; } } return array ( 'occupied' => $occupied, 'complete' => $complete, 'migrateable' => $migrateable, ); } function e2_usable_databases ($server, $user, $password) { $databases_array = array (); if (($link = mysqli_connect ($server, $user, $password)) !== false) { $result = mysqli_query ($link, "SHOW DATABASES"); while ($row = mysqli_fetch_row ($result)) { if ( mysqli_select_db ($link, $row[0]) and !in_array ($row[0], array ('information_schema', 'mysql')) ) { $databases_array[] = $row[0]; } } } return $databases_array; } function e2_check_database_from_http_post () { global $_model, $_config; $server = $user = $password = $database = ''; if (array_key_exists ('db-server', $_POST)) $server = $_POST['db-server']; if (array_key_exists ('db-user', $_POST)) $user = $_POST['db-user']; if (array_key_exists ('db-password', $_POST)) $password = $_POST['db-password']; if (array_key_exists ('db-database', $_POST)) $database = $_POST['db-database']; if (($link = mysqli_connect ($server, $user, $password)) === false) { if (mysqli_connect_errno () == 1045) { return 'server-responding'; } else { return 'no-connect'; } } else { if (!$database) { $databases_array = e2_usable_databases ($server, $user, $password); $database = $databases_array[0]; } if (mysqli_select_db ($link, $database) === false) { return 'server-lets-in'; } else { $db_check = e2_model_data_check ($link, $database); if ($db_check['occupied'] and $db_check['migrateable']) { return 'bingo-data-exists'; } elseif ($db_check['occupied']) { return 'data-incomplete'; } else { return 'bingo'; } } } } function e2_table_exists ($table) { global $_config; $q = ( "SHOW TABLES LIKE '". $_config['db_table_prefix'] . $table . "'" ); e2_mysql_query ($q); $res = e2_mysql_result_as_array (); return count ($res) > 0; } function e2_table_status ($table, $prefix = null) { global $_config; if ($prefix === null) { $prefix = $_config['db_table_prefix']; } $q = ( "SHOW TABLE STATUS LIKE '". $prefix . $table . "'" ); e2_mysql_query ($q); $result = e2_mysql_result_as_array (); return $result ? $result[0] : []; } function e2_create_table ($table) { global $_model, $_model_contractions, $_model_indexes, $_config, $_db; if (e2_table_exists ($table)) { return true; } $prefix = $_config['db_table_prefix']; if (array_key_exists ($table, $_model)) { $columns = array (); foreach ($_model[$table] as $column) { list ($name, $type) = $column; $columns[] = "`". $name ."` ". $_model_contractions[$type]; } $query = ( "CREATE TABLE `". $prefix . $table ."` ". "(". implode (" ,", $columns) .") ". "ENGINE=MyISAM DEFAULT CHARSET=". $_db['charset'] ); $success = e2_mysql_query ($query); if (is_array (@$_model_indexes[$table])) { foreach ($_model_indexes[$table] as $index) { $query = ( "ALTER TABLE `". $prefix . $table ."` ". "ADD ". $index ); e2_mysql_query ($query); } } if ($success) return true; } } function e2_insert_record ($table, $record, $verb = 'INSERT', $also = '') { global $_config, $_db; foreach ($record as $k => $v) { $newvalue = e2_mysql_real_escape_string ($v); if ($newvalue[0] == '`') { $newvalue_quoted = $newvalue; } else { $newvalue_quoted = "'". $newvalue ."'"; } $quoted_record[$k] = $newvalue_quoted; } $fields = "`". implode ("`, `", array_keys ($quoted_record)). "`"; $values = implode (", ", array_values ($quoted_record)); $query = ( $verb ." INTO `". $_config['db_table_prefix'] . $table ."` ". "(" . $fields .") VALUES (". $values .")". ($also? (' '. $also) : '') ); if (e2_mysql_query ($query)) { $record['ID'] = mysqli_insert_id ($_db['link']); return $record; } } function e2_update_record ($table, $record, $records_where = false, $low_priority = false) { global $_config; if (__LOG) __log ('Model: update record, table <'. $table .'>'); $elements = array (); foreach (e2model__soft_fields_for_table_($table) as $field) { if (array_key_exists ($field, $record)) { $newvalue = e2_mysql_real_escape_string ($record[$field]); if ($newvalue[0] == '`') { $newvalue_quoted = $newvalue; } else { $newvalue_quoted = "'". $newvalue ."'"; } $elements[] = '`'. $field .'`'."=". $newvalue_quoted .""; } } $conditions = array (); if (is_array ($records_where)) { foreach (e2model__soft_fields_for_table_($table) as $field) { if (array_key_exists ($field, $records_where)) { $conditions[] = '`'. $field .'`'."='". e2_mysql_real_escape_string ($records_where[$field]) ."'"; } } } if (count ($conditions)) { $where = implode (" AND ", $conditions); } else { if (!array_key_exists ('ID', $record) or !is_numeric ($record['ID'])) { die ('API MISUSE: e2_update_record must be called with an ID field in $record when updating single row'); } $where = "`ID`=". $record['ID']; } if (count ($elements) > 0) { $lpmaybe = $low_priority? 'LOW_PRIORITY ' : ''; $query = ( "UPDATE ". $lpmaybe ."`". $_config['db_table_prefix'] . $table ."` ". "SET ". implode (', ', $elements) ." WHERE ". $where ); if (e2_mysql_query ($query)) return true; } } function e2model__soft_fields_for_table_($table) { global $_model; $ret = array (); if (array_key_exists ($table, $_model)) { foreach ($_model[$table] as $field) { if (!in_array ($field[1], array ('key'))) { $ret[] = $field[0]; } } } return $ret; } function e2m_install () { global $_strings, $_superconfig, $_files_written, $_folders_written, $_diagnose; $ret = array (); if (e2_is_installed ()) { e2_go_to (''); } else { if ($_superconfig['disallow_installer']) { die ('Installer disabled by superconfig'); } if (__LOG) __log ('Installer: not installed, present user with form'); $ret['title'] = $_strings['pt--install']; $ret['heading'] = $_strings['pt--install']; $submit_text = $_strings['fb--begin']; $db['server'] = @$_COOKIE[e2_cookie_prefix ('install_db_server')]; $db['user_name'] = @$_COOKIE[e2_cookie_prefix ('install_db_user_name')]; $db['passw'] = e2_decrypt (@$_COOKIE[e2_cookie_prefix ('install_db_passw')]); $db['name'] = @$_COOKIE[e2_cookie_prefix ('install_db_name')]; $ret['form-install'] = array ( 'form-action' => e2_compose_url ('e2s_install'), 'form-check-db-config-action' => e2_compose_url ('e2j_check_db_config'), 'form-list-databases-action' => e2_compose_url ('e2j_list_databases'), 'submit-text' => $submit_text, 'retry-text' => $_strings['fb--retry'], 'db-server' => htmlspecialchars (@$db['server']? $db['server'] : 'localhost'), 'db-user' => htmlspecialchars (@$db['user_name']? $db['user_name'] : 'root'), 'db-password' => htmlspecialchars (DB_PASSWORD_RECOVER_AND_SHOW? (@$db['passw']) : ''), 'db-database' => htmlspecialchars (@$db['name']), ); $ret['form-install']['installation-possible?'] = true; if (__LOG) __log ('Installer: force directories'); foreach ($_folders_written as $necessary_folder) { @forcedirectories ($necessary_folder); } if (!@isset ($_diagnose['ok?'])) e2_diagnose (); if ($_diagnose['ok?']) { if (__LOG) __log ('Installer: everything is fine'); } else { if (__LOG) __log ('Installer: problems, tell user'); $ret['form-install']['installation-possible?'] = false; } } if (__LOG) __log ('Installer: return'); return $ret; } function e2_instantiate ($version) { global $_instance; $_instance['version'] = $version; if (write_file (USER_FOLDER. '/instance.psa', serialize ($_instance))) { return true; } else { die ('Cannot instantiate v'. $version .': probably permission denied'); } } function e2s_instantiate ($parameters) { global $_strings; if (e2_is_installed ()) { die ('Remove the file "'. USER_FOLDER .'instance.psa" first'); } else { if (is_numeric ($parameters['version'])) { if (e2_instantiate ($parameters['version'])) { e2_error ($_strings['gs--instantiated-version'] .' v'. $parameters['version'], E2E_MESSAGE); e2_go_to (e2_compose_url ('e2m_frontpage', array ('page' => 1))); die; } } } die ('Could not create instance of engine'); } function e2s_install () { global $settings, $_strings, $_instance, $_config, $db_error; if (e2_is_installed ()) { e2_go_to (e2_compose_url ('e2m_install')); die; } else { e2_drop_all_kinds_of_cache (); $db['server'] = @$_POST['db-server']; $db['user_name'] = @$_POST['db-user']; $db['passw'] = e2_encrypt (@$_POST['db-password']); $db['name'] = @$_POST['db-database']; if ( ($link = mysqli_connect ( $db['server'], $db['user_name'], $_POST['db-password'] )) === false ) { e2_error ($_strings['er--cannot-connect-to-db'], E2E_DATABASE_ERROR); e2_go_to (e2_compose_url ('e2m_install')); die; } $db_check = e2_model_data_check ($link, $db['name']); $db_exists = false; if ($db_check['occupied'] and $db_check['migrateable']) { if (__LOG) __log ('Installer: DB data exists and migrateable'); $db_exists = true; } elseif ($db_check['occupied']) { if (__LOG) __log ('Installer: DB data exists, but incomplete'); e2_error ($_strings['er--db-data-incomplete'], E2E_DATABASE_ERROR); e2_go_to (e2_compose_url ('e2m_install')); die; } $timezone = e2_timezone_from_posted_offset (@$_POST['browser-offset']); foreach ($db as $k => $v) { e2_set_cookie ('install_db_' .$k, $v); } @session_start (); if (!array_key_exists ('password', $_POST) or trim ($_POST['password']) == '') { e2_error ($_strings['er--no-password-entered'], E2E_USER_ERROR); e2_go_to (e2_compose_url ('e2m_install')); die; } $new_password = trim ($_POST['password']); $auth_data['sessions'] = array (array ( 'stamp' => time (), 'remote_ip' => $_SERVER['REMOTE_ADDR'], 'key_hash' => e2_pass_key (true), 'ua' => $_SERVER['HTTP_USER_AGENT'], )); $ok = true; if (!e2_save_auth_data ($auth_data)) { e2_error ($_strings['er--cannot-write-auth-data'], E2E_PERMISSIONS_ERROR); $ok = false; } if (!@write_file (USER_FOLDER . 'password-hash.psa', serialize (e2_sha1 ($new_password)))) { e2_error ($_strings['er--settings-not-saved'], E2E_PERMISSIONS_ERROR); $ok = false; } if (!$db_exists) { $settings = array (); } $settings['db'] = $db; $settings['timezone'] = $timezone; $settings['template'] = DEFAULT_TEMPLATE; $settings['language'] = DEFAULT_LANGUAGE; if (!@write_file (USER_FOLDER . 'settings.json', json_encode ($settings, E2_JSON_STYLE))) { e2_error ($_strings['er--settings-not-saved'], E2E_PERMISSIONS_ERROR); $ok = false; } if ($ok) { if ($db_exists) { if (__LOG) __log ('Installer: No need to create DB'); $db_ok = e2_mysql (); if ($db_ok) { if (__LOG) __log ('Installer: Migrate'); e2_migrate_db (); } else { if (__LOG) __log ('Installer: DB not OK'); e2_error ($_strings['er--double-check-db-params']); } } else { if (__LOG) __log ('Installer: Creating DB...'); $db_ok = ( e2_create_table ('Notes') and e2_create_table ('Comments') and e2_create_table ('Keywords') and e2_create_table ('NotesKeywords') and e2_create_table ('Aliases') and e2_create_table ('Actions') and e2_create_table ('Sources') and e2_create_table ('GIPsSessions') ); if (!$db_ok) { if (__LOG) __log ('Installer: DB not OK'); e2_error ($_strings['er--double-check-db-params']); } } if ($db_ok) { if (__LOG) __log ('Installer: Search index...'); $storage = e2_rose_storage (); try { $storage -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e) { if (__LOG) __log ('Installer: Rose not available'); } e2_bsi_start_indexing (); if (__LOG) __log ('Installer: DB OK, instantiating...'); e2_instantiate (E2_VERSION); if (__LOG) __log ('Installer: Done'); if (__LOG) __log ('Installer: Complete'); } e2_spawn (e2_compose_url ('e2s_bsi_step', array ())); e2_go_to (); die; } else { e2_go_to (e2_compose_url ('e2m_install')); die; } } } function e2_is_installed () { global $_instance; return (bool) $_instance; } function e2_make_sure_that_installed () { global $server_name, $folder_on_server, $_instance, $_superconfig; if (e2_is_installed ()) { if (E2_VERSION < $_instance ['version']) { if (IGNORE_VERSION_MISMATCH) return; if (__LOG) __log ('Installer: cannot downdate'); header ('HTTP/1.1 503 Service Unavailable'); die ('E2 does not support automatic downgrade.'); } elseif (E2_VERSION > $_instance ['version']) { if (__LOG) __log ('Installer: need to update'); header ('Location: http://'. $server_name . $folder_on_server .'/perform_update/'); header ('Location: '. e2_compose_url ('e2s_update_perform')); die; } else { if (__LOG) __log ('Installer: no job for me'); return; } } if (__LOG) __log ('Installer: not installed {'); if ((strpos ($_SERVER['SERVER_SOFTWARE'], 'Apache') === 0)) { if (__LOG) __log ('Installer: running on Apache'); $default_htaccess = DEFAULTS_FOLDER . 'default.htaccess'; $must_write_htaccess = false; if (!is_file ($default_htaccess)) { echo 'File not found: '.$default_htaccess. '. Please use the full E2 installation package.'; die; } if (is_file ('.htaccess')) { if (__LOG) __log ('Installer: there is a .htaccess file in the installation directory'); $default_htaccess_contents = file_get_contents ($default_htaccess); $current_htaccess_contents = file_get_contents ('.htaccess'); if ($current_htaccess_contents != $default_htaccess_contents) { $must_write_htaccess = true; $htaccess_backup_tmpl = $htaccess_backup_name = '.htaccess.old'; $htaccess_backup_ord = 1; while (is_file ($htaccess_backup_name)) { $htaccess_backup_name = $htaccess_backup_tmpl .'.'. $htaccess_backup_ord ++; } if (__LOG) __log ('Installer: existing .htaccess wrong, backing up as <'. $htaccess_backup_name .'>'); if (!@rename ('.htaccess', $htaccess_backup_name)) { if (__LOG) __log ('Installer: fuck'); echo 'Looks like you are using Apache and have put an incorrect ".htaccess" file in the installation directory. Additionally, the installer was not able to back up your existing ".htaccess" file in order to replace it with the correct one. Please use the full E2 installation package and grant write access on the installation target directory, all the files and subdirectories.'; die; } } } else { $must_write_htaccess = true; } if ($must_write_htaccess) { if (__LOG) __log ('Installer: writing a correct .htaccess file'); if (!@copy ($default_htaccess, '.htaccess')) { if (__LOG) __log ('Installer: fuck'); echo 'The installer was not able to create a correct ".htaccess" file. Please grant write access on the installation target directory.'; die; } } } if ($_superconfig['disallow_installer']) { die ('Not installed'); } else { $install_url = e2_compose_url ('e2m_install'); if (__LOG) __log ('Installer: will need to install, going to '. $install_url); if (__LOG) __log ('}'); e2_go_to ($install_url); die; } } function e2j_check_db_config () { echo e2_check_database_from_http_post (); die; } function e2j_list_databases () { $server = $user = $password = ''; if (array_key_exists ('db-server', $_POST)) $server = $_POST['db-server']; if (array_key_exists ('db-user', $_POST)) $user = $_POST['db-user']; if (array_key_exists ('db-password', $_POST)) $password = $_POST['db-password']; $databases_array = e2_usable_databases ($server, $user, $password); if ($databases_array) die (implode ('|', $databases_array)); die; } function e2_migrate_db () { global $_db, $_db_error, $_config, $_model; $prefix = $_config['db_table_prefix']; if (__LOG) __log ('Migrate: start'); if ($_db['charset'] === 'utf8mb4') { e2mig__convert_all_tables_to_utf8mb4 ($prefix); } else { e2mig__convert_all_tables_to_utf8 ($prefix); } e2_mysql_query ('SET sql_quote_show_create=1'); foreach (array_keys ($_model) as $table) { e2_create_table ($table); $q = "SHOW CREATE TABLE `". $prefix . $table ."`"; if (__LOG) __log ('Migrate: '. $q); if (e2_mysql_query ($q)) { $ct[$table] = e2_mysql_result_as_array (); $ct[$table] = $ct[$table][0]['Create Table']; } else { die ('Database table "'. $prefix . $table .'" not accessible during migration. Check your database availability'); } if (e2_mysql_query ("SHOW INDEX FROM `". $prefix . $table ."`")) { $indexes = e2_mysql_result_as_array (); $indexes_to_drop = array (); foreach ($indexes as $index) { $index = $index['Key_name']; if (preg_match ('/\_[0-9]+$/', $index)) { $indexes_to_drop[] = 'DROP INDEX '. $index; } } if (count ($indexes_to_drop)) { $indexes_to_drop = implode (', ', array_unique ($indexes_to_drop)); e2_mysql_query ( "ALTER TABLE  `". $prefix . $table ."` ". $indexes_to_drop ); } } if (__LOG) __log ('Migrate: '. print_r ($ct, true)); } if (!strstr ($ct['Notes'], '`FormatterID`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `FormatterID` VARCHAR( 32 ) DEFAULT 'calliope' NOT NULL AFTER `Text`" ); } if (!strstr ($ct['Notes'], '`OriginalAlias`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `FormatterID`" ); } if (!strstr ($ct['Notes'], 'KEY `Stamp` (`Stamp`)')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD INDEX (`Stamp`);" ); } if (strstr ($ct['Notes'], '`IP`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "DROP `IP`" ); } e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); if (!strstr ($ct['Notes'], '`IsIndexed`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `IsIndexed` TINYINT( 1 ) DEFAULT '0' NOT NULL AFTER `IsDST`" ); } if (!strstr ($ct['Notes'], '`Uploads`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `Uploads` MEDIUMTEXT AFTER `OriginalAlias`" ); } e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); if (!strstr ($ct['Notes'], '`IsExternal`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `IsExternal` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IsIndexed`" ); } if (!strstr ($ct['Notes'], '`SourceID`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `IsExternal`" ); } if (!strstr ($ct['Notes'], '`SourceNoteID`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceNoteID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `SourceID`" ); } if (!strstr ($ct['Notes'], '`SourceNoteURL`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceNoteURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteID`" ); } if (!strstr ($ct['Notes'], '`SourceNoteData`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceNoteData` MEDIUMTEXT AFTER `SourceNoteURL`" ); } if (!strstr ($ct['Notes'], '`SourceNoteJSONURL`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD `SourceNoteJSONURL` VARCHAR(255) DEFAULT '' NOT NULL AFTER `SourceNoteData`" ); } if (strstr ($ct['Notes'], '`SourceMainImageURL`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "DROP `SourceMainImageURL`" ); } if (strstr ($ct['Notes'], '`IsIssue`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "DROP `IsIssue`" ); } if (!strstr ($ct['Notes'], 'KEY `SourceID` (`SourceID`)')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD INDEX (`SourceID`);" ); } if (!strstr ($ct['Notes'], 'KEY `SourceNoteID` (`SourceNoteID`)')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Notes` ". "ADD INDEX (`SourceNoteID`);" ); } if (!strstr ($ct['Comments'], 'KEY `NoteID` (`NoteID`)')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Comments` ". "ADD INDEX (`NoteID`);" ); } e2_mysql_query ( "ALTER TABLE `". $prefix . "Comments` ". "CHANGE `Text` `Text` MEDIUMTEXT" ); e2_mysql_query ( "ALTER TABLE `". $prefix . "Comments` ". "CHANGE `Reply` `Reply` MEDIUMTEXT" ); if (!strstr ($ct['Keywords'], '`OriginalAlias`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Keywords` ". "CHANGE `URLName` `OriginalAlias` VARCHAR( 64 ) DEFAULT '' NOT NULL AFTER `Keyword`" ); } e2_mysql_query ( "ALTER TABLE `". $prefix . "Keywords` ". "CHANGE `Description` `Description` MEDIUMTEXT" ); if (!strstr ($ct['Keywords'], '`Uploads`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Keywords` ". "ADD `Uploads` MEDIUMTEXT AFTER `Description`" ); } e2_mysql_query ( "ALTER TABLE `". $prefix . "Keywords` ". "CHANGE `Uploads` `Uploads` MEDIUMTEXT" ); if (strstr ($ct['Keywords'], '`ParentKeywordID`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Keywords` ". "DROP `ParentKeywordID`" ); } if (!strstr ($ct['Comments'], '`IsGIPUsed`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Comments` ". "ADD `IsGIPUsed` TINYINT(1) DEFAULT '0' NOT NULL AFTER `IP`" ); } if (!strstr ($ct['Comments'], '`GIP`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Comments` ". "ADD `GIP` VARCHAR(15) DEFAULT '' NOT NULL AFTER `IsGIPUsed`" ); } if (!strstr ($ct['Comments'], '`GIPAuthorID`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Comments` ". "ADD `GIPAuthorID` VARCHAR(64) DEFAULT '' NOT NULL AFTER `GIP`" ); } if (!strstr ($ct['Aliases'], 'KEY `Alias` (`Alias`)')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Aliases` ". "ADD INDEX (`Alias`);" ); } if (!strstr ($ct['Aliases'], 'KEY `EntityID` (`EntityID`)')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Aliases` ". "ADD INDEX (`EntityID`);" ); } if (!strstr ($ct['Aliases'], '`EntityType`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Aliases` ". "ADD `EntityType` VARCHAR( 1 ) DEFAULT '' NOT NULL AFTER `ID`" ); } e2_mysql_query ( "UPDATE `". $prefix . "Aliases` ". "SET `EntityType` = 'n' ". "WHERE `EntityType` = ''" ); if (!strstr ($ct['Actions'], '`ReadCount`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Actions` ". "ADD `ReadCount` INT DEFAULT '0' NOT NULL" ); } if (!strstr ($ct['Sources'], '`TrueID`')) { e2_mysql_query ( "ALTER TABLE `". $prefix . "Sources` ". "ADD `TrueID` INT UNSIGNED DEFAULT '0' NOT NULL AFTER `ID`" ); e2_mysql_query ( "UPDATE `". $prefix . "Sources` ". "SET `TrueID` = `ID`" ); } return true; } function e2mig__convert_all_tables_to_utf8 ($prefix) { global $_model; foreach (array_keys ($_model) as $e2_table) { $r = e2_table_status ($e2_table, $prefix); if ($r) { $col = $r['Collation']; if ($col != 'utf8_general_ci') { if (__LOG) __log ('Migrate: Convert table '. $e2_table. ' to UTF8'); e2_mysql_query ( "ALTER TABLE `". $prefix . $e2_table ."` ". "CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci" ); } } } } function e2mig__queries_to_recreate_indexes_for_table_($table) { $drop_index_qs = $create_index_qs = []; $q = ( "SELECT s.column_name, s.table_name, s.index_name, s.non_unique ". "FROM information_schema.statistics s ". " JOIN information_schema.columns USING (table_name, table_schema, column_name) ". " JOIN information_schema.tables USING (table_name, table_schema) ". "WHERE s.table_schema = DATABASE() AND engine = 'InnoDB' ". " AND column_type like '%varchar%' AND table_name='".$table."'" ); e2_mysql_query ($q); foreach (e2_mysql_result_as_array () as $row) { $drop_index_qs[] = sprintf ( "DROP INDEX %s ON %s", $row['index_name'], $row['table_name'] ); $create_index_qs[] = sprintf ( "CREATE %s INDEX %s ON %s(%s(191))", $row['non_unique'] ? '' : 'UNIQUE', $row['index_name'], $row['table_name'], $row['column_name'] ); } return array ($drop_index_qs, $create_index_qs); } function e2mig__convert_all_tables_to_utf8mb4 ($prefix) { global $_model, $_db; $rose_tables = e2_rose_tables_map (); $all_tables = array_merge ( array_keys ($_model), array_values ($rose_tables) ); $drop_index_qs = $create_index_qs = null; foreach ($all_tables as $e2_table) { $r = e2_table_status ($e2_table, $prefix); if ($r) { $col = $r['Collation']; if (stripos ($col, 'utf8mb4') !== 0) { list ( $drop_index_qs, $create_index_qs ) = e2mig__queries_to_recreate_indexes_for_table_($prefix . $e2_table); if ($drop_index_qs !== null) { if (__LOG) { __log ('Migrate: Drop indexes of table '. $e2_table); } foreach ($drop_index_qs as $drop_index_q) { e2_mysql_query ($drop_index_q); } } if (__LOG) { __log ('Migrate: Convert table '. $e2_table. ' to UTF8MB4'); } e2_mysql_query ( "ALTER TABLE `". $prefix . $e2_table ."` ". "CONVERT TO CHARACTER SET utf8mb4" ); if ($create_index_qs !== null) { if (__LOG) { __log ('Migrate: Recreate indexes of table '.$e2_table); } foreach ($create_index_qs as $create_index_q) { e2_mysql_query ($create_index_q); } } } } } } function e2s_migrate () { e2_migrate_db (); die ('Database migration finished.'); } function e2s_update_perform () { global $_instance, $_model, $settings, $_config, $_diagnose; $from = max ((int) ($_instance['version']), 2285); if ($_instance['version'] == E2_VERSION) { e2_go_back (); die; } if ($from < 2587) { e2_unlink_glob ('caches/*'); rmdir ('caches'); } if ($from < 2691) { $settings = e2_utf8_version_of_array_($settings); if (!@write_file (USER_FOLDER . 'settings.json', json_encode ($settings, E2_JSON_STYLE))) { e2_error ($_strings['er--cannot-save-data'], E2E_PERMISSIONS_ERROR); e2_die_errors (); } } if ($from < 2921) { $settings['template'] = 'plain'; } if ($from < 3223) { $settings['v3223_rss_permalinks_before_stamp'] = time (); } @unlink (USER_FOLDER. 'last-update.psa'); @unlink (CACHES_FOLDER . 'index.xml'); @forcedirectories (CACHES_FOLDER); @forcedirectories (BACKUP_FOLDER); @forcedirectories (MEDIA_ROOT_FOLDER . PICTURES_FOLDER .'remote/'); @forcedirectories (MEDIA_ROOT_FOLDER . THUMBNAILS_FOLDER .'remote/'); if (@$settings['template'] == '') $settings['template'] = DEFAULT_TEMPLATE; if (isset ($settings['appearance']['hot_frontpage'])) { unset ($settings['appearance']['hot_frontpage']); } if (isset ($settings['db']['table_prefix'])) { if ($settings['db']['table_prefix'] != @$_config['db_table_prefix']) { die ('You’ve been using a database with a table prefix “'. $settings['db']['table_prefix'] .'”. Now this should be set in the configuration. Please add the following line to the file user/config.php:<br /><br />$_config[\'db_table_prefix\'] = \''. $settings['db']['table_prefix'] .'\';<br /><br />Then refresh this page.'); } else { unset ($settings['db']['table_prefix']); } } if (isset ($settings['comments']['on'])) { if (!$settings['comments']['on']) { @e2_mysql_query ( "UPDATE LOW_PRIORITY `". $_config['db_table_prefix'] . "Notes` ". "SET `IsCommentable`=0" ); } $settings['comments']['default_on'] = (bool) $settings['comments']['on']; unset ($settings['comments']['on']); } if ( is_file (USER_FOLDER . 'settings.json') and is_file (USER_FOLDER . 'settings.psa') ) { @unlink (USER_FOLDER . 'settings.psa'); } if (!@write_file (USER_FOLDER . 'settings.json', json_encode ($settings, E2_JSON_STYLE))) { e2_error ($_strings['er--cannot-save-data'], E2E_PERMISSIONS_ERROR); } e2_drop_all_kinds_of_cache (); e2_migrate_db (); if ($from < 3238) { if (e2_mark_all_for_reindexing ()) { $storage = e2_rose_storage (); try { $storage -> erase (); } catch (\S2\Rose\Exception\RuntimeException $e) { if (__LOG) __log ('Rose not available'); } } e2_bsi_start_indexing (); } $_diagnose['need?'] = true; e2_set_cookie ('diagnose', '1'); e2_instantiate (E2_VERSION); if (e2_secure ()) { e2_error (e2l_get_string ('gs--updated-successfully', array ( 'from' => 'v'. $from, 'to' => 'v'. $_instance['version'], )), E2E_MESSAGE); } e2_go_to (); die; } function e2_mysql () { global $settings, $_db, $_db_error; if (empty($_db['connected'])) { $_db['link'] = @mysqli_connect( 'p:'. $settings['db']['server'], $settings['db']['user_name'], e2_decrypt ($settings['db']['passw']) ); if (!$_db['link']) { $_db['link'] = @mysqli_connect( 'p:'. $settings['db']['server'], $settings['db']['user_name'], $settings['db']['passw'] ); if ($_db['link']) { $settings['db']['passw'] = e2_encrypt ($settings['db']['passw']); if (__LOG) { __log ('DB: storing password in a new way'); } @write_file (USER_FOLDER . 'settings.json', json_encode($settings, E2_JSON_STYLE)); } } if (!$_db['link']) { $_db_error = DB_CANNOT_CONNECT; return false; } if (@mysqli_select_db ($_db['link'], $settings['db']['name'])) { $_db_error = DB_OK; $_db['connected'] = true; $version = mysqli_get_server_info ($_db['link']); if (version_compare ($version, E2_MINIMUM_MYSQL, '>=')) { $_db['charset'] = version_compare ($version, '5.5.3', '>=') ? 'utf8mb4' : 'utf8'; $_db['link'] -> query ('SET NAMES '. $_db['charset']); } else { $_db_error = DB_TOO_OLD; return false; } return true; } else { $_db_error = DB_CANNOT_FIND; return false; } } else { $_db_error = DB_OK; return true; } } function e2_mysql_query ($q) { global $total_queries, $_db, $_db_error, $_strings; if (__LOG) __log ('DB: query <'. $q .'>'); $stopwatch_q = getmicrotime (); @$total_queries ++; if (e2_mysql ()) { if ($_db['result'] = mysqli_query ($_db['link'], $q)) { if (__LOG) __log ('DB: done in '. round (getmicrotime () - $stopwatch_q, 3)); $_db_error = DB_OK; return true; } else { e2_error ($_strings['er--error-in-query']. ': <br /><code>'.nl2br ($q).'</code><br />'. mysqli_error ($_db['link']), E2E_DATABASE_ERROR); $_db_error = DB_QUERY_ERROR; return false; } } else { if ($_db_error == DB_CANNOT_FIND) { if (__LOG) __log ('DB: cannot find db'); e2_error ($_strings['er--cannot-find-db'], E2E_DATABASE_ERROR); } elseif ($_db_error == DB_CANNOT_CONNECT) { if (__LOG) __log ('DB: cannot connect to db'); e2_error ($_strings['er--cannot-connect-to-db'], E2E_DATABASE_ERROR); } elseif ($_db_error == DB_TOO_OLD) { if (__LOG) __log ('DB: MySQL version too old'); e2_error ($_strings['er--error-occurred'].' (DB_TOO_OLD)', E2E_DATABASE_ERROR); } else { if (__LOG) __log ('DB: db error '. $_db_error); e2_error ($_strings['er--error-occurred'].' ('. $_db_error .')', E2E_DATABASE_ERROR); } return false; } } function e2_mysql_result_as_array ($type = MYSQLI_ASSOC) { global $_db; $ret = array (); while ($a = @mysqli_fetch_array ($_db['result'], $type)) { foreach ($a as $i => $ai) { if (is_string ($ai)) { $a[$i] = $ai; } } $ret[] = $a; } return $ret; } function e2_mysql_real_escape_string ($string) { global $_db; e2_mysql (); return mysqli_real_escape_string ($_db['link'], $string); } function e2_sift_backups () { echo '<pre>'; echo 'Sifting backups...<br>'; $list = array (); foreach (glob (BACKUP_FOLDER. '*.sql') as $file) { if (preg_match ('/^backup\-(\d+)\-(\d+)\-(\d+)\-at\-(\d+)\-(\d+)\-(\d+)\.sql$/is', basename ($file), $matches)) { list (, $y, $m, $d, $h, $i, $s) = $matches; $stamp = gmmktime ($h, $i, $s, $m, $d, $y); $list[$stamp] = $file; } } if (count ($list) > 3) { echo 'More than 3 backups, time to sift...<br>'; $laststamp = -1; $intervals = array (SECONDS_IN_A_MINUTE, SECONDS_IN_AN_HOUR, SECONDS_IN_A_DAY, -1); $i = 0; foreach (array_reverse ($list, true) as $stamp => $file) { echo '-> '. $file .' ('. gmdate ('r', $stamp) .')<br>'; if ($laststamp == -1) { echo '   latest, leave<br>'; $laststamp = $stamp; } elseif ($intervals[$i] == -1) { echo '   too old, remove<br>'; unlink ($file); } else { if ($laststamp - $stamp < $intervals[$i]) { echo '   no need (not long ago), remove<br>'; unlink ($file); } else { $i ++; echo '   ok, leave, set interval to '. $intervals[$i] .'<br>'; $laststamp = $stamp; } } } } else { echo 'No need to sift<br>'; } echo '</pre>'; return; } function e2s_dump () { global $_model, $_db, $_config; if (e2_mysql ()) { if ($_db['link']) { $minstamp = time () - (SECONDS_IN_A_DAY); e2_mysql_query ( "DELETE FROM `". $_config['db_table_prefix'] . "Actions` ". "WHERE (`Stamp` < ". (time () - (SECONDS_IN_A_DAY * 7)) ." AND `HitCount` <= 1) ". "OR (`Stamp` < ". (time () - (SECONDS_IN_A_MONTH)) ." AND `HitCount` <= 5)". "OR (`Stamp` < ". (time () - (SECONDS_IN_A_YEAR)) ." AND `HitCount` <= 10)" ); $tables = array (); foreach (array_keys ($_model) as $table) { $tables[] = $_config['db_table_prefix'] . $table; } $time = time (); $filename = BACKUP_FOLDER .'backup-'.gmdate ('Y-m-d-\a\t-H-i-s', $time).'.sql'; e2_backup ( $_db['link'], $tables, $filename ); e2_sift_backups (); die ('Backed up.'); } } die ('Could not backup.'); } define ('ALIAS_MAX_LENGTH', 64); function e2ali__alias_from_title_($source) { global $_config; $p_newalias = $source; if (array_key_exists ('autoreplace_for_aliases', $_config)) { $p_newalias = strtr ( $p_newalias, $_config['autoreplace_for_aliases'] ); } $p_newalias = e2l_transliterate ($p_newalias); $p_newalias = str_replace ('\'', '', $p_newalias); $p_newalias = str_replace ('’', '', $p_newalias); $p_newalias = str_replace (chr (146), '', $p_newalias); $newalias = ''; for ($i = 0; $i < strlen ($p_newalias); ++ $i) { if ( (ord ($p_newalias[$i]) >= 48 and ord ($p_newalias[$i]) <= 57) or (ord ($p_newalias[$i]) >= 65 and ord ($p_newalias[$i]) <= 90) or (ord ($p_newalias[$i]) >= 97 and ord ($p_newalias[$i]) <= 122) or 0 ) { $newalias .= $p_newalias[$i]; } else { $newalias .= '-'; } } $newalias = preg_replace ('/\-+/', '-', $newalias); $newalias = trim ($newalias, '-'); $newalias = strtolower ($newalias); if ($newalias == '-') $newalias = ''; $newalias = substr ($newalias, 0, ALIAS_MAX_LENGTH); return $newalias; } function e2_aliasrec_of_alias_($alias) { global $_config; if (!$alias and $alias !== '0') return false; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Aliases` ". "WHERE `Alias` = '". $alias ."' ". "ORDER BY Stamp LIMIT 1" )) { $result = e2_mysql_result_as_array (); if (count ($result) == 1) { return $result[0]; } } } function e2_active_alias_for_page_($entity_type, $entity_id) { global $_config, $_e2_active_aliases; if ($entity_id) { if ( is_array ($_e2_active_aliases) and array_key_exists ($entity_type.$entity_id, $_e2_active_aliases) ) { return @$_e2_active_aliases[$entity_type.$entity_id]; } else { if (e2_mysql_query ( "SELECT `Alias` ". "FROM `". $_config['db_table_prefix'] . "Aliases` ". "WHERE `EntityType` = '". $entity_type ."' ". "AND `EntityID` = ". $entity_id ." ". "ORDER BY `Stamp` DESC LIMIT 1" )) { $result = e2_mysql_result_as_array (); $alias = $result[0]['Alias']; } if (!$alias and $entity_type == ENTITY_TYPE_TAG) { if (e2_mysql_query ( "SELECT OriginalAlias FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE ID = '". ((int) $entity_id)."'") ) { $result = e2_mysql_result_as_array (); $alias = $result[0]['OriginalAlias']; } } $_e2_active_aliases[$entity_type.$entity_id] = $alias; } return @$_e2_active_aliases[$entity_type.$entity_id]; } } function e2_find_or_set_available_alias ($mode, $entity_type, $entity_id, $source, $try_number = 1) { global $_e2_active_aliases; if ($mode == 'set' and (!$entity_type or !$entity_id)) return false; $newalias = e2ali__alias_from_title_($source); if ($try_number > 1) { $try_number_appendix = '-'. $try_number; $newalias = substr ($newalias, 0, ALIAS_MAX_LENGTH - strlen ($try_number_appendix)) . $try_number_appendix; } if ( $newalias !== '' and $aliasrec = e2_aliasrec_of_alias_($newalias) ) { $whose_type = $aliasrec['EntityType']; $whose = $aliasrec['EntityID']; if ( (($entity_id and $whose == $entity_id) and ($entity_type and $whose_type == $entity_type)) or $newalias != e2_active_alias_for_page_($whose_type, $whose) ) { if ($mode == 'find') { return $newalias; } if ($mode == 'set') { if (e2_update_record ('Aliases', array ( 'ID' => $aliasrec['ID'], 'EntityType' => $entity_type, 'EntityID' => $entity_id, 'Alias' => $newalias, 'Stamp' => time (), ))) { return $_e2_active_aliases[$entity_type.$entity_id] = $newalias; } } } else { return e2_find_or_set_available_alias ($mode, $entity_type, $entity_id, $source, $try_number + 1); } } else { if ($entity_type and $entity_id and $newalias == '') { if (e2_active_alias_for_page_($entity_type, $entity_id) == '') { return ''; } } if ( $entity_type == ENTITY_TYPE_TAG and $another_tagrec = e2_keyword_by_legacy_urlname ($newalias) ) { if ($another_tagrec['ID'] != $entity_id) { return e2_find_or_set_available_alias ($mode, $entity_type, $entity_id, $source, $try_number + 1); } } if ($mode == 'find') { return $newalias; } if ($mode == 'set') { if (e2_insert_record ('Aliases', array ( 'EntityType' => $entity_type, 'EntityID' => $entity_id, 'Alias' => $newalias, 'Stamp' => time (), ))) { return $_e2_active_aliases[$entity_type.$entity_id] = $newalias; } } } return ''; } function e2m_note ($parameters = array ()) { global $settings, $server_name, $_config, $_superconfig, $_strings; if (__LOG) __log ('Note {'); $note = $parameters['*note']; if ($note == false) { return e2_error404_mode (); } if (!e2_noterec_is_visible ($note, e2_secure ())) { return e2_error404_mode (); } $note_url = e2_compose_url ('e2m_note', $parameters); if (__LOG) __log ('Navigation {'); $prev = e2_near_note ($note, 'prev'); $next = e2_near_note ($note, 'next'); if ($prev) { $pages['prev-href'] = e2_compose_url ('e2m_note', array ('*note' => $prev)); $pages['prev-title'] = e2_kavychki (htmlspecialchars ($prev['Title'], ENT_NOQUOTES, HSC_ENC)); } if ($next) { $pages['next-href'] = e2_compose_url ('e2m_note', array ('*note' => $next)); $pages['next-title'] = e2_kavychki (htmlspecialchars ($next['Title'], ENT_NOQUOTES, HSC_ENC)); } $pages['title'] = $_strings['nm--posts']; $pages['timeline?'] = false; $pages['this-title'] = e2_kavychki (htmlspecialchars ($note['Title'], ENT_NOQUOTES, HSC_ENC)); if (__LOG) __log ('}'); if (__LOG) __log ('packaging...'); $note['_']['_id'] = $note['ID']; $note['_']['_ord'] = 0; $note['_']['_ord_max'] = 0; $note_pack = e2_package_note ($note); if (__LOG) __log ('update hit count...'); $action_stamp = time (); $action_stamp = $action_stamp - ($action_stamp % SECONDS_IN_AN_HOUR); e2_insert_record ( 'Actions', array ( 'EntityID' => $note['ID'], 'Stamp' => $action_stamp, 'HitCount' => 1, ), 'INSERT LOW_PRIORITY', 'ON DUPLICATE KEY UPDATE `HitCount` = `HitCount` + 1' ); $the_comments = ''; $comments_closed = false; $comments_count = false; $comments_toggle = array (); $comments_form = ''; if (e2_secure ()) { $comments_cache_file = e2_note_cache_filename_with_id_($note['_']['_id'] .'-comments-author'); } else { $comments_cache_file = e2_note_cache_filename_with_id_($note['_']['_id'] .'-comments'); } $comments_ctree = null; if (CACHE_NOTES_COMMENTS and is_file ($comments_cache_file)) { $comments_ctree = @unserialize (file_get_contents ($comments_cache_file)); } if (__LOG) __log ('Comments {'); if (is_array ($comments_ctree)) { if (__LOG) __log ('retrieve cached ctree'); $the_comments = $comments_ctree; } else { if (__LOG) __log ('assemble ctree...'); $commentrecs_array = e2_notes_visible_comments ($note['ID'], "ORDER BY `Stamp`"); $comments = array (); $old_so_far = true; foreach ($commentrecs_array as $k => $commentrec) { $commentrec['_']['_id'] = $commentrec['ID']; $commentrec['_']['_ord'] = $k; $commentrec['_']['_ord_max'] = count ($commentrecs_array) - 1; $comment = e2_package_comment ( $note, $commentrec, $k + 1 ); if ($comment['new?'] and $old_so_far) { $comment['first-new?'] = true; $old_so_far = false; } $comments[] = $comment; } $the_comments = $comments; if (CACHE_NOTES_COMMENTS) write_file ($comments_cache_file, serialize ($the_comments)); } if (__LOG) __log ('} // Comments'); if (!@$_config['read_only'] and $note_pack['commentable-now?']) { $form_comment = e2_comment_form_for_note ($note); } if (e2_secure () and e2_note_is_ok_for_comments ($note, NOTE_COMMENTABLE_NOW_CONDITIONALLY)) { if ($note['IsCommentable']) { $comments_toggle['href'] = e2_compose_url ('e2m_note_flag', array ( '*note' => $note, 'flag' => 'IsCommentable', 'value' => 0, )); $comments_toggle['text'] = $_strings['bt--close-comments-to-post']; } else { $comments_toggle['href'] = e2_compose_url ('e2m_note_flag', array ( '*note' => $note, 'flag' => 'IsCommentable', 'value' => 1, )); $comments_toggle['text'] = $_strings['bt--open-comments-to-post']; } } if ( e2_secure () and array_key_exists ('new-comments-count', $note_pack) and $note_pack['new-comments-count'] ) { if (__LOG) __log ('mark comments as not new'); e2_drop_caches_for_note_($note_id); e2_update_record ('Comments', array ('IsNew' => 0), array ('NoteID' => $note['_']['_id'])); } if (__LOG) __log ('more work...'); $return['title'] = $note['Title']; $return['pages'] = $pages; $return['summary'] = $note_pack['summary']; $return['notes'] = array ('only' => $note_pack); if ($the_comments) $return['comments']['each'] = $the_comments; if ($comments_toggle) $return['comments']['toggle'] = $comments_toggle; $return['comments']['count'] = $note_pack['comments-count']; $return['comments']['count-text'] = $note_pack['comments-count-text']; $return['comments']['new-count'] = $note_pack['new-comments-count']; $return['comments']['new-count-text'] = $note_pack['new-comments-count-text']; $return['comments']['commentable-now?'] = $note_pack['commentable-now?']; if ($form_comment) $return['form-comment'] = $form_comment; if (__LOG) __log ('} // Note'); return $return; } function e2m_note_read ($parameters = array ()) { if (__LOG) __log ('Note read {'); $note = $parameters['*note']; $action_stamp = time (); $action_stamp = $action_stamp - ($action_stamp % SECONDS_IN_AN_HOUR); e2_insert_record ( 'Actions', array ( 'EntityID' => $note['ID'], 'Stamp' => $action_stamp, 'ReadCount' => 1, ), 'INSERT LOW_PRIORITY', 'ON DUPLICATE KEY UPDATE `ReadCount` = `ReadCount` + 1' ); if (__LOG) __log ('}'); e2_go_to (e2_compose_url ('e2m_note', $parameters)); } function e2m_note_hitinfo ($parameters = array ()) { global $_config; $note = $parameters['*note']; echo '<table>'; echo '<tr valign="top">'; foreach ( array ('day', 'week', 'month', 'year', 'ever') as $period ) { echo '<td>'; echo '<h2>'. $period.' hits</h2>'; echo '<p>'; $after = time () - e2_period_length ($period); if (e2_mysql_query ( "SELECT SUM(`HitCount`) HitCount FROM `". $_config['db_table_prefix'] . "Actions` ". "WHERE `EntityID` = ". $note['ID'] ." ". "AND `Stamp` > ". $after ." ". "GROUP BY `EntityID`" )) { $res = e2_mysql_result_as_array (); echo $res[0]['HitCount']; } echo '</p>'; if (e2_mysql_query ( "SELECT n.`ID`, n.`Title`, n.`IsFavourite`, a.`EntityID`, SUM(a.`HitCount`) HitCount ". "FROM `". $_config['db_table_prefix'] . "Actions` a, ". "`". $_config['db_table_prefix'] . "Notes` n  ". "WHERE a.`Stamp` > ". $after ." ". "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID` ". "ORDER BY `IsFavourite` DESC, HitCount DESC ". "LIMIT 10" )) { echo mysqli_error (); $res = e2_mysql_result_as_array (); echo '<h3>Popular</h3>'; foreach ($res as $r) { echo '<p><a href="'. $r['ID']. '">'. $r['Title'] .'</a> ('. $r['HitCount'] .')</p>'; } } } die; } function e2m_note_withdraw ($parameters = array ()) { global $_strings; $note_record = $parameters['*note']; if (!$note_record) return e2_error404_mode (); $unbroadcast_spawn_url = e2_compose_url ('e2m_note_broadcast', array ('*note' => $note_record)); $note_record['IsPublished'] = 0; $note_record['IsCommentable'] = 0; $note_record['IsVisible'] = 1; $note_record['Stamp'] = time (); $note_record['IP'] = $_SERVER['REMOTE_ADDR']; if ($parameters['alias']) { $note_record['OriginalAlias'] = $parameters['alias']; } else { $note_record['OriginalAlias'] = e2_find_or_set_available_alias ( 'find', ENTITY_TYPE_NOTE, $note_record['ID'], $note_record['Title'] ); } e2_drop_caches_for_note_($note_record['ID']); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); if ($note_record['IsFavourite']) { @unlink (CACHE_FILENAME_FAVS); } if (e2_update_record ('Notes', $note_record)) { e2_unindex_note_by_id ($note_record['ID']); e2_spawn ($unbroadcast_spawn_url); e2_find_or_set_available_alias ('set', ENTITY_TYPE_NOTE, $note_record['ID'], ''); e2_go_to (e2_compose_url ('e2m_draft', array ( 'draft' => $note_id, 'oalias' => $note_record['OriginalAlias'], ))); } else { e2_go_back (); } } function e2m_note_delete ($parameters = array()) { global $_strings; $note_record = $parameters['*note']; if (!$note_record) return e2_error404_mode (); $draft = !$note_record['IsPublished']; if ($draft) { $caution = e2l_get_string ('gs--draft-will-be-deleted', array ( 'draft' => htmlspecialchars ($note_record['Title'], ENT_NOQUOTES, HSC_ENC), )); } else { $caution = e2l_get_string ('gs--post-will-be-deleted', array ( 'post' => htmlspecialchars ($note_record['Title'], ENT_NOQUOTES, HSC_ENC), )); } $title = $draft? $_strings['pt--draft-deletion'] : $_strings['pt--post-deletion']; $form_note_delete = array ( '.note-id' => $note_record['ID'], '.is-draft' => (int) $draft, 'note-title' => htmlspecialchars ($note_record['Title'], ENT_COMPAT, HSC_ENC), 'caution-text' => $caution, 'form-action' => e2_compose_url ('e2s_note_delete'), 'submit-text' => $_strings['fb--delete'], 'draft?' => (int) $draft, ); if ($note_record['IsPublished']) { $form_note_delete['withdraw-href'] = e2_compose_url ( 'e2m_note_withdraw', $parameters ); } $ret = array ( 'title' => $title. ': '. htmlspecialchars ($note_record['Title'], ENT_NOQUOTES, HSC_ENC), 'heading' => $title, 'form' => 'form-note-delete', 'form-note-delete' => $form_note_delete, ); return $ret; } function e2m_note_flag_favourite ($parameters) { global $_config; $parameters['flag'] = 'IsFavourite'; if (e2mh_note_flag ($parameters)) { $new_parameters = $parameters; $new_parameters['value'] = !$parameters['value']; if ($parameters['value'] == 1) { $new_url = e2_compose_url ('e2m_note_flag_favourite', $new_parameters); $ajaxresult = 'on-rehref|'. $new_url; } else { $new_url = e2_compose_url ('e2m_note_flag_favourite', $new_parameters); $ajaxresult = 'off-rehref|'. $new_url; } } else { $ajaxresult = 'error'; } if (array_key_exists ('result', $_POST) and ($_POST['result'] == 'ajaxresult')) { die ($ajaxresult); } else { e2_go_to (e2_compose_url ('e2m_note', $parameters)); die; } } function e2m_note_flag ($parameters) { e2mh_note_flag ($parameters); if (array_key_exists ('draft', $parameters)) { e2_go_to (e2_compose_url ('e2m_draft', $parameters)); } else { e2_go_to (e2_compose_url ('e2m_note', $parameters)); } die; } function e2mh_note_flag ($parameters) { $note_id = $parameters['*note']['ID']; if (!is_numeric ($note_id)) { return e2_error404_mode (); } e2_drop_caches_for_note_($note_id); if ($parameters['flag'] == 'IsFavourite') { @unlink (CACHE_FILENAME_FAVS); } if ($parameters['flag'] == 'IsVisible') { e2_notes_drop_caches (); } $result = e2_update_record ('Notes', array ( 'ID' => $note_id, $parameters['flag'] => (int) ($parameters['value'] == 1), )); $noterec = e2_note_by_id ($note_id); e2_broadcast_noterec_async ($noterec); return $result; } function e2m_note_use_formatter ($parameters) { $note_id = $parameters['*note']['ID']; if (!is_numeric ($note_id)) { return e2_error404_mode (); } e2_drop_caches_for_note_($note_id); if (!$parameters['*note']['IsPublished']) { @unlink (CACHE_FILENAME_DRAFTS); } if (in_array ($parameters['formatter'], array ('calliope', 'raw', 'neasden'))) { $result = e2_update_record ('Notes', array ( 'ID' => $note_id, 'FormatterID' => $parameters['formatter'], )); echo 'formatter set to '. $parameters['formatter']; } else { echo 'unknown formatter'; } die; } function e2m_note_edit ($parameters = array ()) { return e2mh_note_edit ('edit', $parameters); } function e2mh_note_edit ($write_or_edit, $parameters = array ()) { global $full_blog_url, $_strings, $_config; $title = $_strings['pt--new-post']; $heading = $_strings['pt--new-post']; $note_id = 'new'; $formatter_id = $_config['default_formatter']; if ($write_or_edit == 'edit') { $note_record = $parameters['*note']; if (!$note_record) return e2_error404_mode (); if ($note_record) { if ($note_record['IsPublished']) { $heading = $_strings['pt--edit-post']; $alias_auto = ''; $alias = $parameters['alias']; } else { $heading = $_strings['pt--edit-draft']; $alias_auto = e2_find_or_set_available_alias ( 'find', ENTITY_TYPE_NOTE, $note_record['ID'], $note_record['Title'] ); if (@$note_record['OriginalAlias']) { $alias = $note_record['OriginalAlias']; } else { $alias = $alias_auto; } } } $note_id = $note_record['ID']; $formatter_id = $note_record['FormatterID']; $title = $note_record['Title']; } $kw = e2_tags_with_usage_info (); $allkeywords = array (); foreach ($kw as $keyword) { $allkeywords[] = $keyword['tag']; } $note_bound_tags = array (); if ($write_or_edit == 'edit' and count ($allkeywords)) { $kw = e2_keywords_as_array_by_note ($note_record['ID']); foreach ($kw as $keyword) { $note_bound_tags[] = htmlspecialchars ($keyword['Keyword'], ENT_NOQUOTES, HSC_ENC); } } $tags_info_array = array (); foreach ($allkeywords as $keyword) { $tag_info['name'] = $keyword; $tag_info['selected?'] = in_array ($keyword, $note_bound_tags); $tags_info_array[] = $tag_info; } $note_tags = ''; $note_bound_tags = implode (', ', $note_bound_tags); if ($note_bound_tags) $note_tags = $note_bound_tags; if ($write_or_edit == 'write') { $submit_text = $_strings['fb--save-and-preview']; } if ($write_or_edit == 'edit') { if (array_key_exists ('draft', $parameters)) { $submit_text = $_strings['fb--save-and-preview']; } else { $submit_text = $_strings['fb--save-changes']; } } $resource_mentions = array (); if ($write_or_edit == 'edit') { $resource_mentions = e2_detect_resources_in_text ( $note_record['FormatterID'], $note_record['Text'], 'full' ); } $pasteable_uploads = e2_pasteable_thumbnails_for_editor ( 'note', $note_id, $resource_mentions ); if ($write_or_edit == 'edit') { e2_register_unregistered_uploads ( 'Notes', $note_record, $resource_mentions ); } $stamp = min ($note_record['Stamp'], time ()); $space_usage = e2_space_usage (); $ret['title'] = $title; $ret['heading'] = $heading; $ret['form'] = 'form-note'; $ret['body-uploads-enabled?'] = e2_uploads_enabled ($space_usage); $ret['form-note'] = array ( '.note-id' => $note_id, '.formatter-id' => $formatter_id, '.from' => substr ($_SERVER['HTTP_REFERER'], strlen ($full_blog_url) + 1), '.old-tags-hash' => md5 ($note_tags), '.action' => $write_or_edit, 'form-action' => e2_compose_url ('e2s_note_process'), 'form-note-livesave-action' => e2_compose_url ('e2j_note_livesave'), 'form-file-upload-action' => e2_compose_url ('e2j_file_upload'), 'form-file-remove-action' => e2_compose_url ('e2j_file_remove'), 'create:edit?' => (bool) ($write_or_edit == 'write'), 'title' => htmlspecialchars ($note_record['Title'], ENT_COMPAT, HSC_ENC), 'tags' => $note_tags, 'tags-info' => $tags_info_array, 'text' => htmlspecialchars ($note_record['Text'], ENT_NOQUOTES, HSC_ENC), 'uploads' => $pasteable_uploads, 'uploads-enabled?' => e2_uploads_enabled ($space_usage), 'all-tags' => $allkeywords, 'stamp-formatted' => e2_format_dt_of_timezone ('d.m.Y H:i:s', $stamp, e2_note_timezone ($note_record)), 'time' => $note_record['IsPublished']? array ((int) $stamp, e2_note_timezone ($note_record)) : false, 'alias-autogenerated' => $alias_auto, 'alias' => $alias, 'submit-text' => $submit_text, 'space-usage' => e2_space_usage_string ($space_usage), ); if (!$uploads_enabled) { } if ($write_or_edit == 'edit') { $ret['related-delete-href'] = e2_compose_url ( 'e2m_note_delete', array ('*note' => $note_record) ); if (!array_key_exists ('draft', $parameters)) { $note_record['_']['_id'] = $note_record['ID']; $note_record['_']['_ord'] = 0; $note_record['_']['_ord_max'] = 0; $ret['form-note']['note'] = e2_package_note ($note_record); } } return $ret; } function e2m_write () { return e2mh_note_edit ('write'); } function e2s_note_process () { global $_fp_error, $_strings; $note_id = e2fp_note (); if (!$note_id) { if ($_fp_error == FP_TITLE_OR_TEXT_EMPTY) { e2_error ($_strings['er--post-must-have-title-and-text'], E2E_USER_ERROR); } elseif ($_fp_error == FP_NO_ID_OR_NEW) { } else { e2_error ($_strings['er--error-occurred']); } e2_go_to (e2_compose_url ('e2m_write')); die; } $note = e2_note_by_id ($note_id); if ($note['IsPublished']) { e2_go_to (e2_compose_url ('e2m_note', array ('*note' => $note))); } else { e2_go_to (e2_compose_url ('e2m_draft', array ('*note' => $note))); } die; } function e2s_note_publish () { global $_strings, $_config, $settings; $note_id = false; if (array_key_exists ('note-id', $_POST)) { $note_id = $_POST['note-id']; $stamp_posted = false; $note_record = e2_note_by_id ($note_id); $alias_try_set = $note_record['OriginalAlias']; $original_timestamp = $note_record['Stamp']; $reset_timestamp = !$note_record['IsExternal']; $note_record['ID'] = $note_id; $note_record['IsVisible'] = 1; $note_record['IsPublished'] = 1; $note_record['IsCommentable'] = (int) $settings['comments']['default_on']; $note_record['IsFavourite'] = 0; if (array_key_exists ('browser-offset', $_POST)) { $timezone = e2_timezone_from_posted_offset (@$_POST['browser-offset']); } else { $timezone = false; } if ($stamp_posted and $stamp = e2_time_string_to_stamp ($stamp_posted, $timezone)) { $note_record['Stamp'] = $stamp; } elseif ($reset_timestamp) { $note_record['Stamp'] = time (); } else { $note_record['Stamp'] = $original_timestamp; } e2_index_noterec ($note_record); if ($timezone) { $note_record['Offset'] = (int) $timezone['offset']; $note_record['IsDST'] = (int) $timezone['is_dst']; } e2_drop_caches_for_note_($note_id); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); if (e2_update_record ('Notes', $note_record)) { $alias = ''; if ($alias_try_set or $alias_try_set === '0') { $alias = e2_find_or_set_available_alias ('set', ENTITY_TYPE_NOTE, $note_id, $alias_try_set); $note_record['OriginalAlias'] = $alias; } if ($alias != $alias_try_set) { e2_update_record ('Notes', $note_record); } if (e2_noterec_is_visible ($note_record)) { e2_broadcast_noterec_async ($note_record); } e2_go_to (e2_compose_url ('e2m_note', array ('*note' => $note_record))); die; } else { e2_go_back (); die; } } e2_go_to (); die; } function e2_delete_note_by_id ($note_id, $is_draft = -1) { global $_config; e2_drop_caches_for_note_($note_id); if ($is_draft or $is_draft === -1) { @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } if (!$is_draft or $is_draft === -1) { @unlink (CACHE_FILENAME_FAVS); } if (e2_mysql_query ( "DELETE FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `ID` = '".((int) $note_id)."'" )) { e2_unindex_note_by_id ($note_id); e2_mysql_query ( "DELETE FROM `". $_config['db_table_prefix'] . "Aliases` ". "WHERE `EntityID`=". ((int) $note_id) ); e2_mysql_query ( "DELETE FROM `". $_config['db_table_prefix'] . "NotesKeywords` ". "WHERE `NoteID`=". ((int) $note_id) ); return true; } } function e2s_note_delete () { global $_strings, $_config; $note_id = $_POST['note-id']; $is_draft = (bool) $_POST['is-draft']; $note_record = e2_note_by_id ($note_id); $unbroadcast_spawn_url = e2_compose_url ('e2m_note_broadcast', array ('*note' => $note_record)); if (e2_delete_note_by_id ($note_id, $is_draft)) { e2_spawn ($unbroadcast_spawn_url); if ($is_draft) { e2_go_to (e2_compose_url ('e2m_drafts')); } else { e2_go_to (); } } die; } function e2j_note_livesave () { die (e2fp_note ('ajaxresult')); } function e2_package_note ($note, $cache_only = false) { global $settings, $_config, $_superconfig, $_candy, $_current_tag, $server_name, $prev_date, $full_blog_url; if (!is_numeric ($note['_']['_id'])) return false; $note_cache_file = e2_note_cache_filename_with_id_($note['_']['_id']); $note_ctree = null; if (CACHE_NOTES and is_file ($note_cache_file)) { $note_ctree = @unserialize (file_get_contents ($note_cache_file)); } if (__LOG) __log ('Notes: package note <'. $note['_']['_id'] .'>...'); $stopwatch_n = getmicrotime (); if (CACHE_NOTES and is_array ($note_ctree)) { if (__LOG) __log ('Notes: retrieve cached ctree'); $out = $note_ctree; } else { if (__LOG) __log ('Notes: assemle cacheable ctree...'); if (__LOG) __log ('Notes: formatter ID = '. $note['FormatterID']); $formatinfo = e2_format_with_formatter ($note['FormatterID'], @$note['Text'], 'full'); $out['title'] = e2_kavychki (htmlspecialchars ($note['Title'], ENT_NOQUOTES, HSC_ENC)); $out['text'] = $formatinfo['text-final']; $out['summary'] = e2_summarize ($out['text']); $out['format-info'] = $formatinfo['meta']; $out['time'] = array ((int) $note['Stamp'], e2_note_timezone ($note)); $out['last-modified'] = array ((int) $note['LastModified'], e2_note_timezone ($note)); $out['last-ip'] = $note['IP']; $out['published?'] = (bool) $note['IsPublished']; $out['commentable?'] = (bool) ($note['IsCommentable'] && $note['IsPublished']); $out['favourite?'] = (bool) ($note['IsFavourite'] && $note['IsPublished']); $out['visible?'] = e2_noterec_is_visible ($note); $out['scheduled?'] = false; $source_note_data = @$note['SourceNoteData']; $source_note_data = @json_decode ($source_note_data, true); $out['source-main-image-url'] = @$source_note_data['og_images'][0]; if (is_array ($formatinfo['meta']['resources-detected'])) { e2_provide_data_for_resources_async ($formatinfo['meta']['resources-detected']); } if (!$out['published?']) $out['time'] = $out['last-modified']; $out['og-images'] = e2_og_images ( 'note', $note['_']['_id'], $out['format-info']['resources-detected'] ); $tagrecs = e2_tagrecs_by_note_id ($note['ID']); $tags = array (); foreach ($tagrecs as $i => $tagrec) { $out['og-images'] = array_merge ( $out['og-images'], e2_og_images ('tag', $tagrec['ID'], array ()) ); $tag['name'] = htmlspecialchars ($tagrec['Keyword'], ENT_NOQUOTES, HSC_ENC); $tag['href'] = e2_compose_url ('e2m_tag', array ('*tag' => $tagrec)); $tags[] = $tag; } $out['tags'] = $tags; if (@in_array (SYSTEM_LIBRARY_FOLDER. 'jouele/jouele.js', $formatinfo['meta']['links-required'])) { $out['playlist?'] = true; } $comments_count = e2_note_comments_count_by_id ($note['ID']); if ($out['published?']) { $out['comments-count'] = $comments_count; $out['your-comment-href'] = ( e2_compose_url ('e2m_note_comment', array ('*note' => $note)) ); } $note_ctree = $out; if (CACHE_NOTES) @write_file ($note_cache_file, serialize ($note_ctree)); } if ($cache_only) { if (__LOG) __log ('Notes: short-track package for caching only'); if (__LOG) __log ('Notes: package note done in '. round (getmicrotime () - $stopwatch_n, 3)); return $out; } if (__LOG) __log ('Notes: continue with the uncacheable, '. round (getmicrotime () - $stopwatch_n, 3) .' so far...'); $out['commentable-now?'] = e2_note_is_ok_for_comments ($note); if (array_key_exists ('comments-count', $out)) { $out['comments-count-text'] = e2l_get_string ('gs--n-comments', array ( 'number' => $out['comments-count'] )); } foreach ($out['tags'] as $k => $v) { $out['tags'][$k]['current?'] = (bool) ($out['tags'][$k]['name'] == $_current_tag); } $e2m_what = $note['IsPublished'] ? 'e2m_note' : 'e2m_draft'; $out['href'] = e2_compose_url ($e2m_what, array ('*note' => $note)); if ($note['IsPublished']) { if ($note['OriginalAlias']) { $out['href-original'] = e2_compose_url ('e2m_note', array ('alias' => $note['OriginalAlias'])); } else { $tmpnote = $note; $tmpnote['__noalias!'] = true; $out['href-original'] = e2_compose_url ('e2m_note', array ('*note' => $tmpnote)); } } $out = array_merge ($out, e2_note_source_info ($note, true)); $out['comments-link?'] = (bool) ( $note['IsPublished'] && (e2_note_is_ok_for_comments ($note) or ($out['comments-count'] > 0)) && ('e2m_note' != $_candy) ); if (e2_secure ()) { $new_comments_count = e2_note_comments_count_new_by_id ($note['ID']); $out['new-comments-count'] = $new_comments_count; $out['new-comments-count-text'] = e2l_get_string ('gs--comments-n-new', array ( 'number' => $new_comments_count )); if ($note['IsPublished']) { if ($note['IsFavourite']) { $out['favourite-toggle-href'] = e2_compose_url ( 'e2m_note_flag_favourite', array ('*note' => $note, 'value' => 0) ); } else { $out['favourite-toggle-href'] = e2_compose_url ( 'e2m_note_flag_favourite', array ('*note' => $note, 'value' => 1) ); } } if (!@$_config['read_only']) { $out['edit-href'] = e2_compose_url ( 'e2m_note_edit', array ('*note' => $note) ); $edit_href = $out['edit-href']; } } if ($settings['appearance']['show_sharing_buttons']) { $social_networks = $_config['share_to']; $available_networks = '|twitter|facebook|gplus|vkontakte|telegram|linkedin|whatsapp|'; if (@$_config['share_to_twitter_via']) { $data['twitter']['via'] = $_config['share_to_twitter_via']; } if (count ($out['og-images']) > 0) { $media = $out['og-images'][0]; $available_networks .= 'pinterest|'; $data['pinterest']['media'] = $media; } $out['shareable?'] = false; foreach (explode (',', $social_networks) as $social_network) { $social_network = trim ($social_network); if (strstr ($available_networks, '|'. $social_network. '|')) { $out['shareable?'] = true; $out['share-to'][$social_network]['share?'] = true; if ($data[$social_network]) { $out['share-to'][$social_network]['data'] = $data[$social_network]; } } } } if (array_key_exists ('_', $note)) $out['_'] = $note['_']; if (__LOG) __log ('Notes: package note done in '. round (getmicrotime () - $stopwatch_n, 3)); return $out; } function e2_note_by_id ($id) { global $_strings, $_config; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `ID` = '".$id."'" )) { $tmp = e2_mysql_result_as_array (); if (count ($tmp) > 0) { return $tmp[0]; } else { return false; } } else { e2_error ($_strings['er--cannot-get-post-from-db'], E2E_DATABASE_ERROR); e2_go_back (); die; } } function e2_note_actions_count_by_id ($note_id, $action) { global $_config; if (e2_mysql_query ( "SELECT SUM(`". $action ."`) ". $action ." ". "FROM `". $_config['db_table_prefix'] . "Actions` ". "WHERE `EntityID` = ". $note_id )) { $tmp = e2_mysql_result_as_array (); if (count ($tmp) > 0) { return $tmp[0][$action]; } else { return false; } } else { return false; } } function e2_near_note ($note, $nextprev, $published = 1) { global $_strings, $_config; $rel = ($nextprev == 'next')?'>':'<'; $desc_maybe = ($nextprev == 'next')?'':'DESC '; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=". $published ." ". "AND `Stamp` ". $rel ." '". $note['Stamp'] ."' ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY STAMP ". $desc_maybe . "LIMIT 1" )) { $tmp = e2_mysql_result_as_array (); if (count ($tmp) > 0) return $tmp[0]; else return FALSE; } else { e2_error ($_strings['er--cannot-get-post-from-db'], E2E_DATABASE_ERROR); e2_go_back (); die; } } function e2_list_lastmodifies_as_json_by_ids_csv ($ids_csv) { global $_config; if (__LOG) __log ('Lastmodifieds for Local Copier'); if (CACHE_LASTMODIFIEDS and is_file (CACHE_FILENAME_LASTMODIFIEDS)) { $lastmodifieds_cached_info = @unserialize (file_get_contents (CACHE_FILENAME_LASTMODIFIEDS)); if ($lastmodifieds_cached_info['ids_csv'] == $ids_csv) { if (__LOG) __log ('Returned from cache'); return $lastmodifieds_cached_info['lastmodifieds_json']; } } $where = 'WHERE `ID`='. str_replace (',', ' OR `ID`=', $ids_csv); $lastmodifieds = array (); if (e2_mysql_query ( "SELECT `ID`, `LastModified` ". "FROM `". $_config['db_table_prefix'] . "Notes` ". $where )) { if (__LOG) __log ('Requested from DB'); $result = e2_mysql_result_as_array (); foreach ($result as $k => $v) { $lastmodifieds[(int) $v['ID']] = (int) $v['LastModified']; } } $lastmodifieds_json = json_encode ($lastmodifieds); if ($lastmodifieds_json == '[]') $lastmodifieds_json = '{}'; $lastmodifieds_cached_info = array ( 'ids_csv' => $ids_csv, 'lastmodifieds_json' => $lastmodifieds_json, ); if (CACHE_LASTMODIFIEDS) { write_file (CACHE_FILENAME_LASTMODIFIEDS, serialize ($lastmodifieds_cached_info)); } return $lastmodifieds_json; } function e2_notes_by_criteria ($data) { global $settings, $page, $_strings; $q = $data['query']; if (isset ($data['page']) and $data['page'] < 1) return e2_error404_mode (); $items_per_page = $settings['appearance']['notes_per_page']; $pages = array (); $total = false; if (isset ($data['page'])) { $page = $data['page']; $q .= ' LIMIT '.($data['page']-1)*$items_per_page.', '.$items_per_page; $q0 = str_replace ('SELECT *', 'SELECT count(*)', $data['query']); if (e2_mysql_query ($q0)) { $result = e2_mysql_result_as_array (); $total = $result[0]['count(*)']; $total_pages = ceil ($total/$items_per_page); if ($page > $total_pages and $page != 1) { return e2_error404_mode (); } $pages['count'] = $total_pages; $pages['this'] = $page; $pages['timeline?'] = true; $pages['earlier-title'] = $_strings['gs--earlier']; $pages['later-title'] = $_strings['gs--later']; $tmpparams = $data['parameters']; if ($page < $total_pages) { $tmpparams['page'] = $page + 1; $pages['earlier-href'] = e2_compose_url ($data['candy'], $tmpparams); } if ($page > 1) { $tmpparams['page'] = $page - 1; $pages['later-href'] = e2_compose_url ($data['candy'], $tmpparams); } } else { return array (); } } $notes = array (); if (e2_mysql_query ($q)) { $result = $result_0 = e2_mysql_result_as_array (); if (@$data['query-returns-only-ids']) { $result = array (); $is_authorized = e2_secure (); foreach ($result_0 as $note) { $note = e2_note_by_id ($note['ID']); if ($note['IsPublished'] and e2_noterec_is_visible ($note, $is_authorized)) { $result[] = $note; } } } foreach ($result as $k => $note) { $note['_']['_id'] = $note['ID']; $note['_']['_ord'] = $k; $note['_']['_ord_max'] = count ($result) - 1; $notes[] = e2_package_note ($note); } } else { return array (); } $thenotes = $notes; if (!isset ($data['show-all-notes']) or @$data['show-all-notes'] != true) { $thenotes = array_slice ($notes, 0, $items_per_page); } if ($total === false) $total = count ($thenotes); if (!count ($notes) and array_key_exists ('nothing', $data)) { $ret['nothing'] = $data['nothing']; } $blindly_transferable_parameters = array ( 'class', 'superheading', 'heading', 'title', 'search-related-tag', ); foreach ($blindly_transferable_parameters as $blindly_transferable_parameter) { if (array_key_exists ($blindly_transferable_parameter, $data)) { $ret[$blindly_transferable_parameter] = $data[$blindly_transferable_parameter]; } } if ($total) { $totalstr = e2l_get_string ( 'pt--n-posts', array ('number' => $total) ); } else { $totalstr = $_strings['pt--no-posts']; } if (array_key_exists ('maximum-notes', $data) and $total >= $data['maximum-notes']) { $totalstr = $_strings['gs--many-posts']; } foreach (array ('title', 'heading', 'superheading') as $headingster) { if (strstr ($data[$headingster], '%total%')) { $ret[$headingster] = str_replace ('%total%', $totalstr, $data[$headingster]); } } $ret['notes'] = $thenotes; $ret['pages'] = $pages; return $ret; } function e2_all_notes_by_ymd ($y, $m, $d = false) { global $_config; list ($ww_start, $ww_end) = e2_boundaries_worldwide ($y, $m, $d); if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `IsPublished` AND (`Stamp` BETWEEN " .$ww_start. " AND " .$ww_end. ")". "ORDER BY Stamp" )) { $result = e2_mysql_result_as_array (); $number = 1; $ret = array (); foreach ($result as $candidate) { if (is_numeric ($d)) { $condition = ((int) $y) .'/'. ((int) $m) .'/'. ((int) $d) == e2_format_dt_of_timezone ('Y/n/j', $candidate['Stamp'], e2_note_timezone ($candidate)); } elseif (is_numeric ($m)) { $condition = ((int) $y) .'/'. ((int) $m) == e2_format_dt_of_timezone ('Y/n', $candidate['Stamp'], e2_note_timezone ($candidate)); } else { $condition = ((int) $y) == e2_format_dt_of_timezone ('Y', $candidate['Stamp'], e2_note_timezone ($candidate)); } if ($condition) { if (is_numeric ($d)) { $candidate['day_number'] = $number; } $ret[] = $candidate; $number ++; } } return $ret; } else { return false; } } function e2_published_noterec_with_alias_($alias) { if ($aliasrec = e2_aliasrec_of_alias_($alias)) { $note = e2_note_by_id ($aliasrec['EntityID']); if ($note['IsPublished']) return $note; } } function e2_published_noterec_with_parameters_($parameters = array ()) { $noterec = e2_noterec_with_parameters_($parameters); if ($noterec['IsPublished']) return $noterec; } function e2_noterec_with_parameters_($parameters = array ()) { global $_config; $note = false; $oalias_param = false; if (@$parameters['oalias'] !== '') $oalias_param = $parameters['oalias']; if ($oalias_param !== '') { if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `OriginalAlias` = '". $oalias_param ."' ". "AND `IsPublished` = 0" )) { $note = e2_mysql_result_as_array (); if (count ($note) == 1) { $note = @$note[0]; if ($note) return $note; } } } $draft_param = false; if (@$parameters['draft'] !== '') $draft_param = $parameters['draft']; if (@$parameters['draft2'] !== '') $draft_param = $parameters['draft2']; if ($draft_param) { $note = e2_note_by_id ($draft_param); return $note; } if (@$parameters['alias'] !== '') { if ($aliasrec = e2_aliasrec_of_alias_(@$parameters['alias'])) { if ($aliasrec['EntityType'] == ENTITY_TYPE_NOTE) { $note = e2_note_by_id ($aliasrec['EntityID']); if ($note['IsPublished']) return $note; } } } $noterecs = e2_all_notes_by_ymd ($parameters['year'], $parameters['month'], $parameters['day']); if (@$noterecs[$parameters['day-number'] - 1]) { return $noterecs[$parameters['day-number'] - 1]; } } function e2q_insert_note ($title, $text, $timezone, $uploads_psa) { global $_config; e2_notes_count_drop_caches (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); $noterec = array ( 'Title' => $title, 'Text' => $text, 'FormatterID' => $_config['default_formatter'], 'OriginalAlias' => e2_find_or_set_available_alias ('find', ENTITY_TYPE_UNSPECIFIED, '', $title), 'Uploads' => $uploads_psa, 'Stamp' => (int) time (), 'LastModified' => (int) time (), ); if ($timezone and is_array ($timezone)) { $noterec['Offset'] = (int) $timezone['offset']; $noterec['IsDST'] = (int) $timezone['is_dst']; } if (($noterec = e2_insert_record ('Notes', $noterec)) !== false) { return $noterec['ID']; } } function e2_time_string_to_stamp ($time_string, $timezone) { $dateregexp = '/^ *(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4}) +(\d{1,2})\:(\d{1,2})\:(\d{1,2}) *$/'; if (preg_match ($dateregexp, $time_string, $m)) { $stamp = gmmktime ($m[4], $m[5], $m[6], $m[2], $m[1], $m[3]); $stamp -= e2_timezone_gmt_offset_of_timezone ($timezone, $stamp); return $stamp; } else { return false; } } function e2fp_note ($result_type = '') { global $_fp_error, $_config, $_e2utf8__unformat_htmlentity_neasden, $_db; $_fp_error = false; $note_id = $title = $tags = $text = $old_tags_hash = ''; if (array_key_exists ('note-id', $_POST)) $note_id = $_POST['note-id']; if (array_key_exists ('title', $_POST)) $title = trim ($_POST['title']); if (array_key_exists ('tags', $_POST)) $tags = $_POST['tags']; if (array_key_exists ('text', $_POST)) $text = trim ($_POST['text'], "\r\n"); if (array_key_exists ('old-tags-hash', $_POST)) $old_tags_hash = $_POST['old-tags-hash']; if (is_array ($tags)) $tags = implode (', ', $tags); $tags = trim ($tags); if ($note_id == 'new') { $_e2utf8__unformat_htmlentity_neasden = ($_config['default_formatter'] == 'neasden'); } else { $_e2utf8__unformat_htmlentity_neasden = ($_POST['formatter-id'] == 'neasden'); } $notes_status = e2_table_status('Notes'); if (stripos($notes_status['Collation'], 'utf8mb4') !== 0) { $title = e2_question_long_utf8_chars ($title); $tags = e2_question_long_utf8_chars ($tags); $text = e2_question_long_utf8_chars ($text, true); } $text_d = $text; $text_d = str_replace ("\n", '\n'."\n", $text_d); $text_d = str_replace ("\r", '\r'."\r", $text_d); $tags_array = e2_smart_explode (',', $tags, 'sort'); $tags = implode (', ', $tags_array); $new_tags_hash = md5 ($tags); if (array_key_exists ('browser-offset', $_POST)) { $timezone = e2_timezone_from_posted_offset (@$_POST['browser-offset']); } else { $timezone = false; } $stamp_original = @$_POST['old-stamp']; $stamp_posted = @$_POST['stamp']; $alias = @$_POST['alias']; if ($note_id != 'new') { $noterec_was = e2_note_by_id ($note_id); } else { $noterec_was = array (); } if ($note_id) { if ($title != '' and $text != '') { if ($note_id == 'new') { $uploads_psa = ''; if (is_file (USER_FOLDER . 'new-uploads.psa')) { $uploads_psa = @file_get_contents (USER_FOLDER . 'new-uploads.psa'); } if ($note_id = e2q_insert_note ($title, $text, $timezone, $uploads_psa)) { @unlink (USER_FOLDER . 'new-uploads.psa'); $note_candy = 'e2m_draft'; $note_parameters = array ( '*note' => e2_note_by_id ($note_id), ); $ajaxresult = '{'. '"status": "created", '. '"id": "'. $note_id .'", '. '"note-url": "'. e2_compose_url ($note_candy, $note_parameters) .'", '. '"note-edit-url": "'. e2_compose_url ('e2m_note_edit', $note_parameters) .'"'. '}'; $result = (int) $note_id; } else { $ajaxresult = '{"status": "error", "message": "Cannot create record"}'; $result = false; } } else { e2_drop_caches_for_note_($note_id); if (!$noterec_was['IsPublished']) { @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } $noterec_changed = $noterec_was; $noterec_changed['ID'] = $note_id; $noterec_changed['Title'] = $title; $noterec_changed['Text'] = $text; $noterec_changed['FormatterID'] = $noterec_was['FormatterID']; $noterec_changed['LastModified'] = time (); $noterec_changed['IsIndexed'] = '1'; if ($stamp_original != $stamp_posted) { if ($stamp = e2_time_string_to_stamp ($stamp_posted, $timezone)) { $noterec_changed['Stamp'] = min ($stamp, time ()); } else { unset ($stamp); } } $newalias = $alias; if ($alias) { $alias_source = $alias; } elseif (!$noterec_was['IsPublished']) { $alias_source = $title; } else { $alias_source = ''; } if ($noterec_was['IsPublished']) { $newalias = e2_find_or_set_available_alias ( 'set', ENTITY_TYPE_NOTE, $note_id, $alias_source ); $note_candy = 'e2m_note'; $note_parameters = array ( '*note' => $noterec_changed, 'alias' => $newalias, ); } else { $alias_set_ok = true; $newalias = e2_find_or_set_available_alias ('find', ENTITY_TYPE_NOTE, $note_id, $alias_source); $noterec_changed['OriginalAlias'] = $newalias; $note_candy = 'e2m_draft'; $note_parameters = array ( '*note' => $noterec_changed, 'alias' => $newalias, ); } $resource_mentions = e2_detect_resources_in_text ( $noterec_changed['FormatterID'], $noterec_changed['Text'], 'full' ); if (count ($resource_mentions) > 0) { e2_provide_data_for_resources_async ($resource_mentions); } if (e2_update_record ('Notes', $noterec_changed)) { if ($noterec_changed['IsPublished']) { e2_index_noterec ($noterec_changed); e2_broadcast_noterec_async ($noterec_changed); } $ajaxresult = '{'. '"status": "saved", '. '"new-alias": "'. $newalias .'", '. '"note-url": "'. e2_compose_url ($note_candy, $note_parameters) .'", '. '"note-edit-url": "'. e2_compose_url ('e2m_note_edit', $note_parameters) .'"'. '}'; $result = (int) $note_id; } else { $ajaxresult = '{"status": "error", "message": "Cannot update record ('. mysqli_error (). ')"}'; $result = false; } } if ($new_tags_hash != $old_tags_hash) { e2q_delete_tagbindings (array ('NoteID' => $note_id)); foreach ($tags_array as $tag) { $tag_record = e2_keyword_by_name ($tag); if (!$tag_record) { $tag_record['ID'] = e2q_insert_tag ($tag); } e2_mysql_query ( "INSERT INTO `". $_config['db_table_prefix'] . "NotesKeywords` ". "(`NoteID`, `KeywordID`) ". "VALUES (". ((int) $note_id) .", ". ((int) $tag_record['ID']). ")" ); } } if ( $result_type != 'ajaxresult' and $result and $_POST['instant-publish'] == 'yes' ) { $_POST['note-id'] = $note_id; e2s_note_publish (); } } else { $ajaxresult = '{"status":"error", "message": "Title or text is empty"}'; $_fp_error = FP_TITLE_OR_TEXT_EMPTY; $result = false; } } else { $ajaxresult = '{"status":"error", "message": "No note id/new specified"}'; $_fp_error = FP_NO_ID_OR_NEW; $result = false; } e2_spawn (e2_compose_url ('e2s_dump', array ())); if ($result_type == 'ajaxresult') return $ajaxresult; else return $result; } function e2_notes_count_generic ($pub_flag, $vis_flag) { global $_config; if (!($pub_flag and $vis_flag) and !e2_secure ()) { die ('API MISUSE: e2_notes_count_generic cannot be called for invisible notes or drafts unsecurely :-('); } if (!is_bool ($pub_flag) or !is_bool ($vis_flag)) { die ('API MISUSE: e2_notes_count_generic must be called with bool params :-('); } if (!$pub_flag and !$vis_flag) { die ('API MISUSE: e2_notes_count_generic called with nonsensical parameters'); } $cache_filename = CACHES_FOLDER . 'notes-count-p'. (int) $pub_flag . ($pub_flag ? ('v'. (int) $vis_flag) : '') . '.txt'; $result = false; if (CACHE_NOTES_COUNTS and is_file ($cache_filename)) { $result = @file_get_contents ($cache_filename); } if (is_numeric ($result) and $result > 0) { return $result; } else { e2_mysql_query ( "SELECT COUNT(*) As NotesCount FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `IsPublished`=". (int) $pub_flag. " ". ($pub_flag ? ( "AND `IsVisible`=". (int) $vis_flag ) : "") ); $result = e2_mysql_result_as_array (); $result = $result[0]['NotesCount']; if ($result) { if (CACHE_NOTES_COUNTS) write_file ($cache_filename, $result); return $result; } else { return null; } } } function e2_summarize ($text) { $summary = $text; $summary = preg_match ( '/^(\<\/div\>)?\<p( class\=\"lead\")?\>(.*)\<\/p\>$/m', $summary, $matches ); $summary = $matches[3]; if (!$summary) $summary = $text; $summary = str_replace (array ( '<p>', '<blockquote>', '<ul>', '<ol>', '<br />', ), "\n", $summary); $summary = trim (strip_tags ($summary)); if (strpos ($summary, "\n") !== false) { $summary = substr ($summary, 0, strpos ($summary, "\n")); $summary = trim ($summary, ' :.()'."\n"); } if (preg_match ('/^(.{100,}?)[:.!?()]|'."\n".'/s', $summary, $matches)) { $summary = trim ($matches[0], ' :.()'."\n"); } if (preg_match ('/^(.{150,}?)[:.!?(),]/s', $summary, $matches)) { $summary = trim ($matches[0], ' :.()'."\n"); } if (preg_match ('/^(.{200,}?)[:.!?(), ]/s', $summary, $matches)) { $summary = trim ($matches[0], ' :.()'."\n"); } if (in_array ($summary[strlen ($summary) - 1], array (',', ' '))) { $summary = trim ($summary, ', '). '...'; } if (mb_strlen ($summary) > 250) { $summary = mb_substr ($summary, 0, 250). '...'; } if ($summary[-1] == ':') $summary = mb_substr ($summary, 0, -1); return $summary; } function e2_noterec_is_visible ($noterec, $is_authorized = false) { if ($is_authorized) return true; return $noterec['IsVisible'] and $noterec['Stamp'] <= time (); } function e2_and_note_visibility_check_sql ($is_authorized = false) { if ($is_authorized) { return ''; } else { return 'AND (n.`IsVisible` = 1 AND n.`Stamp` <= '. time () .') '; } } function e2_populate_read_counts_in_notes_ctree_($notes_ctree) { global $_config; $note_ids = array (); foreach ($notes_ctree as $k => $note_ctree) { $note_ids[] = "(`EntityID` = ". $note_ctree['_']['_id'] . ")"; } $note_ids = implode (' OR ', $note_ids); if (e2_mysql_query ( "SELECT `EntityID`, SUM(`ReadCount`) ReadCount ". "FROM `". $_config['db_table_prefix'] . "Actions` ". "WHERE ". $note_ids ." ". "GROUP BY `EntityID`" )) { $tmp = e2_mysql_result_as_array (); foreach ($tmp as $pair) { $counts_by_id[$pair['EntityID']] = $pair['ReadCount']; } } foreach ($notes_ctree as $k => $note_ctree) { $notes_ctree[$k]['read-count'] = $counts_by_id[$note_ctree['_']['_id']]; } return $notes_ctree; } define ('DRAFT_PREVIEW_LENGTH', 100); function e2m_drafts () { global $_strings, $_config; if (__LOG) __log ('Drafts list: working...'); $order_by = 'LastModified'; $the_notes = null; if (CACHE_DRAFTS and is_file (CACHE_FILENAME_DRAFTS)) { $the_notes = @unserialize (file_get_contents (CACHE_FILENAME_DRAFTS)); } if (CACHE_DRAFTS and is_array ($the_notes)) { if (__LOG) __log ('Drafts list: retrieve cached ctree'); } else { if (__LOG) __log ('Drafts list: assemle cacheable ctree...'); $the_notes = array (); if (__LOG) __log ('Drafts list: select by '. $order_by .'...'); if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `IsPublished`=0 ". "ORDER BY `". $order_by ."` DESC ". "LIMIT 1000" )) { $result = e2_mysql_result_as_array (); $notes = array (); foreach ($result as $k => $noterec) { $note = array (); $note['_']['_id'] = $noterec['ID']; $note['_']['_ord'] = $k; $note['_']['_ord_max'] = count ($result) - 1; $note['href'] = e2_compose_url ('e2m_draft', array ('*note' => $noterec)); $note['title'] = e2_kavychki (htmlspecialchars ($noterec['Title'], ENT_NOQUOTES, HSC_ENC)); if (isset ($note['image-href'])) unset ($note['image-href']); $noterec['_']['_id'] = $noterec['ID']; $noterec['_']['_ord'] = 0; $noterec['_']['_ord_max'] = 0; $note_pack = e2_package_note ($noterec, true); $note['_']['_resources'] = null; if ($noterec['FormatterID'] == 'neasden') { $note['_']['_resources'] = $note_pack['format-info']['resources-detected']; } elseif ($noterec['FormatterID'] == 'calliope') { $note['_']['_resources'] = e2_detect_resources_in_text ( $noterec['FormatterID'], $noterec['Text'], 'full' ); } $note = array_merge ($note, e2_note_source_info ($noterec, false)); $note['text-fragment'] = strip_tags ($note_pack['text']); $dotpos = false; if (mb_strlen ($note['text-fragment']) > DRAFT_PREVIEW_LENGTH) { $dotpos = mb_strpos ($note['text-fragment'], '.', DRAFT_PREVIEW_LENGTH); } if ($dotpos !== false) { $note['text-fragment'] = mb_substr ($note['text-fragment'], 0, $dotpos + 1); } $the_notes[] = $note; } if (CACHE_DRAFTS) write_file (CACHE_FILENAME_DRAFTS, serialize ($the_notes)); } } if (__LOG) __log ('Drafts list: put thumbnail without cache'); if ($the_notes) { foreach ($the_notes as $k => $v) { $the_notes[$k]['thumbs'] = e2_list_available_thumbnails_for_resources (@$v['_']['_resources']); } } if (__LOG) __log ('Drafts list: done'); $ret = array ( 'title' => $_strings['pt--drafts'], 'heading' => $_strings['pt--drafts'], ); if (count ($the_notes)) { $ret['drafts'] = $the_notes; } else { $ret['nothing'] = $_strings['gs--no-drafts']; } return $ret; } function e2m_draft ($parameters = array ()) { global $_strings, $_config, $server_name; $note = e2_noterec_with_parameters_($parameters); if (!$note) { $parameters['alias'] = $parameters['oalias']; unset ($parameters['oalias']); $note = e2_noterec_with_parameters_($parameters); if ($note) { $note_url = e2_compose_url ('e2m_note', array ('*note' => $note)); return e2_go_to ($note_url); } } if (!$note) return e2_error404_mode (); $note['_']['_id'] = $note['ID']; $note['_']['_ord'] = 0; $note['_']['_ord_max'] = 0; $note_pack = e2_package_note ($note); $publish_form = array ( '.note-id' => $note['ID'], 'form-action' => e2_compose_url ('e2s_note_publish'), 'submit-text' => $_strings['fb--publish-draft'], 'can-schedule?' => false, 'can-publish?' => !@$_config['read_only'], ); return array ( 'title' => $note['Title'] . ' ('. $_strings['wd--draft'] .')', 'notes' => array ('only' => $note_pack), 'form' => 'form-note-publish', 'form-note-publish' => $publish_form, ); } function e2m_draft_preview ($parameters = array ()) { return e2_error404_mode (); } function e2_draft_alias_use_count ($originalalias) { global $_config; if (__LOG) __log ('Drafts: find duplicate OriginalAliases...'); if (CACHE_DRAFTS_ALIAS_USE_COUNTS and is_file (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)) { $aliases_use_counts = @unserialize (file_get_contents (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS)); } if (CACHE_DRAFTS_ALIAS_USE_COUNTS and is_array ($aliases_use_counts)) { if (__LOG) __log ('Drafts: retrieve cached'); } else { if (__LOG) __log ('Drafts: assemle cacheable...'); $aliases_use_counts = array (); if (e2_mysql_query ( "SELECT `OriginalAlias` FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `IsPublished`=0 ". "ORDER BY `ID`" )) { $result = e2_mysql_result_as_array (); $notes = array (); foreach ($result as $k => $noterec) { @$aliases_use_counts[$noterec['OriginalAlias']] ++; } } if (CACHE_DRAFTS_ALIAS_USE_COUNTS) { write_file (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS, serialize ($aliases_use_counts)); } } return $aliases_use_counts[$originalalias]; } function e2drafts__preview_key ($note) { return md5 ($note['Text'] . $note['LastModified']); } $_url_map = array ( '@build' => 'e2://e2s_build', '@sync' => 'e2://e2s_sync', '@dump' => 'e2://e2s_dump', '@bsi' => 'e2://e2s_bsi_status', '@bsi/drop' => 'e2://e2s_bsi_drop', '@bsi/step' => 'e2://e2s_bsi_step', '@migrate' => 'e2://e2s_migrate', '@retrieve:url' => 'e2://e2s_retrieve', '@instantiate:version' => 'e2://e2s_instantiate', '@notify' => 'e2://e2s_notify', '@info' => 'e2://e2m_info', '@ajax/::' => 'e2://e2j_::', '@actions/::' => 'e2://e2s_::', '' => 'e2://e2m_frontpage?page=1', ':page' => 'e2://e2m_frontpage', 'rss' => 'e2://e2m_rss', 'json' => 'e2://e2m_json', 'sitemap.xml' => 'e2://e2m_sitemap_xml', ':year' => 'e2://e2m_year', ':year/:month' => 'e2://e2m_month', ':year/:month/:day' => 'e2://e2m_day', 'all' => 'e2://e2m_everything', ':note' => 'e2://e2m_note', ':note/comment' => 'e2://e2m_note_comment', ':note/edit' => 'e2://e2m_note_edit?is_published=1', ':note/favourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=1', ':note/unfavourite' => 'e2://e2m_note_flag_favourite?is_published=1&value=0', ':note/show' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=1', ':note/hide' => 'e2://e2m_note_flag?is_published=1&flag=IsVisible&value=0', ':note/discuss' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=1', ':note/quiet' => 'e2://e2m_note_flag?is_published=1&flag=IsCommentable&value=0', ':note/withdraw' => 'e2://e2m_note_withdraw?is_published=1', ':note/json' => 'e2://e2m_note_json', ':note/broadcast' => 'e2://e2m_note_broadcast', ':note/read' => 'e2://e2m_note_read', ':note/delete' => 'e2://e2m_note_delete?is_published=1', ':note/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=1', ':note/:unsubscr' => 'e2://e2m_unsubscribe?is_published=1', ':note/hitinfo' => 'e2://e2m_note_hitinfo?is_published=1', ':note/:comnum' => 'e2://e2m_comment', ':note/:comnum/edit' => 'e2://e2m_comment_edit', ':note/:comnum/important' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=1', ':note/:comnum/usual' => 'e2://e2m_comment_flag_ajax?flag=IsFavourite&value=0', ':note/:comnum/replace' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=1', ':note/:comnum/remove' => 'e2://e2m_comment_flag_ajax?flag=IsVisible&value=0', ':note/:comnum/spam' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=1', ':note/:comnum/good' => 'e2://e2m_comment_flag?flag=IsSpamSuspect&value=0', ':note/:comnum/wipe' => 'e2://e2m_comment_delete', ':note/:comnum/reply/edit' => 'e2://e2m_comment_reply', ':note/:comnum/reply/important' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=1', ':note/:comnum/reply/usual' => 'e2://e2m_comment_flag_ajax?flag=IsReplyFavourite&value=0', ':note/:comnum/reply/replace' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=1', ':note/:comnum/reply/remove' => 'e2://e2m_comment_flag_ajax?flag=IsReplyVisible&value=0', ':note/:comnum/reply/delete' => 'e2://e2m_comment_reply_delete', 'drafts' => 'e2://e2m_drafts', 'drafts/:draft' => 'e2://e2m_draft', 'drafts/:draft/edit' => 'e2://e2m_note_edit?is_published=0', 'drafts/:draft/show' => 'e2://e2m_note_flag?is_published=0&flag=IsVisible&value=1', 'drafts/:draft/hide' => 'e2://e2m_note_flag?is_published=0&flag=IsVisible&value=0', 'drafts/:draft/delete' => 'e2://e2m_note_delete?is_published=0', 'drafts/:draft/format/:formatter' => 'e2://e2m_note_use_formatter?is_published=0', 'drafts/:draft/:preview' => 'e2://e2m_draft_preview', 'sources' => 'e2://e2m_sources', 'sources/:source/trust' => 'e2://e2m_source_trust', 'sources/:source/premoderate' => 'e2://e2m_source_premoderate', 'sources/:source/ban' => 'e2://e2m_source_ban', 'sources/:source/forget' => 'e2://e2m_source_forget', 'tags' => 'e2://e2m_tags', 'tags/:tag' => 'e2://e2m_tag?page=1', 'tags/:tag/:page' => 'e2://e2m_tag', 'tags/:tag/rss' => 'e2://e2m_tag_rss', 'tags/:tag/json' => 'e2://e2m_tag_json', 'tags/:tag/edit' => 'e2://e2m_tag_edit', 'tags/:tag/delete' => 'e2://e2m_tag_delete', 'tags/:tag/pin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=1', 'tags/:tag/unpin' => 'e2://e2m_tag_flag_ajax?flag=IsFavourite&value=0', 'untagged' => 'e2://e2m_untagged', 'hot' => 'e2://e2m_most_commented', 'selected' => 'e2://e2m_favourites?page=1', 'selected/:page' => 'e2://e2m_favourites', 'found' => 'e2://e2m_found&query=', 'found/:query' => 'e2://e2m_found', 'new' => 'e2://e2m_write', 'install' => 'e2://e2m_install', 'settings' => 'e2://e2m_settings', 'settings/name' => 'e2://e2m_name_and_author', 'settings/database' => 'e2://e2m_database', 'settings/password' => 'e2://e2m_password?recovery-key=', 'settings/password-reset' => 'e2://e2m_password_reset', 'settings/password/:reset' => 'e2://e2m_password', 'settings/timezone' => 'e2://e2m_timezone', 'settings/sessions' => 'e2://e2m_sessions', 'settings/theme-preview' => 'e2://e2m_theme_preview?theme=', 'settings/theme-preview/:theme' => 'e2://e2m_theme_preview', 'settings/get-backup' => 'e2://e2m_get_backup', 'sign-in' => 'e2://e2m_sign_in', 'sign-out' => 'e2://e2m_sign_out', 'sign-in/:provider' => 'e2://e2m_gip_sign_in', 'sign-out/:provider' => 'e2://e2m_gip_sign_out', 'sign-in-done/:provider' => 'e2://e2m_gip_sign_in_callback', ); $_url_chunks = array ( '\:page' => 'page\-(?P<page>\d+)', '\:year' => '(?P<year>\d{4})', '\:month' => '(?P<month>\d{1,2})', '\:day' => '(?P<day>\d{1,2})', '\:note' => array ( 'all\/(?P<alias>[-a-zA-Z0-9]+)', '(?P<year>\d{4})\/(?P<month>\d{1,2})\/(?P<day>\d{1,2})\/(?P<day_number>\d+)', ), '\:draft' => array ( '(?P<oalias2>[-a-zA-Z0-9]+)\/(?P<draft2>\d+)', '(?P<oalias>[-a-zA-Z0-9]+)', '-\/(?P<draft>\d+)', ), '\:comnum' => 'comment\-(?P<comment_number>[0-9]+)', '\:file' => '(?P<file>.*?)', '\:tag' => '(?P<tag_alias>[-a-zA-Z0-9]+)', '\:query' => '(?P<query>.*?)', '\:provider' => '(?P<provider>.*?)', '\:version' => '\:(?P<version>\d+)', '\:source' => '\:(?P<source>.*?)', '\:picture' => '\:(?P<picture>.*?)', '\:unsubscr' => 'unsubscribe\:(?P<unsubscribe_email>.+?)\:(?P<unsubscribe_key>[0-9a-f]{32})', '\:reset' => 'reset\:(?P<recovery_key>[0-9a-f]{40})', '\:formatter' => '(?P<formatter>.*?)', '\:alias' => '(?P<newalias>[-a-zA-Z0-9]+)', '\:preview' => 'preview\:(?P<preview_key>[0-9a-f]{32})', '\:theme' => '(?P<theme>[-a-zA-Z0-9]+)', '\:source' => '(?P<source>\d+)', '\:url' => '\:(?P<url>[a-zA-Z0-9]+\=)', ); $_url_autoredirects = array ( '/^favo(?:u?)rites(\~.+)?$/i' => 'selected\\1', '/^favo(?:u?)rites\/(.+)/i' => 'selected/\\1', '/^keywords$/i' => 'tags', '/^keywords\/(.*)/i' => 'tags/\\1', '/^everything$/i' => 'all', '/^search\/(.+)/i' => 'found/\\1', '/^(\d{4}\/\d{1,2}\/\d{1,2}\/\d+)\/comments(\/?)$/i' => '\\1', '/^\~(\d+)/i' => 'page-\\1', '/\/?\~(\d+)/i' => '/page-\\1', ); function e2_autofix_url ($url) { global $_url_autoredirects, $folder_on_server; $url = preg_replace (array_keys ($_url_autoredirects), array_values ($_url_autoredirects), $url); if (preg_match ('/^([0-9]+)[.-]([0-9]+)[.-]([0-9]+)(.*)/', $url, $matches)) { if (2 == strlen ($matches[3])) $matches[3] = '20'.$matches[3]; return ($matches[3].'/'.$matches[2].'/'.$matches[1] . $matches[4]); } if (preg_match ('/^tags\-rss\/(.*?)\/?$/', $url, $matches)) { $tag = substr ($matches[1], strrpos ($matches[1], '/') + 1); return ('tags/'. $tag . '/rss/'); } return $url; } function e2_prepare_urls () { global $__synthetic_urls, $_config, $_superconfig; $__synthetic_urls = false; if ($_config['url_composition'] == 'auto') { if (function_exists ('apache_get_modules')) { if (in_array ('mod_rewrite', apache_get_modules ())) { $__synthetic_urls = true; } } } if ($_config['url_composition'] == 'synthetic') { $__synthetic_urls = true; } if (@$_superconfig['url_composition'] == 'synthetic') { $__synthetic_urls = true; } if (@$_superconfig['url_composition'] == 'real') { $__synthetic_urls = false; } } function e2_compose_url ($candy, $parameters = array ()) { global $_url_map, $_url_chunks, $_config, $__synthetic_urls, $_protocol, $server_name, $folder_on_server; $route_map = array_flip ($_url_map); if ( @$_config['preferred_domain_name'] and $_SERVER['HTTP_HOST'] != $_config['preferred_domain_name'] ) { $server_name = $_config['preferred_domain_name']; } $url = $_protocol .'://'. $server_name . $folder_on_server .'/'; $route = 'e2://'. $candy; if (array_key_exists ('page', $parameters)) { $page = $parameters['page']; } else { $page = 1; } if ($parameters) { $route .= '?'; $more_parameterses = array (); $remove_keys = array (); foreach ($parameters as $key => $value) { if ($key == '*note') { $remove_keys[] = $key; $more_parameterses[] = e2urls__expand_tricky_parameters_for_note_($value); } if ($key == '*tags') { $remove_keys[] = $key; $more_parameterses[] = e2urls__expand_tricky_parameters_for_tags_($value); } if ($key == '*tag') { $remove_keys[] = $key; $more_parameterses[] = e2urls__expand_tricky_parameters_for_tags_(array ($value)); } } foreach ($remove_keys as $key) unset ($parameters[$key]); foreach ($more_parameterses as $more_parameters) { $parameters = array_merge ($parameters, $more_parameters); } foreach ($parameters as $key => $value) { if (@$key[0] != '_') { $route .= $key .'='. urlencode ($value) .'&'; } } $route = substr ($route, 0, -1); } if (array_key_exists ($route, $route_map)) { if ($route_map[$route] !== '') $url .= $route_map[$route] .'/'; return $url; } else { $matching_candy_exists = false; foreach ($route_map as $test_route => $url_pattern) { $test_route_regex = $test_route; $test_route_regex = preg_quote ($test_route_regex, '/'); $test_route_info = parse_url ($test_route); $test_candy = $test_route_info['host']; $route_info = parse_url ($route); if (strstr ($test_route, '::')) { $route_without_query = $route_info['scheme'] .'://'. $route_info['host']; $test_route_regex = str_replace ('\:\:', '(.*)', $test_route_regex); $test_route_regex = '/^'. $test_route_regex .'$/s'; if (preg_match ($test_route_regex, $route_without_query, $matches)) { $path = str_replace ('::', $matches[1], $url_pattern); $path = str_replace ('_', '-', $path); $query = $route_info['query']; if ($__synthetic_urls and $query) { $url .= $path .'/?'. $query; } elseif ($__synthetic_urls) { $url .= $path .'/'; } elseif ($query) { $url .= '?go='. $path .'/&'. $query; } else { $url .= '?go='. $path .'/'; } return $url; } } $contradicts = false; if ($candy === $test_candy) { $matching_candy_exists = true; if ($test_route_info['query']) { $raw_parameters = explode ('&', $test_route_info['query']); foreach ($raw_parameters as $raw_parameter) { list ($key, $value) = explode ('=', $raw_parameter); $value = urldecode ($value); $key = str_replace ('_', '-', $key); if ( array_key_exists ($key, $parameters) and $parameters[$key] != $value ) { $contradicts = true; break; } } } if (!$contradicts) { if (preg_match_all ('/\:[\-a-z]+/i', $url_pattern, $matches)) { foreach ($matches[0] as $colon_param) { $colon_param_pattern_variants = $_url_chunks['\\'. $colon_param]; if (!is_array ($colon_param_pattern_variants)) { $colon_param_pattern_variants = array ($colon_param_pattern_variants); } $colon_param_pattern = $colon_param_pattern_variants[0]; foreach ($colon_param_pattern_variants as $colon_param_pattern) { $chunkregex = '/\(\?P\<(.*?)\>.*?\)/'; $all_parameters_are_passed = true; if (@preg_match_all ($chunkregex, $colon_param_pattern, $matches)) { $matches = $matches[1]; $all_parameters_are_passed = true; for ($i = 0; $i < count ($matches); ++ $i) { if ( !array_key_exists (str_replace ("_", "-", $matches[$i]), $parameters) or $parameters[str_replace ("_", "-", $matches[$i])] === '' ) { $all_parameters_are_passed = false; break; } } } if (!$all_parameters_are_passed) continue; $colon_param_expanded = @preg_replace_callback ( $chunkregex, function ($matches) use ($parameters) { return $parameters[str_replace ("_", "-", $matches[1])]; }, $colon_param_pattern ); $colon_param_expanded = stripslashes ($colon_param_expanded); $url_pattern_replaced = str_replace ($colon_param, $colon_param_expanded, $url_pattern); break; } $url_pattern = $url_pattern_replaced; } } $getparams = array (); if ($url_pattern) { if ($__synthetic_urls) { $url .= $url_pattern .'/'; } else { $getparams[] = 'go='. $url_pattern .'/'; } } foreach ($_GET as $k => $v) if (in_array ($k, array ('result', 'themeless'))) { $getparams[] = $k . ($v? ('='. urlencode ($v)) : ''); } if (count ($getparams)) { $url .= '?'. implode ('&', $getparams); } return $url; } } } if ($matching_candy_exists) { return $url; } else { die ('Cannot compose url for candy '. $candy); } } } function e2_resolve_url ($url) { global $_url_map, $_url_chunks, $_config, $_current_url, $__synthetic_urls, $_protocol, $server_name, $folder_on_server; $original_url = $url; $url = trim ($url, '/'); $url = e2_autofix_url ($url); if (__LOG) __log ($url); $parameters = array (); foreach ($_url_map as $test_url => $test_route) { $test_url_regex = $test_url; $test_url_regex = preg_quote ($test_url_regex, '/'); if (strstr ($test_url, '::')) { $test_url_regex = str_replace ('\:\:', '(.*)', $test_url_regex); $test_url_regex = '/^'. $test_url_regex .'$/s'; if (preg_match ($test_url_regex, $url, $matches)) { $call = str_replace ('-', '_', $matches[1]); $route = str_replace ('::', $call, $test_route); } } elseif (strstr ($test_url, ':')) { $url_chunks_unarrayed = array (); foreach ($_url_chunks as $k => $v) { if (is_array ($v)) { $url_chunks_unarrayed[$k] = '(?:(?:'. implode (')|(?:', $v) .'))'; } else { $url_chunks_unarrayed[$k] = $v; } } $test_url_regex = str_replace ( array_keys ($url_chunks_unarrayed), array_values ($url_chunks_unarrayed), $test_url_regex ); $test_url_regex = '/^'. $test_url_regex .'$/s'; if (preg_match ($test_url_regex, $url, $matches)) { $route = $test_route; foreach ($matches as $key => $value) if (!is_numeric ($key)) { $key = str_replace ('_', '-', $key); $parameters[$key] = $value; } } } else { if ($test_url == $url) { $route = $test_route; break; } } } $resolved = (bool) $route; if (!$route) $route = 'e2://e2m_404'; $route_info = parse_url ($route); $candy = $route_info['host']; if ($route_info['query']) { $raw_parameters = explode ('&', $route_info['query']); foreach ($raw_parameters as $raw_parameter) { list ($key, $value) = explode ('=', $raw_parameter); $value = urldecode ($value); $key = str_replace ('_', '-', $key); $parameters[$key] = $value; } } $ret = false; $parameters = e2urls__consolidate_tricky_parameters_($parameters); if ($resolved) { if ($_config['force_canonical_urls']) { $canonical_url = e2_compose_url ($candy, $parameters); list ($request_uri_sans_getparams, $the_getparams) = explode ('?', $_SERVER['REQUEST_URI'], 2); $used_url = $_protocol .'://'.$_SERVER['HTTP_HOST'] . $request_uri_sans_getparams; $used_url_2 = $_protocol .'://'.$_SERVER['HTTP_HOST'] . urldecode ($request_uri_sans_getparams); $the_getparams = explode ('&', $the_getparams); foreach ($the_getparams as $the_getparam) { list ($getparam_name, ) = explode ('=', $the_getparam); if ($getparam_name == 'go') { $used_url .= '?'. $the_getparam; $used_url_2 .= '?'. urldecode ($the_getparam); } } $_current_url = $used_url; if ($used_url != $canonical_url and $used_url_2 != $canonical_url) { e2_go_to ($canonical_url); } } if (is_callable ($candy)) { $ret = array ($candy, $parameters); } else { $ret = array (null, array ()); } } else { $ret = array (null, array ()); } return $ret; } function e2urls__expand_tricky_parameters_for_note_($noterec) { global $folder_on_server, $_config; if (!isset ($noterec['IsPublished'])) { return array (); } if (!$noterec['IsPublished']) { if ($noterec['OriginalAlias'] === '') { $parameters['draft'] = $noterec['ID']; } elseif (e2_draft_alias_use_count ($noterec['OriginalAlias']) == 1) { $parameters['oalias'] = $noterec['OriginalAlias']; } else { $parameters['draft2'] = $noterec['ID']; $parameters['oalias2'] = $noterec['OriginalAlias']; } $parameters['is-published'] = 0; return $parameters; } $parameters['is-published'] = 1; $id = $noterec['ID']; $stamp = $noterec['Stamp']; $timezone = e2_note_timezone ($noterec); if (!isset ($noterec['__noalias!'])) { if (isset ($noterec['alias'])) { $parameters['alias'] = $noterec['alias']; } else { $parameters['alias'] = e2_active_alias_for_page_(ENTITY_TYPE_NOTE, $noterec['ID']); if ($parameters['alias'] === null) unset ($parameters['alias']); } } if (array_key_exists ('alias', $parameters)) return $parameters; list ($y, $m, $d) = explode ('/', e2_format_dt_of_timezone ('Y/m/d', $stamp, $timezone) ); $parameters['year'] = $y; $parameters['month'] = $m; $parameters['day'] = $d; if (isset ($noterec['day_number'])) { $parameters['day-number'] = $noterec['day_number']; } else { list ($ww_day_start, ) = e2_boundaries_worldwide ($y, $m, $d); if (e2_mysql_query ( "SELECT `ID`, `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `IsPublished` = 1 AND (`Stamp` BETWEEN " .$ww_day_start. " AND " .$stamp. ") ". "ORDER BY `Stamp`" )) { $result = e2_mysql_result_as_array (); $number = 1; foreach ($result as $candidate) { if ( $y.'/'.$m.'/'.$d == e2_format_dt_of_timezone ('Y/m/d', $candidate['Stamp'], e2_note_timezone ($candidate)) ) { if ($candidate['ID'] == $id) { $ok = 1; break; } $number ++; } } if (@$ok != 1) { header ('HTTP/1.1 503 Service Unavailable'); die ('Candidates enumeration failed.'); } } $parameters['day-number'] = $number; } return $parameters; } function e2urls__expand_tricky_parameters_for_tags_($tagrecs) { $aliases = array (); $parameters = array (); foreach ($tagrecs as $tagrec) { $alias = ''; if (!isset ($tagrec['__noalias!'])) { if (isset ($tagrec['tag-alias'])) { $alias = $tagrec['tag-alias']; } else { $alias = e2_active_alias_for_page_(ENTITY_TYPE_TAG, $tagrec['ID']); } } $aliases[] = $alias? $alias : $tagrec['OriginalAlias']; } if (count ($tagrecs)) { $parameters['tag-alias'] = implode (',', $aliases); } return $parameters; } function e2urls__consolidate_tricky_parameters_($parameters) { if ( @$parameters['alias'] !== '' or ( @$parameters['year'] !== '' and @$parameters['month'] !== '' and @$parameters['day'] !== '' and @$parameters['day-number'] !== '' ) ) { if ($note = e2_published_noterec_with_parameters_($parameters)) { $parameters['*note'] = $note; } } if ( @$parameters['oalias'] !== '' or @$parameters['draft'] !== '' or @$parameters['oalias2'] !== '' or @$parameters['draft2'] !== '' ) { if ($note = e2_noterec_with_parameters_($parameters)) { $parameters['*note'] = $note; } } if ( @$parameters['tag-alias'] !== '' ) { $parameters['*tags'] = e2_tagrecs_with_parameters_($parameters); if (count ($parameters['*tags']) == 1) { $parameters['*tag'] = $parameters['*tags'][0]; } } return $parameters; } function e2m_tags () { global $_strings; $ret['title'] = $_strings['pt--tags']; $ret['heading'] = $_strings['pt--tags']; $tags = e2_tags_with_usage_info (); if (count ($tags) == 0) { $ret['nothing'] = $_strings['gs--no-tags']; } return $ret; } function e2m_tag ($parameters = array ()) { global $settings, $_config, $_current_tag, $_strings, $page, $full_blog_url; if (__LOG) __log ('Tag {'); if (array_key_exists ('*tags', $parameters)) { $keywords = $parameters['*tags']; } if (!$keywords[0]) return e2_error404_mode (); $keyword = $keywords[0]; $keyword_urlname = $parameters['tag-alias']; if (count ($keywords) == 1) { $_current_tag = $keyword['Keyword']; } $page = $parameters['page']; $pfx = $_config['db_table_prefix']; $items_per_page = $settings['appearance']['notes_per_page']; foreach ($keywords as $v) if ($v) { $where[] = "nk.KeywordID=". $v['ID']; } $where = '('.implode (' OR ', $where).')'; $is_authorized = e2_secure (); $where .= 'AND IsPublished=1 '; $where .= e2_and_note_visibility_check_sql ($is_authorized); $keywords_count = count ($keywords); $offset = ($page-1) * $items_per_page; $limit = $items_per_page; $sql = ( "SELECT SQL_CALC_FOUND_ROWS n.*, COUNT(*) ". "FROM `". $pfx ."Notes` n ". "JOIN `". $pfx ."NotesKeywords` nk ON nk.`NoteID` = n.`ID` ". "WHERE ". $where . "GROUP BY n.ID ". "HAVING COUNT(*)>=". $keywords_count ." ". "ORDER BY n.`Stamp` DESC ". "LIMIT ". $offset .", ". $limit ); $result = e2_mysql_query ($sql) ? e2_mysql_result_as_array () : []; $count_row = e2_mysql_query ("SELECT FOUND_ROWS() AS cnt") ? e2_mysql_result_as_array () : []; $total = $count_row ? (int) $count_row[0]['cnt'] : 0; $pages = array (); if ($total) { $total_pages = ceil ($total/$items_per_page); $pages['timeline?'] = true; $pages['count'] = $total_pages; $pages['this'] = $page; $pages['earlier-title'] = $_strings['gs--earlier']; $pages['later-title'] = $_strings['gs--later']; $tmpparams = $parameters; if ($page < $total_pages) { $tmpparams['page'] = $page + 1; $pages['earlier-href'] = e2_compose_url ('e2m_tag', $tmpparams); } if ($page > 1) { $tmpparams['page'] = $page - 1; $pages['later-href'] = e2_compose_url ('e2m_tag', $tmpparams); } } if ($total == 0) { if (!$is_authorized) { return e2_error404_mode (); } if ($page != 1) { return e2_error404_mode (); } } foreach ($result as $k => $note) { $note['_']['_id'] = $note['ID']; $note['_']['_ord'] = $k; $note['_']['_ord_max'] = count ($result) - 1; $notes[] = e2_package_note ($note); } if ($keywords_count == 1) { if ($is_authorized) { $the_tag['edit-href'] = e2_compose_url ( 'e2m_tag_edit', array ('tag-alias' => $keyword_urlname) ); } if ('' != $keyword['Description']) { $formatinfo = e2_format_with_default_formatter ($keyword['Description'], 'full'); $description = $formatinfo['text-final']; $the_tag['description'] = $description; $the_tag['description-format-info'] = $formatinfo['meta']; } $rss_href = e2_compose_url ('e2m_tag_rss', array ('tag-alias' => $keyword_urlname)); $json_href = e2_compose_url ('e2m_tag_json', array ('tag-alias' => $keyword_urlname)); e2_add_newsfeed ( 'rss', e2_blog_title () .': '. $keyword['Keyword'], $rss_href ); e2_add_newsfeed ( 'json', e2_blog_title () .': '. $keyword['Keyword'], $json_href ); $the_tag['og-images'] = e2_og_images ( 'tag', $keyword['ID'], $the_tag['description-format-info']['resources-detected'] ); } $num_notes_with_tag = ( e2l_get_string ('pt--n-posts', array ('number' => $total)). ' '. $_strings['gs--tagged'] ); $heading = array (); foreach ($keywords as $v) { $heading[] = $v['Keyword']; } $heading = implode (', ', $heading); $ret = array ( 'title' => e2_blog_title () .': '. $heading, 'superheading' => $num_notes_with_tag, 'heading' => $heading, 'pages' => $pages, 'notes' => $notes, ); if ($description) { $ret['summary'] = e2_summarize ($description); } if (count ($keywords) == 1) { $ret['tag'] = $the_tag; if (e2_secure ()) { $ret['related-edit-href'] = $the_tag['edit-href']; $ret['related-edit-title'] = $_strings['tt--edit-tag']; } } if (__LOG) __log ('} // Tag'); return $ret; } function e2m_tag_edit ($parameters = array()) { global $_strings; if (array_key_exists ('*tag', $parameters)) { $keyword = $parameters['*tag']; } if (!$keyword) return e2_error404_mode (); $resource_mentions = e2_detect_resources_in_text ( 'neasden', $keyword['Description'], 'full' ); $pasteable_uploads = e2_pasteable_thumbnails_for_editor ( 'tag', $keyword['ID'], $resource_mentions ); e2_register_unregistered_uploads ( 'Keywords', $keyword, $resource_mentions ); $space_usage = e2_space_usage (); $form_tag_edit = array ( '.tag-id' => $keyword['ID'], '.formatter-id' => 'neasden', 'form-action' => e2_compose_url ('e2s_tag_edit'), 'form-file-upload-action' => e2_compose_url ('e2j_file_upload'), 'form-file-remove-action' => e2_compose_url ('e2j_file_remove'), 'submit-text' => $_strings['fb--save-changes'], 'tag' => htmlspecialchars ($keyword['Keyword'], ENT_COMPAT, HSC_ENC), 'urlname' => htmlspecialchars ($parameters['tag-alias'], ENT_COMPAT, HSC_ENC), 'description' => htmlspecialchars ($keyword['Description'], ENT_COMPAT, HSC_ENC), 'uploads' => $pasteable_uploads, 'uploads-enabled?' => e2_uploads_enabled ($space_usage), 'favourite?' => (bool) $keyword['IsFavourite'], 'space-usage' => e2_space_usage_string ($space_usage), ); $form_tag_edit['.cache-sensitive-hash'] = md5 ( $form_tag_edit['tag'] . $form_tag_edit['urlname'] ); $ret = array ( 'title' => $_strings['pt--tag-edit'] .': '. $keyword['Keyword'], 'heading' => $_strings['pt--tag-edit'], 'form' => 'form-tag', 'form-tag' => $form_tag_edit, 'related-delete-href' => e2_compose_url ('e2m_tag_delete', array ('*tag' => $keyword)), ); return $ret; } function e2m_tag_flag_ajax ($parameters) { if (e2mh_tag_flag ($parameters)) { $new_parameters = $parameters; $new_parameters['value'] = !$parameters['value']; if ($parameters['value'] == 1) { $new_url = e2_compose_url ('e2m_tag_flag_ajax', $new_parameters); $ajaxresult = 'on-rehref|'. $new_url; } else { $new_url = e2_compose_url ('e2m_tag_flag_ajax', $new_parameters); $ajaxresult = 'off-rehref|'. $new_url; } } else { $ajaxresult = 'error'; } if (array_key_exists ('result', $_POST) and ($_POST['result'] == 'ajaxresult')) { die ($ajaxresult); } else { e2_go_to (e2_compose_url ('e2m_tag', $parameters)); die; } } function e2mh_tag_flag ($parameters) { if (array_key_exists ('*tag', $parameters)) { $keyword = $parameters['*tag']; } if (!$keyword) return e2_error404_mode (); @unlink (CACHE_FILENAME_FAVTAGS); @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_AUTHOR); $result = e2_update_record ('Keywords', array ( 'ID' => $keyword['ID'], $parameters['flag'] => (int) ($parameters['value'] == 1), )); return $result; } function e2m_tag_delete ($parameters = array()) { global $_strings; if (array_key_exists ('*tag', $parameters)) { $keyword = $parameters['*tag']; } if (!$keyword) return e2_error404_mode (); $form_tag_delete = array ( '.tag-id' => $keyword['ID'], 'caution-text' => e2l_get_string ('gs--tag-will-be-deleted-notes-remain', array ( 'tag' => htmlspecialchars ($keyword['Keyword'], ENT_COMPAT, HSC_ENC) )), 'tag' => htmlspecialchars ($keyword['Keyword'], ENT_COMPAT, HSC_ENC), 'form-action' => e2_compose_url ('e2s_tag_delete'), 'submit-text' => $_strings['fb--delete'], ); $ret = array ( 'title' => $_strings['pt--tag-delete'] .': '. $keyword['Keyword'], 'heading' => $_strings['pt--tag-delete'], 'form' => 'form-tag-delete', 'form-tag-delete' => $form_tag_delete, ); return $ret; } function e2m_untagged () { global $_strings, $_config; return e2_notes_by_criteria (array ( 'query' => "SELECT n.* FROM `". $_config['db_table_prefix'] . "Notes` n ". "LEFT OUTER JOIN `". $_config['db_table_prefix'] . "NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE `IsPublished`=1 ". "AND nk.KeywordID IS NULL ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY n.`Stamp` DESC", 'title' => $_strings['pt--posts-without-tags'], 'heading' => $_strings['pt--posts-without-tags'], 'nothing' => $_strings['gs--no-posts-without-tags'], 'show-all-notes' => true, )); return $ret; } function e2s_tag_edit () { global $_strings, $_config; $tag_id = $tag = $description = $alias_source = ''; if (array_key_exists ('tag-id', $_POST)) $tag_id = $_POST['tag-id']; if (array_key_exists ('tag', $_POST)) $tag = $_POST['tag']; if (array_key_exists ('description', $_POST)) $description = trim ($_POST['description'], "\r\n"); if (array_key_exists ('urlname', $_POST)) $alias_source = trim ($_POST['urlname'], "\r\n"); if (array_key_exists ('cache-sensitive-hash', $_POST)) { $old_cache_sensitive_hash = $_POST['cache-sensitive-hash']; $new_cache_sensitive_hash = md5 ($tag . $alias_source); } $tag = e2_question_long_utf8_chars ($tag); $description = e2_question_long_utf8_chars ($description); if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE ID = ".((int) $tag_id)."" )) { $results = e2_mysql_result_as_array (); if (count ($results) != 1) die; $tagrec = $results[0]; } if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE Keyword = '". e2_mysql_real_escape_string ($tag) ."' ". "AND (ID != ".((int) $tag_id).")" )) { $results = e2_mysql_result_as_array (); if (count ($results) == 0) { if ($new_cache_sensitive_hash != $old_cache_sensitive_hash) { e2_notes_drop_caches (); } @unlink (CACHE_FILENAME_FAVTAGS); @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_AUTHOR); $tagrec['ID'] = ((int) $tag_id); $tagrec['Keyword'] = $tag; $tagrec['Description'] = $description; if (e2_update_record ('Keywords', $tagrec)) { $newalias = e2_find_or_set_available_alias ( 'set', ENTITY_TYPE_TAG, $tagrec['ID'], $alias_source ); e2_go_to (e2_compose_url ('e2m_tag', array ('tag-alias' => $newalias))); } else { e2_go_back (); } } else { e2_error ($_strings['er--cannot-rename-tag'], E2E_USER_ERROR); e2_go_back (); } } else { e2_go_back (); } die; } function e2s_tag_delete () { global $_strings, $_config; $id = ((int) $_POST['tag-id']); e2_notes_drop_caches (); @unlink (CACHE_FILENAME_FAVTAGS); @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_AUTHOR); $ok = ( e2_mysql_query ( "DELETE FROM `". $_config['db_table_prefix'] . "Keywords` WHERE `ID`=". $id ) and e2_mysql_query ( "DELETE FROM `". $_config['db_table_prefix'] . "NotesKeywords` WHERE `KeywordID`=". $id ) ); if ($ok) { e2_go_to (e2_compose_url ('e2m_tags')); die; } else { e2_go_back (); die; } } function e2_tags_menu ($mode_parameters) { global $_current_tag, $_config; $favtags_ctree = null; if (CACHE_FAVTAGS and is_file (CACHE_FILENAME_FAVTAGS)) { $favtags_ctree = @unserialize (file_get_contents (CACHE_FILENAME_FAVTAGS)); } if (!is_array ($favtags_ctree)) { e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE IsFavourite = 1 ORDER BY `Keyword`" ); $ft_from_db = e2_mysql_result_as_array (); $favtags_ctree = array (); foreach ($ft_from_db as $favkey) { $out['tag'] = htmlspecialchars ($favkey['Keyword'], ENT_NOQUOTES, HSC_ENC); $out['href'] = e2_compose_url ( 'e2m_tag', array ('*tag' => $favkey) ); $favtags_ctree[] = $out; } if (CACHE_FAVTAGS) write_file (CACHE_FILENAME_FAVTAGS, serialize ($favtags_ctree)); } $pinned = false; foreach ($favtags_ctree as $k => $v) { $favtags_ctree[$k]['current?'] = ( $favtags_ctree[$k]['tag'] == $_current_tag ); if ($favtags_ctree[$k]['current?']) { $pinned = true; $mode_parameters_unpin = $mode_parameters; $mode_parameters_unpin['flag'] = 'IsFavourite'; $mode_parameters_unpin['value'] = 0; if (e2_secure ()) { $favtags_ctree[$k]['pinnable?'] = true; $favtags_ctree[$k]['pinned?'] = true; $favtags_ctree[$k]['pinned-toggle-href'] = ( e2_compose_url ('e2m_tag_flag_ajax', $mode_parameters_unpin) ); } } } if (e2_secure ()) { if (!$pinned and array_key_exists ('*tag', $mode_parameters)) { $mode_parameters_pin = $mode_parameters; $mode_parameters_pin['flag'] = 'IsFavourite'; $mode_parameters_pin['value'] = 1; $current_tag = array ( 'tag' => htmlspecialchars ($mode_parameters['*tag']['Keyword'], ENT_NOQUOTES, HSC_ENC), 'href' => e2_compose_url ('e2m_tag', $mode_parameters), 'current?' => true, 'pinnable?' => true, 'pinned?' => false, 'pinned-toggle-href' => e2_compose_url ('e2m_tag_flag_ajax', $mode_parameters_pin), ); $favtags_ctree[] = $current_tag; } } return $favtags_ctree; } function e2_tagrecs_by_note_id ($note_id, $parameters = '') { global $_config; $tagrecs = array (); if (e2_mysql_query ( "SELECT `". $_config['db_table_prefix'] . "Keywords`.* ". "FROM `". $_config['db_table_prefix'] . "Keywords`, ". "`". $_config['db_table_prefix'] . "NotesKeywords` ". "WHERE `". $_config['db_table_prefix'] . "NotesKeywords`.NoteID=". ((int) $note_id) ." ". "AND `". $_config['db_table_prefix'] . "Keywords`.ID=`". $_config['db_table_prefix'] . "NotesKeywords`.KeywordID ". "ORDER BY `Keyword`" )) { $tagrecs = e2_mysql_result_as_array (); } return $tagrecs; } function e2q_delete_tagbindings ($tagbinding_record) { global $_config; $event_info = array (); foreach (array ( 'ID', 'NoteID', 'KeywordID', ) as $field) if (array_key_exists ($field, $tagbinding_record)) { $elements[] = '`'. $field .'`'."='". e2_mysql_real_escape_string ($tagbinding_record[$field]) ."'"; if ($field == 'ID') $event_field = 'tagbinging-id'; if ($field == 'NoteID') $event_field = 'tagbinging-note-id'; if ($field == 'KeywordID') $event_field = 'tagbinging-tag-id'; $event_info[$event_field] = $tagbinding_record[$field]; } $query = ( "DELETE FROM `". $_config['db_table_prefix'] . "NotesKeywords` ". "WHERE ". implode (' AND ', $elements) ); if (e2_mysql_query ($query)) { return true; } } function e2q_update_tagbinding ($tagbinding_record) { global $_config; if (!array_key_exists ('ID', $tagbinding_record) or !is_numeric ($tagbinding_record['ID'])) { die ('API MISUSE: e2q_update_tagbinding must be called with an ID field in $tagbinding_record'); } $elements = array (); foreach (array ( 'NoteID', 'KeywordID', ) as $field) if (array_key_exists ($field, $tagbinding_record)) { $elements[] = '`'. $field .'`'."='". e2_mysql_real_escape_string ($tagbinding_record[$field]) ."'"; } if (count ($elements) > 0) { $query = "UPDATE `". $_config['db_table_prefix'] . "NotesKeywords` ". "SET ". implode (', ', $elements) ." ". "WHERE `ID`=". $tagbinding_record['ID']; if (e2_mysql_query ($query)) { return true; } } } function e2q_insert_tag ($tag) { @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_AUTHOR); $tagrec = array ( 'Keyword' => $tag, 'OriginalAlias' => e2_find_or_set_available_alias ('find', ENTITY_TYPE_UNSPECIFIED, '', $tag), 'Description' => '', ); if (($tagrec = e2_insert_record ('Keywords', $tagrec)) !== false) { $actually_set_alias = e2_find_or_set_available_alias ( 'set', ENTITY_TYPE_TAG, $tagrec['ID'], $tag ); if ($actually_set_alias != $tagrec['OriginalAlias']) { $tagrec['OriginalAlias'] = $actually_set_alias; e2_update_record ('Keywords', $tagrec); } return $tagrec['ID']; } } function e2_tags_with_usage_info () { global $_config; $is_authorized = e2_secure (); $cache_filename = CACHE_FILENAME_TAGS; if ($is_authorized) $cache_filename = CACHE_FILENAME_TAGS_AUTHOR; $tags_by_name = null; if (CACHE_TAGS and is_file ($cache_filename)) { $tags_by_name = @unserialize (file_get_contents ($cache_filename)); } if (!is_array ($tags_by_name)) { e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Keywords` ". "ORDER BY `Keyword`" ); $tags_by_id = array (); foreach (e2_mysql_result_as_array () as $tagrec) { $tag['tag'] = htmlspecialchars ($tagrec['Keyword'], ENT_NOQUOTES, HSC_ENC); $tag['href'] = e2_compose_url ('e2m_tag', array ('*tag' => $tagrec)); $tag['favourite?'] = (bool) $tagrec['IsFavourite']; $tag['notes-count'] = 0; $tag['last-used'] = 0; $tag['freshness'] = 0; $tag['weight'] = 0; $tags_by_id[$tagrec['ID']] = $tag; } e2_mysql_query ( "SELECT nk.KeywordID, COUNT(DISTINCT n.ID) as Count, max(n.Stamp) as LastUsed ". "FROM `". $_config['db_table_prefix'] . "NotesKeywords` nk, ". "`". $_config['db_table_prefix'] . "Notes` n ". "WHERE nk.NoteID = n.ID AND n.IsPublished ". e2_and_note_visibility_check_sql ($is_authorized). "GROUP BY nk.KeywordID" ); $max_notes_count = 0; $max_freshness = 0; $max_weight = 0; foreach (e2_mysql_result_as_array () as $current_info) { $out =& $tags_by_id[$current_info['KeywordID']]; $out['notes-count'] = $current_info['Count']; if (@$out['last-used'] < $current_info['LastUsed']) { $out['last-used'] = $current_info['LastUsed']; $years_ago = (time () - $out['last-used']) / SECONDS_IN_A_YEAR; $out['freshness'] = pow (1/2, $years_ago); } $max_notes_count = max ($max_notes_count, $out['notes-count']); $max_freshness = max ($max_freshness, $out['freshness']); $max_weight = max ($max_weight, $out['notes-count'] * $out['freshness']); } $tags_by_name = array (); foreach ($tags_by_id as $i => $v) { if (!$is_authorized and $v['notes-count'] == 0) continue; $i_new = mb_strtolower ($v['tag']); $tags_by_name[$i_new] = $v; if ($max_freshness != 0) { $tags_by_name[$i_new]['freshness'] = $v['freshness'] / $max_freshness; } else { $tags_by_name[$i_new]['freshness'] = 0; } if ($max_weight != 0) { $tags_by_name[$i_new]['weight'] = ( $v['freshness'] * $v['notes-count'] / $max_weight ); } else { $tags_by_name[$i_new]['weight'] = 0; } if ($tags_by_name[$i_new]['favourite?']) $tags_by_name[$i_new]['weight'] = 1; } if (CACHE_TAGS) write_file ($cache_filename, serialize ($tags_by_name)); } return $tags_by_name; } function e2_keywords_as_array_by_note ($note_id, $order_by = 'Keyword') { global $_config; if (e2_mysql_query ( "SELECT `". $_config['db_table_prefix'] . "Keywords`.* ". "FROM `". $_config['db_table_prefix'] . "Keywords`, ". "`". $_config['db_table_prefix'] . "NotesKeywords` ". "WHERE `". $_config['db_table_prefix'] . "NotesKeywords`.NoteID=".((int) $note_id)." AND ". "`". $_config['db_table_prefix'] . "Keywords`.ID=". "`". $_config['db_table_prefix'] . "NotesKeywords`.KeywordID ". "ORDER BY `".$order_by."`" )) $tmp = e2_mysql_result_as_array (); else $tmp = array (); $keywords = array (); foreach ($tmp as $t) $keywords[] = $t; return $keywords; } function e2_keyword_by_name ($keyword) { global $_config; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE `Keyword`='".e2_mysql_real_escape_string ($keyword)."'" )) { $k = e2_mysql_result_as_array (); if (isset ($k[0])) return $k[0]; } return null; } function e2_keyword_by_legacy_urlname ($urlname) { global $_config; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE `OriginalAlias`='".e2_mysql_real_escape_string ($urlname)."'" )) $tmp = e2_mysql_result_as_array (); else $tmp = array (); if (isset ($tmp[0])) return $tmp[0]; else return FALSE; } function e2_keyword_by_id ($id) { global $_config; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE `ID`='".((int) $id)."'" )) { $k = e2_mysql_result_as_array (); if (isset ($k[0])) { $k = $k[0]; return $k; } else { return NULL; } } return NULL; } function e2_tagrecs_with_parameters_($parameters) { $urlnamelist = array (); if (@$parameters['tag-alias'] or $parameters['tag-alias'] === '0') { $urlnamelist = explode (',', $parameters['tag-alias']); } $tagrecs = array (); foreach ($urlnamelist as $urlname) if ($urlname or $urlname === '0') { if ( $aliasrec = e2_aliasrec_of_alias_(@$urlname) and ($aliasrec['EntityType'] == ENTITY_TYPE_TAG) and ($tagrec = e2_keyword_by_id ($aliasrec['EntityID'])) ) { $tagrecs[] = $tagrec; } else { if ($legacy_tag = e2_keyword_by_legacy_urlname ($urlname)) { $tagrecs[] = $legacy_tag; } } } return $tagrecs; } function e2_input_name_of_email () { global $full_blog_url; static $input_name_of_email; $key = e2seq__persistent_key (); if (empty ($input_name_of_email)) { $input_name_of_email = md5 ($full_blog_url .'email'. $key); } return $input_name_of_email; } function e2_input_name_of_nospam () { global $full_blog_url; static $input_name_of_nospam; $key = e2seq__persistent_key (); if (empty ($input_name_of_nospam)) { $input_name_of_nospam = md5 ($full_blog_url .'nospam'. $key . date ('n-Y')); } return $input_name_of_nospam; } function e2_input_name_of_nospam_prev () { global $full_blog_url; static $input_name_of_nospam_prev; $key = e2seq__persistent_key (); if(empty($input_name_of_nospam_prev)) { $input_name_of_nospam_prev = md5 ($full_blog_url .'nospam'. $key . date ('n-Y', strtotime('-1 month'))); } return $input_name_of_nospam_prev; } function e2_nospam_cookie_name ($note_id) { global $full_blog_url; $key = e2seq__persistent_key (); return e2_cookie_prefix ('comment_'. md5 ($full_blog_url .'nospam_cookie'. $key . $note_id)); } function e2_nospam_cookie_value () { global $full_blog_url; $user_agent = $_SERVER['HTTP_USER_AGENT']; $key = e2seq__persistent_key (); return md5 ($full_blog_url .'nospam_cookie'. $key . $user_agent); } function e2_post_data_is_spam_suspicios () { if ( array_key_exists ('email', $_POST) and $_POST['email'] !== '' ) return true; $input_name_of_nospam = e2_input_name_of_nospam (); $input_name_of_nospam_prev = e2_input_name_of_nospam_prev (); if ( !array_key_exists ($input_name_of_nospam, $_POST) and !array_key_exists ($input_name_of_nospam_prev, $_POST) ) return true; if ( ( array_key_exists ($input_name_of_nospam, $_POST) and $_POST[$input_name_of_nospam] !== '' ) or ( array_key_exists ($input_name_of_nospam_prev, $_POST) and $_POST[$input_name_of_nospam_prev] !== '' ) ) return true; if ( !array_key_exists ('comment', $_POST) or (strlen ($_POST['comment']) > 6) ) return true; return false; } function e2_cookie_data_is_spam_suspicios_for_note_id_($note_id) { if ( !array_key_exists (e2_nospam_cookie_name ($note_id), $_COOKIE) or ($_COOKIE[e2_nospam_cookie_name ($note_id)] !== e2_nospam_cookie_value ()) ) return true; return false; } function e2m_comment ($parameters = array ()) { e2_go_to (e2_compose_url ('e2m_note', $parameters)); die; } function e2m_comment_edit ($parameters = array ()) { return e2mh_comment_edit ('edit', $parameters); } function e2m_note_comment ($parameters = array ()) { return e2mh_comment_edit ('write', $parameters); } function e2mh_comment_edit ($write_or_edit, $parameters = array ()) { global $_config, $_strings, $full_blog_url; $title = $heading = $_strings['pt--new-comment']; $comment_id = 'new'; if ($write_or_edit == 'edit') { $commentrec = e2_commentrec_with_parameters_($parameters); $submit_text = $_strings['fb--save-changes']; $noterec = $commentrec['noterec']; $title = $heading = $_strings['pt--edit-comment']; $the_comment = e2_package_comment ($noterec, $commentrec, $parameters['comment-number']); $comment_id = $commetrec['ID']; if (!$commentrec) { return e2_error404_mode (); } $form_comment = array ( '.note-id' => $commentrec['NoteID'], '.comment-id' => $commentrec['ID'], '.already-subscribed?' => false, '.gip' => $commentrec['GIP'], '.from' => substr ($_SERVER['HTTP_REFERER'], strlen ($full_blog_url) + 1), 'create:edit?' => false, 'form-action' => e2_compose_url ('e2s_comment_process'), 'submit-text' => $submit_text, 'show-subscribe?' => true, 'subscribe?' => (bool) $commentrec['IsSubscriber'], 'name' => htmlspecialchars ($commentrec['AuthorName'], ENT_COMPAT, HSC_ENC), 'email' => htmlspecialchars ($commentrec['AuthorEmail'], ENT_COMPAT, HSC_ENC), 'text' => htmlspecialchars ($commentrec['Text'], ENT_COMPAT, HSC_ENC), 'email-field-name' => e2_input_name_of_email (), ); if ('' != trim ($commentrec['IP'])) { $form_comment['ip'] = $commentrec['IP']; $form_comment['ip-href'] = $_config['whois_service'] . $form_comment['ip']; } } else { $noterec = $parameters['*note']; $form_comment = e2_comment_form_for_note ($noterec); } $ret = array ( 'title' => $title, 'heading' => $heading, 'form' => 'form-comment', 'form-comment' => $form_comment, ); if (!empty ($the_comment)) { $ret['comments'] = array ('each' => array ('only' => $the_comment)); } return $ret; } function e2m_comment_reply ($parameters = array ()) { global $_strings; $commentrec = e2_commentrec_with_parameters_($parameters); if (!$commentrec) { return e2_error404_mode (); } $noterec = $commentrec['noterec']; $the_comment = e2_package_comment ($noterec, $commentrec, $parameters['comment-number']); $the_comment['_']['_id'] = $commentrec['ID']; $the_comment['_']['_ord'] = 0; $the_comment['_']['_ord_max'] = 0; $the_comment['replying?'] = (bool) true; $no_reply_so_far = ($commentrec['Reply'] == '' or !$commentrec['IsReplyVisible']); $title = $no_reply_so_far? $_strings['pt--reply-to-comment'] : $_strings['pt--edit-reply-to-comment']; $form_comment_reply = array ( '.note-id' => $noterec['ID'], '.comment-id' => $commentrec['ID'], '.reply-action' => $no_reply_so_far? 'new' : 'edit', 'form-action' => e2_compose_url ('e2s_comment_edit_reply'), 'submit-text' => $no_reply_so_far? $_strings['fb--publish'] : $_strings['fb--save-changes'], 'create:edit?' => (bool) ($no_reply_so_far), 'reply-text' => htmlspecialchars ($commentrec['Reply'], ENT_COMPAT, HSC_ENC), 'mail-back?' => (bool) ($no_reply_so_far), ); return array ( 'title' => $title, 'heading' => $title, 'comments' => array ('each' => array ('only' => $the_comment)), 'form' => 'form-comment-reply', 'form-comment-reply' => $form_comment_reply, ); } function e2m_comment_delete ($parameters = array ()) { global $_strings, $settings, $system_data, $_config; $commentrec = e2_commentrec_with_parameters_($parameters); $note_id = $commentrec['NoteID']; if (!$commentrec) { return e2_error404_mode (); } e2_drop_caches_for_note_($note_id); @unlink (USER_FOLDER. '/last-comment.psa'); e2_mysql_query ( "DELETE FROM `". $_config['db_table_prefix'] . "Comments` ". "WHERE `ID` = '".((int) $commentrec['ID'])."'" ); e2_go_back (); die; } function e2m_comment_reply_delete ($parameters = array ()) { global $_strings, $settings, $_config; $commentrec = e2_commentrec_with_parameters_($parameters); if (!$commentrec) { return e2_error404_mode (); } e2_mysql_query ( "UPDATE `". $_config['db_table_prefix'] . "Comments` SET ". "`Reply`='', ". "`IsReplyFavourite`='0' ". "WHERE `ID`=".((int) $commentrec['ID']) ); e2_go_back (); die; } function e2m_unsubscribe ($parameters) { global $_strings, $_config; $order = "ORDER BY `ID` DESC"; $noterec = $parameters['*note']; $note_id = $noterec['ID']; $email = $parameters['unsubscribe-email']; $md5 = $parameters['unsubscribe-key']; $email = str_replace (' ', '+', $email); if ($note_id) { if (e2_mysql_query ( "SELECT `ID`, `Stamp` FROM `". $_config['db_table_prefix'] . "Comments` ". "WHERE `NoteID`=". $note_id ." AND `IsSubscriber`=1 AND `AuthorEmail`='". $email ."' ". $order )) { $result = e2_mysql_result_as_array (); if (count ($result) < 1) { $ret['unsubscribe']['success?'] = false; $ret['unsubscribe']['error-message'] = $_strings['gs--you-are-not-subscribed']; } else { $comment = @$result[0]; $right_md5 = md5 ($comment['ID'] . $comment['Stamp'] .'x'); $success = false; if ($md5 == $right_md5) { if (e2_mysql_query ( "UPDATE `". $_config['db_table_prefix'] . "Comments` SET `IsSubscriber`=0 ". "WHERE `NoteID`=". $note_id ." AND `AuthorEmail` = '".e2_mysql_real_escape_string ($email)."'" )) { $success = true; $ret['unsubscribe']['success?'] = true; $ret['unsubscribe']['note-title'] = e2_kavychki ( htmlspecialchars ($noterec['Title'], ENT_COMPAT, HSC_ENC) ); $ret['unsubscribe']['note-href'] = e2_compose_url ( 'e2m_note', array ('*note' => $noterec) ); } } if (!$success) { $ret['unsubscribe']['success?'] = false; $ret['unsubscribe']['error-message'] = $_strings['gs--unsubscription-didnt-work']; } } } else { $ret['unsubscribe']['success?'] = false; $ret['unsubscribe']['error-message'] = $_strings['gs--comment-not-found']; } } else { $ret['unsubscribe']['success?'] = false; $ret['unsubscribe']['error-message'] = $_strings['gs--post-not-found']; } return $ret; } function e2m_comment_flag ($parameters) { e2mh_comment_flag ($parameters); e2_go_to (e2_compose_url ('e2m_note', $parameters)); die; } function e2m_comment_flag_ajax ($parameters) { if (e2mh_comment_flag ($parameters)) { $new_parameters = $parameters; $new_parameters['value'] = !$parameters['value']; if ($parameters['value'] == 1) { $new_url = e2_compose_url ('e2m_comment_flag_ajax', $new_parameters); $ajaxresult = 'on-rehref|'. $new_url; } else { $new_url = e2_compose_url ('e2m_comment_flag_ajax', $new_parameters); $ajaxresult = 'off-rehref|'. $new_url; } } else { $ajaxresult = 'error'; } if (array_key_exists ('result', $_POST) and ($_POST['result'] == 'ajaxresult')) { die ($ajaxresult); } else { e2_go_to (e2_compose_url ('e2m_note', $parameters)); die; } } function e2mh_comment_flag ($parameters) { $commentrec = e2_commentrec_with_parameters_($parameters); $note_id = $commentrec['NoteID']; $result = false; if ($commentrec) { $result = e2_update_record ('Comments', array ( 'ID' => $commentrec['ID'], $parameters['flag'] => (int) ($parameters['value'] == 1), )); e2_drop_caches_for_note_($note_id); } return $result; } function e2s_comment_process () { global $_strings, $_fp_error; list ($note_id, $comment_id, $processed) = e2fp_comment (); if (__LOG) __log ('Comments: processed, noteid <'. $note_id .'>, commentid <'. $comment_id .'>'); if (!$comment_id) { $unacceptability_reason = ''; if ($_fp_error == FP_NOT_COMMENTABLE) { e2_error ($_strings['er--post-not-commentable'], E2E_USER_ERROR); } elseif ($_fp_error == FP_EMPTY_FIELD) { e2_error ($_strings['er--name-email-text-required'], E2E_USER_ERROR); } elseif ($_fp_error == FP_COMMENT_TOO_LONG) { $unacceptability_title = $_strings['gs--comment-too-long']; $unacceptability_reason = $_strings['gs--comment-too-long-description']; } elseif ($_fp_error == FP_COMMENT_DOUBLE_POST) { $unacceptability_title = $_strings['gs--comment-double-post']; $unacceptability_reason = $_strings['gs--comment-double-post-description']; } elseif ($_fp_error == FP_COMMENT_SPAM_SUSPECT) { $unacceptability_title = $_strings['gs--comment-spam-suspect']; $unacceptability_reason = $_strings['gs--comment-spam-suspect-description']; } else { e2_error ($_strings['er--error-occurred'].' ('. $_fp_error .')'); } if ($unacceptability_reason) { $ret['title'] = $unacceptability_title; $ret['heading'] = $unacceptability_title; $ret['form'] = 'form-unaccepted-comment'; $ret['form-unaccepted-comment'] = array ( 'reason' => $unacceptability_reason, 'text' => @htmlspecialchars ($processed['text'], ENT_COMPAT, HSC_ENC), ); return $ret; } } if ($note_id) { e2_go_to (e2_compose_url ('e2m_note', array ('*note' => e2_note_by_id ($note_id)))); } else { e2_go_to (); } die; } function e2s_comment_edit_reply () { global $_strings, $server_name, $_config; $reply = @$_POST['text']; if (trim ($reply) == '') $reply = ''; $note_id = @$_POST['note-id']; $note = e2_note_by_id ($note_id); $comment_id = @$_POST['comment-id']; $comment = e2_comment_by_id ($comment_id); $mail_back = isset ($_POST['mail-back']); $reply_lastmod = time (); if (@$_POST['reply-action'] == 'new') { $reply_stamp = time (); } @unlink (e2_note_cache_filename_with_id_($note_id .'-comments')); @unlink (e2_note_cache_filename_with_id_($note_id .'-comments-author')); if ($comment and e2_mysql_query ( "UPDATE `". $_config['db_table_prefix'] . "Comments` SET ". "`Reply`='". e2_mysql_real_escape_string ($reply) ."', ". ( isset ($reply_stamp)? ( "`ReplyStamp`='". $reply_stamp ."', " ) : ( "" ) ). "`ReplyLastModified`='". $reply_lastmod ."', ". "`IsReplyVisible`='1' ". "WHERE `ID`=".((int) $comment_id) )) { $note_url = e2_compose_url ('e2m_note', array ('*note' => $note)); if ($mail_back and $reply != '') { $out['comment-time'] = array ($comment['Stamp'], e2_current_timezone ()); $out['commenter'] = $comment['AuthorName']; $out['commenter-email'] = $comment['AuthorEmail']; $out['comment-text'] = $comment['Text']; $out['note-title'] = e2_kavychki ($note['Title']); $out['reply-time'] = array (time (), e2_current_timezone ()); $out['blog-author'] = e2_blog_author (); $out['note-href'] = $note_url; $out['comment-href'] = $note_url; $out['reply-text'] = $reply; if (1) { $mail_body = e2_mail_body_using_template ( 'comment-reply', $out ); $mail_subj = e2l_get_string ( 'em--comment-reply', $out ); $mail_to = $comment['AuthorEmail']; $mail_headers = 'From: '. e2_mail_from (); e2_mail ($mail_to, $mail_subj, $mail_body, $mail_headers); } if (1) { unset ($out['commenter-email']); $mail_headers = 'From: '. e2_mail_from (); foreach (e2_subscribers_by_note ($note, $comment['AuthorEmail']) as $man) { $p_email = $man['AuthorEmail']; $p_hash = md5 ($man['ID'].$man['Stamp'].'x'); $out['unsubscribe-href'] = e2_compose_url ('e2m_unsubscribe', array ( '*note' => $note, 'unsubscribe-email' => $p_email, 'unsubscribe-key' => $p_hash, ) ); $mail_to = $p_email; $mail_body = e2_mail_body_using_template ('comment-reply-to-public', $out); $mail_subj = e2l_get_string ( 'em--comment-reply-to-public-subject', $out ); e2_mail ($mail_to, $mail_subj, $mail_body, $mail_headers); } } } e2_go_to ($note_url); } else { e2_go_back (); } die; } function e2_package_comment ($note, $comment, $number = false) { global $_config, $full_blog_url; if (__LOG) __log ('Comments: package comment <'. $comment['ID'] .'>...'); if ($note === null) { $note = e2_note_by_id ($comment['NoteID']); } if ($number !== false) $out['number'] = $number; $is_gip_used = !empty ($comment['IsGIPUsed']); $out['gip-used?'] = $is_gip_used; $out['gip'] = $out['gip-used?'] ? $comment['GIP'] : ''; $out['name'] = htmlspecialchars ($comment['AuthorName'], ENT_NOQUOTES, HSC_ENC); if ($is_gip_used) { $upfilename = PICTURES_FOLDER . 'userpics/'. $comment['GIP'] .'-'. $comment['GIPAuthorID'] .'.jpg'; if (is_file (MEDIA_ROOT_FOLDER . $upfilename)) { $out['userpic-href'] = $full_blog_url .'/'. $upfilename; } } $out['name-href'] = ( $out['gip-used?'] ? e2_get_user_profile_url ($comment['GIP'], $comment['GIPAuthorID']) : '' ); if (e2_secure ()) { $out['email'] = htmlspecialchars ($comment['AuthorEmail'], ENT_NOQUOTES, HSC_ENC); if ('' != trim ($comment['IP'])) { $out['ip'] = $comment['IP']; $out['ip-href'] = $_config['whois_service'] . $out['ip']; } } $out['author-name'] = e2_blog_author (); $out['important?'] = (bool) $comment['IsFavourite']; $out['reply-visible?'] = (bool) ($comment['IsVisible'] && $comment['IsReplyVisible']); $out['reply-important?'] = (bool) $comment['IsReplyFavourite']; $out['spam-suspect?'] = (bool) $comment['IsSpamSuspect']; $datetimestuff = array ((int) $comment['Stamp'], e2_note_timezone ($note)); $out['time'] = $datetimestuff; $out['last-modified'] = $datetimestuff; if ($comment['LastModified']) $out['last-modified'] = array ((int) $comment['LastModified'], e2_note_timezone ($note)); if ($comment['ReplyStamp']) $out['reply-time'] = array ((int) $comment['ReplyStamp'], e2_note_timezone ($note)); if ($comment['ReplyLastModified']) $out['reply-last-modified'] = array ((int) $comment['ReplyLastModified'], e2_note_timezone ($note)); if (e2_secure ()) { $out['subscriber?'] = (bool) $comment['IsSubscriber']; $out['new?'] = (bool) $comment['IsNew']; $out['first-new?'] = false; if (!@$_config['read_only']) { if ($comment['IsFavourite']) { $out['important-toggle-href'] = e2_compose_url ( 'e2m_comment_flag_ajax', array ('*note' => $note, 'comment-number' => $number, 'flag' => 'IsFavourite', 'value' => 0) ); } else { $out['important-toggle-href'] = e2_compose_url ( 'e2m_comment_flag_ajax', array ('*note' => $note, 'comment-number' => $number, 'flag' => 'IsFavourite', 'value' => 1) ); } if ($comment['IsReplyFavourite']) { $out['reply-important-toggle-href'] = e2_compose_url ( 'e2m_comment_flag_ajax', array ( '*note' => $note, 'comment-number' => $number, 'flag' => 'IsReplyFavourite', 'value' => 0 ) ); } else { $out['reply-important-toggle-href'] = e2_compose_url ( 'e2m_comment_flag_ajax', array ( '*note' => $note, 'comment-number' => $number, 'flag' => 'IsReplyFavourite', 'value' => 1 ) ); } $out['edit-href'] = e2_compose_url ( 'e2m_comment_edit', array ('*note' => $note, 'comment-number' => $number) ); $out['removed-toggle-href'] = e2_compose_url ( 'e2m_comment_flag_ajax', array ( '*note' => $note, 'comment-number' => $number, 'flag' => 'IsVisible', 'value' => !$comment['IsVisible'] ) ); $out['removed-reply-toggle-href'] = e2_compose_url ( 'e2m_comment_flag_ajax', array ( '*note' => $note, 'comment-number' => $number, 'flag' => 'IsReplyVisible', 'value' => !$comment['IsReplyVisible'] ) ); $reply_href = e2_compose_url ( 'e2m_comment_reply', array ('*note' => $note, 'comment-number' => $number) ); if ($comment['Reply'] == '' or !$comment['IsReplyVisible']) { $out['reply-href'] = $reply_href; } else { $out['edit-reply-href'] = $reply_href; } } } if (mb_strlen ($comment['Text']) > $_config['max_comment_length']) { $comment['Text'] = mb_substr ($comment['Text'], 0, $_config['max_comment_length']); } $comment_formatter = $note['FormatterID'] === 'raw' ? 'neasden' : $note['FormatterID']; $formatinfo = e2_format_with_formatter ($comment_formatter, $comment['Text'], 'simple'); $out['text'] = $formatinfo['text-final']; $out['replying?'] = (bool) false; $out['replied?'] = (bool) ( (trim ($comment['Reply']) != '') && ($comment['IsReplyVisible']) ); $formatinfo = e2_format_with_formatter ($note['FormatterID'], $comment['Reply'], 'full'); $out['reply'] = $formatinfo['text-final']; if (array_key_exists ('_', $comment)) $out['_'] = $comment['_']; if (__LOG) __log ('Comments: done'); return $out; } function e2_comment_by_id ($id) { global $_config; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Comments` ". "WHERE `ID` = '".$id."'" )) { $tmp = e2_mysql_result_as_array (); if (count ($tmp) > 0) return $tmp[0]; } return false; } function e2_comment_visibility_service ($vis_flag) { e2_comment_set_flag ('IsVisible', $vis_flag); } function e2_comment_reply_visibility_service ($reply_vis_flag) { e2_comment_set_flag ('IsReplyVisible', $reply_vis_flag); } function e2_comment_form_for_note ($note_record) { global $_strings, $_config, $settings; $cookie_name = @$_COOKIE[e2_cookie_prefix ('commenter_name')]; $cookie_email = @$_COOKIE[e2_cookie_prefix ('commenter_email')]; $cookie_unsubscribe_key = @$_COOKIE[e2_cookie_prefix ('commenter_ph')]; $already_subscribed = false; if ($cookie_email and $cookie_unsubscribe_key) { foreach (e2_subscribers_by_note ($note_record) as $man) { $right_md5 = md5 ($man['ID'] . $man['Stamp'] .'x'); if ( $man['AuthorEmail'] == $cookie_email and $cookie_unsubscribe_key == $right_md5 ) { $already_subscribed = true; break; } } } $submit_text = $_strings['fb--submit']; $input_name_of_nospam = e2_input_name_of_nospam (); $form_comment = array ( '.note-id' => $note_record['ID'], '.comment-id' => 'new', '.already-subscribed?' => (bool) $already_subscribed, 'cookie-name' => e2_nospam_cookie_name ($note_record['ID']), 'cookie-value' => e2_nospam_cookie_value (), 'email-field-name' => e2_input_name_of_email (), 'nospam-field-name-part-1' => substr ($input_name_of_nospam, 0, 4), 'nospam-field-name-part-2' => substr ($input_name_of_nospam, 4), 'create:edit?' => true, 'form-action' => e2_compose_url ('e2s_comment_process'), 'submit-text' => $submit_text, 'show-subscribe?' => (bool) !$already_subscribed, 'subscribe?' => (bool) $already_subscribed, 'subscription-status' => $already_subscribed? $_strings['gs--you-are-already-subscribed'] : '', 'name' => htmlspecialchars ($cookie_name, ENT_COMPAT, HSC_ENC), 'email' => htmlspecialchars ($cookie_email, ENT_COMPAT, HSC_ENC), 'text' => htmlspecialchars ($comment['Text'], ENT_COMPAT, HSC_ENC), 'email-comments-enabled?' => empty ($settings['comments']['require_gip']), 'gips' => array (), ); $logged_in = false; $logged_in_gip = ''; foreach (e2_list_gips () as $gip) { if (!is_file (SYSTEM_FOLDER .'gips/'. $gip .'.json')) { continue; } $provider_logged_in = e2_is_logged_in ($gip); $form_comment['gips'][$gip] = ( e2_get_gip_auth_url ($gip) ); if ($provider_logged_in) { $logged_in = true; $gip_session = e2_get_gip_session ($gip); $logged_in_gip = $gip_session['GIP']; $form_comment['name'] = htmlspecialchars ( $gip_session['AuthorName'], ENT_COMPAT, HSC_ENC ); } } if (!$form_comment['email-comments-enabled?'] and !count ($form_comment['gips'])) { return false; } $form_comment['email-comments-only?'] = (count ($form_comment['gips']) === 0); $form_comment['logged-in?'] = $logged_in; $form_comment['logged-in-gip'] = $logged_in_gip; $form_comment['logout-url'] = $logged_in ? e2_compose_url('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())) : ''; return $form_comment; } function e2_note_comments_count_new_by_id ($note_id) { return e2comments__note_comments_count_generic ($note_id, '`IsNew` = 1'); } function e2_note_comments_count_by_id ($note_id) { return e2comments__note_comments_count_generic ($note_id, '`IsVisible` = 1'); } function e2comments__note_latest_comment_number ($note_id) { return e2comments__note_comments_count_generic ($note_id, '1'); } function e2comments__note_comments_count_generic ($note_id, $where) { global $_config; if (!is_numeric ($note_id)) return 0; $note_comments_count = 0; if (e2_mysql_query ( "SELECT count(*) FROM `". $_config['db_table_prefix'] . "Comments` ". "WHERE `NoteID`=". $note_id ." ". "AND (". $where. ")" )) { $result = e2_mysql_result_as_array (); $result = (int) $result[0]['count(*)']; $note_comments_count = $result; } return (int) $note_comments_count; } function e2_new_comments () { global $_config; $count = 0; $texts = ''; $href = ''; if (e2_mysql_query ( "SELECT `NoteID`, `Text` FROM `". $_config['db_table_prefix'] . "Comments` ". "WHERE `IsNew`=1 ORDER BY `Stamp`" )) { $result = e2_mysql_result_as_array (); $count = count ($result); if ($count) { $note_id = $result[0]['NoteID']; $href = e2_compose_url ( 'e2m_note', array ('*note' => e2_note_by_id ($note_id)) ); } else { $href = ''; } } return array ((int) $count, $texts, $href); } function e2_notes_visible_comments ($note_id, $where_order_limit) { global $_config; if (__LOG) __log ('Comments: getting comments for note '. $note_id); if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Comments` ". "WHERE `NoteID`=". @$note_id . " ". "AND `IsVisible`=1 ". $where_order_limit )) { $result = e2_mysql_result_as_array (); return $result; } return array (); } function e2_subscribers_by_note ($note, $except = '') { global $_config; $order = "ORDER BY `ID` DESC"; $ret = $emails = array (); if (e2_mysql_query ( "SELECT DISTINCT `ID`, `Text`, `IsSubscriber`, `AuthorName`, `AuthorEmail`, `Stamp` ". "FROM `". $_config['db_table_prefix'] . "Comments` ". "WHERE `NoteID`=". @$note['ID'] ." ". "AND `IsSubscriber`=1 ". "AND `AuthorEmail`!='". e2_mysql_real_escape_string ($except) ."' ". $order )) { $result = e2_mysql_result_as_array (); foreach ($result as $man) { if (!in_array ($man['AuthorEmail'], $emails)) { $ret[] = $man; } $emails[] = $man['AuthorEmail']; } } return $ret; } function e2_note_is_ok_for_comments ($note, $condition = NOTE_COMMENTABLE_NOW) { global $settings, $_config; $dateon = true; if (@$settings['comments']['fresh_only']) if (isset ($_config['comment_freshness_days'])) if ($note['Stamp'] < time () - $_config['comment_freshness_days'] * SECONDS_IN_A_DAY) $dateon = false; $noteon_ifmatters = $note['IsCommentable']; if ($condition == NOTE_COMMENTABLE_NOW_CONDITIONALLY) { $noteon_ifmatters = true; } return ( $note['IsPublished'] and e2_noterec_is_visible ($note) and $dateon and $noteon_ifmatters ); } function e2_commentrec_with_parameters_($parameters = array ()) { $noterec = $parameters['*note']; $comments = e2_notes_visible_comments ($noterec['ID'], "ORDER BY `Stamp`"); $commentrec = @$comments[$parameters['comment-number'] - 1]; if ($commentrec) { $commentrec['noterec'] = $noterec; return $commentrec; } } function e2fp_comment ($result_type = '') { global $settings, $system_data, $_config, $_fp_error; $_fp_error = false; $input_name_of_email = e2_input_name_of_email (); $note_id = $comment_id = $name = $email = $text = ''; if (array_key_exists ('note-id', $_POST)) $note_id = trim (@$_POST['note-id']); if (array_key_exists ('comment-id', $_POST)) $comment_id = trim (@$_POST['comment-id']); if (array_key_exists ('name', $_POST)) $name = trim (@$_POST['name']); if (array_key_exists ($input_name_of_email, $_POST)) $email = trim (@$_POST[$input_name_of_email]); if (array_key_exists ('text', $_POST)) $text = trim (@$_POST['text']); $name = e2_question_long_utf8_chars ($name); $text = e2_question_long_utf8_chars ($text); if ($comment_id == 'new') { $gip_name = e2_get_logged_gip_name (); if ($gip_name) { $gip_session = e2_get_gip_session ($gip_name); $name = trim ($gip_session['AuthorName']); $email = ''; $gip_author_id = $gip_session['GIPAuthorID']; } } else { if (array_key_exists ('gip', $_POST)) $gip_name = trim (@$_POST['gip']); } $is_subscriber = ( (array_key_exists ('already-subscribed', $_POST) and $_POST['already-subscribed']) or (array_key_exists ('subscribe', $_POST) and $_POST['subscribe']) ); $lastmod = time (); $processed['text'] = $text; if ($comment_id == 'new' and !$gip_name) { e2_set_cookie ('commenter_name', $name); e2_set_cookie ('commenter_email', $email); } $is_spam_suspect = ($comment_id == 'new' and ( e2_post_data_is_spam_suspicios () or e2_cookie_data_is_spam_suspicios_for_note_id_($note_id) )); $is_new = 1; $result = false; if (!is_numeric ($note_id)) { $_fp_error = FP_NO_ID_OR_NEW; } elseif (!is_numeric ($comment_id) and !($comment_id == 'new')) { $_fp_error = FP_NO_ID_OR_NEW; } else { if ( $text == '' or ( !$gip_name and ($name == '' or $email == '') ) ) { $_fp_error = FP_EMPTY_FIELD; } if ($comment_id == 'new') { $last_comment = @unserialize (file_get_contents (USER_FOLDER. '/last-comment.psa')); if (md5 ($name . $email . $text) == $last_comment['md5']) { $_fp_error = FP_COMMENT_DOUBLE_POST; } if ( isset ($_config['max_comment_length']) and strlen (@$_POST['text']) > ($_config['max_comment_length']) ) { $_fp_error = FP_COMMENT_TOO_LONG; } $noterec = e2_note_by_id ($note_id); if ($comment_id == 'new' and !e2_note_is_ok_for_comments ($noterec)) { $_fp_error = FP_NOT_COMMENTABLE; } if ($is_spam_suspect) { $_fp_error = FP_COMMENT_SPAM_SUSPECT; } } } if (!$_fp_error) { e2_drop_caches_for_note_($note_id); if ($comment_id == 'new') { $commentrec = array ( 'NoteID' => (int) $note_id, 'AuthorName' => $name, 'AuthorEmail' => $email, 'Text' => $text, 'Reply' => '', 'IsVisible' => 1, 'IsAnswerAware' => 1, 'IsSubscriber' => (int) $is_subscriber, 'IsSpamSuspect' => (int) $is_spam_suspect, 'IsNew' => (int) $is_new, 'Stamp' => (int) time (), 'LastModified' => (int) time (), 'IP' => e2_mysql_real_escape_string ($_SERVER['REMOTE_ADDR']), 'IsGIPUsed' => intval (!empty ($gip_name) && !empty ($gip_author_id)), 'GIP' => !empty ($gip_name) ? e2_mysql_real_escape_string ($gip_name) : '', 'GIPAuthorID' => !empty ($gip_author_id) ? e2_mysql_real_escape_string ($gip_author_id) : '', ); if (($commentrec = e2_insert_record ('Comments', $commentrec)) !== false) { $comment_id = $commentrec['ID']; $last_comment = array ( 'id' => $comment_id, 'md5' => md5 ($name . $email . $text), ); @write_file (USER_FOLDER. 'last-comment.psa', serialize ($last_comment)); $result = (int) $comment_id; $unsubscribe_key = md5 ($commentrec['ID'].$commentrec['Stamp'].'x'); e2_set_cookie ('commenter_ph', $unsubscribe_key); $note = e2_note_by_id ($note_id); $note_url = e2_compose_url ('e2m_note', array ('*note' => $note)); $out['comment-time'] = array ($lastmod, e2_current_timezone ()); $out['commenter'] = $name; $out['commenter-email'] = $email; $out['comment-text'] = $text; $out['note-title'] = $note['Title']; $out['note-href'] = $note_url; $out['comment-href'] = $note_url; $out['comments-disable-href'] = e2_compose_url ('e2m_note_flag', array ( '*note' => $note, 'flag' => 'IsCommentable', 'value' => 0 )); $out['reply-href'] = e2_compose_url ( 'e2m_comment_reply', array ( '*note' => $note, 'comment-num_ber' => e2comments__note_latest_comment_number ($note_id) ) ); if (isset ($settings['user']['email']) and @$settings['notifications']['new_comments']) { $mail_body = e2_mail_body_using_template ( 'comment-new-to-author', $out ); $mail_subj = e2l_get_string ( 'em--comment-new-to-author-subject', $out ); $mail_to = $settings['user']['email']; $mail_headers = 'From: '. e2_mail_from () ."\r\n". 'Reply-to: '. $name .' <'. $email .">"; e2_mail ($mail_to, $mail_subj, $mail_body, $mail_headers); } if (!$is_spam_suspect) { unset ($out['commenter-email']); $mail_headers = 'From: '. e2_mail_from (); foreach (e2_subscribers_by_note ($note, $email) as $man) { $p_email = $man['AuthorEmail']; $p_hash = md5 ($man['ID'].$man['Stamp'].'x'); $out['unsubscribe-href'] = e2_compose_url ('e2m_unsubscribe', array ( '*note' => $note, 'unsubscribe-email' => $p_email, 'unsubscribe-key' => $p_hash ) ); $mail_to = $p_email; $mail_body = e2_mail_body_using_template ('comment-new-to-public', $out); $mail_subj = e2l_get_string ( 'em--comment-new-to-public-subject', $out ); e2_mail ($mail_to, $mail_subj, $mail_body, $mail_headers); } } } else { $_fp_error = FP_INSERT_ERROR; } } else { $comment_record = array ( 'ID' => $comment_id, 'Text' => $text, 'IsSubscriber' => ((int) $is_subscriber), 'LastModified' => time (), ); if (!empty ($name)) $comment_record['AuthorName'] = $name; if (!empty ($email)) $comment_record['AuthorEmail'] = $email; if (e2_update_record ('Comments', $comment_record)) { $result = (int) $comment_id; } else { $_fp_error = FP_UPDATE_ERROR; }; } } if ($result_type == 'ajaxresult') return $ajaxresult; else return array ((int) $note_id, $result, $processed); } function e2m_most_commented () { global $settings, $_strings, $_config; $period = @$_GET['period']; if ($period == '') $period = $_config['hot_period']; $after = time () - e2_period_length ($period); return e2_notes_by_criteria (array ( 'query' => "SELECT `IsVisible`, `Stamp`, `NoteID` ID, count(*) quantity ". "FROM `". $_config['db_table_prefix'] . "Comments` c ". "WHERE (`Stamp` > ". $after . ") ". "AND c.`IsVisible` = 1 ". "GROUP BY `NoteID` ". "ORDER BY quantity ". "DESC ". "LIMIT " . $settings['appearance']['notes_per_page'], 'query-returns-only-ids' => 1, 'limit' => $settings['appearance']['notes_per_page'], 'title' => e2l_get_string ('pt--most-commented', array ('period' => $period)), 'heading' => e2l_get_string ('pt--most-commented', array ('period' => $period)), 'nothing' => $_strings['gs--no-such-notes'], )); } function e2m_favourites ($parameters = array ()) { global $_config, $_strings; return e2_notes_by_criteria (array ( 'query' => "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=1 AND `IsFavourite`=1 ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY `Stamp` DESC", 'page' => $parameters['page'], 'candy' => 'e2m_favourites', 'parameters' => $parameters, 'title' => $_strings['pt--favourites'], 'heading' => $_strings['pt--favourites'], 'nothing' => $_strings['gs--no-favourites'], )); } function e2_period_length ($period) { if ('year' == $period) return SECONDS_IN_A_YEAR; elseif ('month' == $period) return SECONDS_IN_A_MONTH; elseif ('week' == $period) return SECONDS_IN_A_DAY * 7; elseif ('day' == $period) return SECONDS_IN_A_DAY; else return PHP_INT_MAX; } function e2_arbitrary_list ($data) { global $_current_url; if (__LOG) __log ('Arbitrary list ('. $data['_log'] .') {'); $stopwatch_n = getmicrotime (); $arbitrary_ctree = null; if ($data['cache'] and is_file ($data['cache-filename'])) { $arbitrary_ctree = @unserialize (file_get_contents ($data['cache-filename'])); } $still_valid = true; if ($data['cache-filename-expires']) { if ($data['cache'] and is_file ($data['cache-filename-expires'])) { $time = time (); $expires = (int) @file_get_contents ($data['cache-filename-expires']); if (__LOG) __log ('List expires '. date ('r', $expires) .', now '. date ('r', $time)); $still_valid = ($time < $expires); } } $notes_list = array (); if ($data['cache'] and is_array ($arbitrary_ctree) and $still_valid) { if (__LOG) __log ('Retrieve cached ctree'); $notes_list = $arbitrary_ctree; } else { if (__LOG) __log ('Assemle cacheable ctree...'); $notes = array (); if (e2_mysql_query ($data['query'])) { $result = e2_mysql_result_as_array (); foreach ($result as $k => $noterec) { $noterec = e2_note_by_id ($noterec['ID']); if (e2_noterec_is_visible ($noterec) and $noterec['IsPublished']) { $note['_']['_id'] = $noterec['ID']; $note['_']['_ord'] = $k; $note['_']['_ord_max'] = count ($result) - 1; $note['href'] = e2_compose_url ('e2m_note', array ('*note' => $noterec)); $note['time'] = array ($noterec['Stamp'], e2_note_timezone ($noterec)); $note['title'] = e2_kavychki (htmlspecialchars ($noterec['Title'], ENT_NOQUOTES, HSC_ENC)); $notes_list[] = $note; } } $arbitrary_ctree = $notes_list; if ($data['cache']) { @write_file ($data['cache-filename'], serialize ($arbitrary_ctree)); if ($data['cache-filename-expires']) { @write_file ($data['cache-filename-expires'], time () + $data['expires-after']); } } } } foreach ($notes_list as $k => $v) { $notes_list[$k]['current?'] = ($notes_list[$k]['href'] == $_current_url); } if (__LOG) __log ('} // Arbitrary list @ '. round (getmicrotime () - $stopwatch_n, 3)); return $notes_list; } function e2_most_read_list () { global $_config; $after = time () - e2_period_length ($_config['popular_period']); return e2_arbitrary_list (array ( '_log' => 'most_read', 'cache' => CACHE_POPULAR, 'cache-filename' => CACHE_FILENAME_POPULAR, 'cache-filename-expires' => CACHE_FILENAME_POPULAR_EXPIRES, 'expires-after' => SECONDS_IN_A_DAY, 'query' => ( "SELECT n.`ID`, n.`Title`, n.`IsFavourite`, a.`EntityID`, SUM(a.`ReadCount`) ReadCount ". "FROM `". $_config['db_table_prefix'] . "Actions` a, ". "`". $_config['db_table_prefix'] . "Notes` n  ". "WHERE a.`Stamp` > ". $after ." ". e2_and_note_visibility_check_sql (). "AND a.`EntityID` = n.`ID` ". "GROUP BY a.`EntityID` ". "ORDER BY `IsFavourite` DESC, ReadCount DESC ". "LIMIT 10" ), )); } function e2m_password_reset () { global $_strings, $_superconfig, $settings; if (!is_file (USER_FOLDER. 'password-reset.txt')) { $key = e2_sha1 (rand ()); $url = e2_compose_url ('e2m_password', array ('recovery-key' => $key)); @write_file (USER_FOLDER. 'password-reset.txt', $url); } $ret['title'] = $_strings['pt--password-reset']; $ret['heading'] = $_strings['pt--password-reset']; $show_mail_form_controls = (bool) ($mail_to = $settings['user']['email']); $ret['form'] = 'form-password-reset-email'; $ret['form-password-reset-email'] = array ( 'form-action' => e2_compose_url ('e2s_password_reset_email'), 'show-controls?' => $show_mail_form_controls, 'submit-text' => $_strings['fb--send-link-by-email'], ); if (!@$_superconfig['user_has_no_access_to_files']) { $ret['form-password-reset-email']['reset-info'] = $_strings['gs--password-reset-link-saved']; } elseif (!$show_mail_form_controls) { e2_error ($_strings['er--cannot-reset-password']); } return $ret; } function e2s_password_reset_email () { global $_strings, $settings; if ($_SERVER['REQUEST_METHOD'] != 'POST') return e2_go_to (); if (array_key_exists ('email', $_POST)) $email = trim ($_POST['email']); if (!$email) { e2_error ($_strings['er--cannot-send-link-email-empty']); e2_go_to (e2_compose_url ('e2m_password_reset')); die; } $correct_url = @file_get_contents (USER_FOLDER. 'password-reset.txt'); if (strlen ($correct_url) == 0) { e2_error ($_strings['er--error-occurred']); e2_go_to (e2_compose_url ('e2m_password_reset')); die; } if ($mail_to = $settings['user']['email']) { if ($email == $mail_to) { $mail_body = e2_mail_body_using_template ( 'password-reset', array ('reset-href' => $correct_url) ); $mail_subj = $_strings['em--password-reset-subject']; $mail_headers = 'From: '. e2_mail_from (); e2_mail ($mail_to, $mail_subj, $mail_body, $mail_headers); } e2_error ($_strings['gs--password-reset-link-sent-maybe'], E2E_MESSAGE); e2_go_to (e2_compose_url ('e2m_password_reset')); die; } die; } function e2m_password ($parameters) { global $settings, $_strings; $recovery_mode = false; $key = ''; if (array_key_exists ('recovery-key', $parameters)) { $key = $parameters['recovery-key']; $url = e2_compose_url ('e2m_password', array ('recovery-key' => $key)); $correct_url = @file_get_contents (USER_FOLDER. 'password-reset.txt'); if (strlen ($correct_url) > 0) { $recovery_mode = ($url == $correct_url); } } if (e2_secure () or $recovery_mode) { $ret['title'] = $_strings['pt--password']; $ret['heading'] = $_strings['pt--password-for-blog']; if ($recovery_mode) { $ret['title'] = $_strings['pt--password-reset']; $ret['heading'] = $_strings['pt--password-reset']; } $ret['form'] = 'form-password'; $ret['form-password'] = array ( 'form-action' => e2_compose_url ('e2s_password_save'), '.recovery-key' => $key, 'recovering?' => $recovery_mode, 'submit-text' => $_strings['fb--change'], ); return $ret; } else { e2_go_to (); } } function e2m_sessions () { global $settings, $_strings; $auth_data = e2_load_auth_data (); $ret['title'] = $_strings['pt--sessions']; $ret['heading'] = $_strings['pt--sessions']; $sessions = array (); $key = $_COOKIE[e2_cookie_prefix ('key')]; foreach ($auth_data['sessions'] as $k => $v) { $sessions[] = array ( 'current?' => e2_sha1 ($key) === $v['key_hash'], 'opened' => array ((int) $v['stamp'], e2_no_timezone ()), 'ip-address' => $v['remote_ip'], 'source' => ($v['remote_ip'] == '127.0.0.1')? $_strings['gs--locally'] : $v['remote_ip'], 'title' => e2_ua_name ($v['ua']), 'user-agent' => $v['ua']? $v['ua'] : $_strings['gs--unknown'], ); } $sessions = array_reverse ($sessions); $ret['sessions']['each'] = $sessions; if (count ($sessions) > 1) { $ret['form'] = 'form-sessions'; $ret['form-sessions'] = array ( 'form-action' => e2_compose_url ('e2s_drop_other_sessions'), 'submit-text' => $_strings['fb--end-all-sessions-but-this'], ); } return $ret; } function e2m_sign_in () { if (e2_secure ()) { e2_go_to (e2_compose_url ('e2m_frontpage', array ('page' => 1))); } else { return array (); } } function e2m_sign_out () { global $_strings; $auth_data = e2_load_auth_data (); $remove_session = -1; if (array_key_exists ('sessions', $auth_data) and is_array ($auth_data['sessions'])) { foreach ($auth_data['sessions'] as $k => $v) { $key = $_COOKIE[e2_cookie_prefix ('key')]; if (e2_sha1 ($key) === $v['key_hash']) { $remove_session = $k; break; } } } if ($remove_session > -1) unset ($auth_data['sessions'][$remove_session]); if (!e2_save_auth_data ($auth_data)) { e2_error ($_strings['er--cannot-write-auth-data'], E2E_PERMISSIONS_ERROR); } e2_set_cookie ('key', ''); e2_go_to (); die; } function e2s_password_save () { global $settings, $_strings; $recovery_mode = false; $old_password = trim ($_POST['old-password']); if ($key = trim ($_POST['recovery-key'])) { $url = e2_compose_url ('e2m_password', array ('recovery-key' => $key)); $correct_url = @file_get_contents (USER_FOLDER. 'password-reset.txt'); if (strlen ($correct_url) > 0) { $recovery_mode = ($url == $correct_url); } } if (e2_is_correct_password ($old_password) or $recovery_mode) { $new_password = trim ($_POST['new-password']); if ($new_password != '') { if (@write_file (USER_FOLDER. '/password-hash.psa', serialize (e2_sha1 ($new_password)))) { @unlink (USER_FOLDER. 'password-reset.txt'); e2_error ($_strings['gs--password-changed'], E2E_MESSAGE); e2_go_to (); } else { e2_error ($_strings['er--could-not-change-password'], E2E_PERMISSIONS_ERROR); e2_go_to (e2_compose_url ('e2m_password', array ('recovery-key' => ''))); } } else { e2_error ($_strings['er--no-password-entered'], E2E_USER_ERROR); e2_go_to (e2_compose_url ('e2m_password', array ('recovery-key' => ''))); } } else { e2_error ($_strings['er--wrong-password'], E2E_USER_ERROR); e2_go_to (e2_compose_url ('e2m_password', array ('recovery-key' => ''))); } die; } function e2s_sign_in_necessary () { e2_go_to (e2_compose_url ('e2m_sign_in')); die; } function e2s_sign_in () { global $_strings; $auth_data = e2_load_auth_data (); if ($_SERVER['REQUEST_METHOD'] == 'POST') { $password = @$_POST['password']; $is_public_pc = @$_POST['is_public_pc']; } else { $password = @$_GET['password']; $is_public_pc = false; } if (e2_is_correct_password ($password)) { @unlink (USER_FOLDER. 'password-reset.txt'); $session = array ( 'stamp' => time (), 'remote_ip' => $_SERVER['REMOTE_ADDR'], 'key_hash' => e2_pass_key ($is_public_pc), 'ua' => $_SERVER['HTTP_USER_AGENT'], ); $auth_data['sessions'][] = $session; } elseif (strlen (trim ($password)) > 0) { e2seq__wait_before_checking_password (); e2_error ($_strings['er--wrong-password'], E2E_USER_ERROR); } if (!e2_save_auth_data ($auth_data)) { e2_error ($_strings['er--cannot-write-auth-data'], E2E_PERMISSIONS_ERROR); e2_go_to (); die; } e2_go_back (); die; } function e2s_drop_other_sessions () { global $_strings; $auth_data = e2_load_auth_data (); foreach ($auth_data['sessions'] as $k => $v) { $key = $_COOKIE[e2_cookie_prefix ('key')]; if (e2_sha1 ($key) === $v['key_hash']) { $session = $v; break; } } $auth_data['sessions'] = array ($session); if (!e2_save_auth_data ($auth_data)) { e2_error ($_strings['er--cannot-write-auth-data'], E2E_PERMISSIONS_ERROR); } e2_go_back (); die; } function e2_is_correct_password ($password) { $password_hash = @unserialize (file_get_contents (USER_FOLDER. '/password-hash.psa')); return (e2_sha1 ($password) === $password_hash and trim ($password) != ''); } function e2_pass_key ($public_pc = false) { global $settings; $key = e2seq__challenge (); $kesha = e2_sha1 ($key); e2_set_cookie ('key', $key, !$public_pc); return $kesha; } function e2_secure () { global $secure, $settings, $_auth_sessions; if (isset ($secure)) return $secure; $secure = false; if (isset ($_COOKIE[e2_cookie_prefix ('key')])) { $key = $_COOKIE[e2_cookie_prefix ('key')]; $auth_data = e2_load_auth_data (); $key_hashes = array (); if (array_key_exists ('sessions', $auth_data) and is_array ($auth_data['sessions'])) { foreach ($auth_data['sessions'] as $session) { $key_hashes[] = $session['key_hash']; } $_auth_sessions['count'] = count ($auth_data['sessions']); } if (1) { $secure = (bool) in_array (e2_sha1 ($key), $key_hashes, true); } if (!$secure) { e2_set_cookie ('key', ''); } } return $secure; } function e2_sha1 ($src) { if (function_exists ('sha1')) { return sha1 ($src); } else { return substr (md5 ($src) . md5 (' '.$src), 0, 40); } } function e2_load_auth_data () { if (is_file (USER_FOLDER . 'auth.psa')) { $auth_data = unserialize (@file_get_contents (USER_FOLDER . 'auth.psa')); if ($auth_data) return $auth_data; } return array (); } function e2_save_auth_data ($auth_data) { return write_file (USER_FOLDER . 'auth.psa', serialize ($auth_data)); } function e2_key_cookie () { if ($key = $_COOKIE[e2_cookie_prefix ('key')]) { return e2_cookie_prefix ('key') .'='. $key .""; } } function e2_key_cookie_as_http_header () { if ($key = $_COOKIE[e2_cookie_prefix ('key')]) { return 'Cookie: '. e2_cookie_prefix ('key') .'='. $key ."\r\n"; } return "\r\n"; } function e2_ua_name ($ua) { global $_strings; if (strstr ($ua, 'iPhone')) return $_strings['gs--ua-iphone']; if (strstr ($ua, 'iPad')) return $_strings['gs--ua-ipad']; if (strstr ($ua, 'Opera')) $ret = $_strings['gs--ua-opera']; if (strstr ($ua, 'Firefox')) $ret = $_strings['gs--ua-firefox']; if (strstr ($ua, 'Chrome')) $ret = $_strings['gs--ua-chrome']; if (strstr ($ua, 'Safari') and !strstr ($ua, 'Chrome')) $ret = $_strings['gs--ua-safari']; if (!$ret) $ret = $_strings['gs--ua-unknown']; if (strstr ($ua, 'Macintosh')) { if ($ret) $ret .= ' '. $_strings['gs--ua-for-mac']; } return $ret; } function e2j_check_password () { $password_hash = @unserialize (file_get_contents (USER_FOLDER. '/password-hash.psa')); $password = ''; if (array_key_exists ('password', $_POST)) $password = $_POST['password']; e2seq__wait_before_checking_password (); if (e2_sha1 ($password) === $password_hash and trim ($password) != '') { die ('password-correct'); } die ('password-wrong'); } function e2seq__challenge () { $challenge = ''; $hex = '0123456789abcdef'; for ($i = 0; $i < 40; $i++) $challenge .= $hex[mt_rand (0, 15)]; $challenge .= time (); $challenge = e2_sha1 ($challenge); return $challenge; } function e2seq__wait_before_checking_password () { if (is_file (USER_FOLDER. 'password-wait.psa')) { $password_wait = unserialize ( file_get_contents (USER_FOLDER. '/password-wait.psa') ); if ($password_wait['delay'] < 5) { $password_wait['delay'] ++; } if (time () - $password_wait['time'] > SECONDS_IN_A_MINUTE) { $password_wait['delay'] = 0; } $password_wait['time'] = time (); } else { $password_wait = array ( 'time' => time (), 'delay' => 5, ); } write_file (USER_FOLDER . 'password-wait.psa', serialize ($password_wait)); sleep ($password_wait['delay']); } function e2seq__persistent_key () { static $persistent_key; if(empty($persistent_key)) $persistent_key = md5 ('seсret'); return $persistent_key; } function e2_encrypt ($string) { $key = e2seq__persistent_key (); $kl = strlen ($key); $l = strlen ($string); $ret = ''; for ($i = 0; $i < $l + rand (16, 64); ++ $i) { if ($i > $l) { $chartocode_ord = rand (0, 127); } elseif ($i == $l) { $chartocode_ord = 0; } else { $chartocode_ord = ord ($string[$i]); } $newchar = chr (($chartocode_ord + ord ($key[$i%$kl])) % 256); $ret .= $newchar; } $ret = base64_encode ($ret); return $ret; } function e2_decrypt ($string) { $key = e2seq__persistent_key (); $kl = strlen ($key); $string = base64_decode ($string); $l = strlen ($string); $ret = ''; for ($i = 0; $i < $l; ++ $i) { $chardecoded_ord = (ord ($string[$i]) + 256 - ord ($key[$i%$kl])) % 256; if ($chardecoded_ord === 0) break; $ret .= chr ($chardecoded_ord); } return $ret; } $_candies_installer = array ( 'e2s_build', 'e2m_info', 'e2m_install', 'e2j_check_db_config', 'e2j_list_databases', 'e2s_instantiate', 'e2s_install', 'e2s_update_perform', ); $_candies_public = array ( 'e2m_info', 'e2m_frontpage', 'e2m_rss', 'e2m_json', 'e2m_note', 'e2m_note_json', 'e2m_note_read', 'e2m_note_comment', 'e2m_draft_preview', 'e2m_tags', 'e2m_tag', 'e2m_tag_rss', 'e2m_tag_json', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_comments', 'e2m_everything', 'e2m_year', 'e2m_month', 'e2m_day', 'e2m_unsubscribe', 'e2m_theme_preview', 'e2m_password_reset', 'e2s_password_reset_email', 'e2m_password', 'e2s_password_save', 'e2s_sign_in', 'e2m_sign_out', 'e2m_gip_sign_in', 'e2m_gip_sign_in_callback', 'e2m_gip_sign_out', 'e2s_comment_process', 'e2s_search', 'e2s_bsi_step', 'e2j_check_password', 'e2s_notify', ); $_candies_to_disallow_in_read_only = array ( 'e2m_write', 'e2m_note_edit', 'e2s_note_process', 'e2s_note_publish', 'e2s_note_delete', 'e2m_note_flag_favourite', 'e2m_note_flag', 'e2m_note_comment', 'e2m_comment_edit', 'e2m_comment_delete', 'e2m_comment_reply', 'e2m_comment_reply_delete', 'e2m_comment_flag', 'e2m_comment_flag_ajax', 'e2m_unsubscribe', 'e2s_comment_process', 'e2m_settings', 'e2m_timezone', ); $_candies_public = array_merge ($_candies_public, $_candies_installer); $_candies_indexable = array ( 'e2m_note', ); $_candies_indexable_conditionally = array ( 'e2m_frontpage', 'e2m_tag', 'e2m_favourites', 'e2m_most_commented', 'e2m_found', 'e2m_tags', 'e2m_everything', ); $_candies_ajax = array ( 'e2j_check_db_config', 'e2j_list_databases', 'e2j_check_password', 'e2j_userpic_upload', 'e2j_file_upload', 'e2j_file_remove', 'e2j_note_livesave', 'e2m_note_flag_favourite', 'e2m_comment_flag_ajax', 'e2m_tag_flag_ajax', ); function e2_modes ($parameters) { global $content, $_strings; if (!is_array ($parameters)) $parameters = array (); if (array_key_exists ('~', $parameters)) { $page = $parameters['~']; } if (e2_is_installed ()) { if (__LOG) __log ('Popular and tags menu {'); if (!$content['popular']) { $content['popular'] = array ( 'title' => $_strings['nm--most-read'], ); $content['popular']['each'] = e2_most_read_list (); } if (count ($content['popular']['each']) < 10) unset ($content['popular']['each']); if (!$content['tags']) { $content['tags']['each'] = e2_tags_with_usage_info (); $content['tags']['many?'] = count ($content['tags']['each']) > KEYWORDS_MANY_THRESH; $content['tags']['menu-each'] = e2_tags_menu ($parameters); } if (__LOG) __log ('} // Popular and tags menu'); } } function e2_blog_title () { global $settings, $_strings; if ( array_key_exists ('site_title', $settings) and trim ($settings['site_title']) != '' ) { return trim ($settings['site_title']); } else { return $_strings['e2--default-blog-title']; } } function e2_blog_author () { global $settings, $_strings; if ( array_key_exists ('author', $settings) and trim ($settings['author']) != '' ) { return trim ($settings['author']); } else { return $_strings['e2--default-blog-author']; } } function e2_blog_userpic () { global $full_blog_url; if (is_file (USER_FOLDER .'userpic@2x.png')) { return $full_blog_url .'/'. USER_FOLDER .'userpic@2x.png'; } elseif (is_file (USER_FOLDER .'userpic@2x.jpg')) { return $full_blog_url .'/'. USER_FOLDER .'userpic@2x.jpg'; } else { return false; } } function e2m_info () { global $settings, $_config, $server_name, $folder_on_server, $_template; $array = array ( 'E2_VERSION' => E2_VERSION, 'E2_RELEASE' => E2_RELEASE, 'E2_UA_STRING' => E2_UA_STRING, '---', 'PHP_VERSION' => PHP_VERSION, '---', 'installed' => (bool) e2_is_installed (), 'server_name' => $server_name, 'folder_on_server' => $folder_on_server, '---', 'request_logging' => $_config['request_logging'], 'default formatter' => $_config['default_formatter'], '---', 'theme' => $settings['template'], '---', 'Olba name' => $_template['name'], 'Olba max_image_width' => $_template['max_image_width'], 'Olba stack' => $_template['stack'], '---', 'Neasden' => substr (md5 (file_get_contents ('system/neasden/neasden.php')), 0, 4), '---', ); echo '<pre>'; foreach ($array as $k => $v) { if ($v == '---') { echo "\n"; continue; } echo str_pad ($k, 24); echo '\''; print_r ($v); echo '\''; echo "\n"; } echo '</pre>'; die; } function e2s_notify () { global $_config; if ($_config['holborn']) { $json_src = @$_GET['src']; if ($json_src == '') { if (__LOG) __log ('Holborn: No src URL'); die; } $json = file_get_contents ($json_src); $json = e2hb__json_filter ($json); $note_info = json_decode ($json, true); if (!$note_info) { if (__LOG) __log ('Holborn: No meaningful info from '. $json_src .' ('. json_last_error () .')'); if ($existing_noterec = e2hb__note_by_source_json_src ($json_src)) { if (__LOG) __log ('Holborn: Delete note with ID '. $existing_noterec['ID']); e2_delete_note_by_id ($existing_noterec['ID']); } die; } e2hb__add_note ($note_info, $json_src); } die; } function e2m_sources ($parameters) { global $_config; $ord = $_GET['ord']; if (!$ord) $ord = 'ID'; $ord = "`". e2_mysql_real_escape_string ($ord) ."`"; e2_mysql_query ( "SELECT *, REPLACE(REPLACE(REPLACE(`URL`, 'http://', ''), 'https://', ''), 'www.', '') AS _URLX ". "FROM `". $_config['db_table_prefix'] . "Sources` " . "ORDER BY ". $ord ); $result = e2_mysql_result_as_array (); foreach ($result as $item) { $idinfo = $item['ID']; if ($item['ID'] != $item['TrueID']) $idinfo .= '<br />'. $item['TrueID']; $source = array ( 'id' => $idinfo, 'userpic-href' => $item['PictureURL'], 'href' => $item['URL'], 'href-display' => str_replace ('/', '/<wbr>', $item['URL']), 'href-filtered' => str_replace ('/', '/<wbr>', $item['_URLX']), 'title' => $item['Title'], 'author' => $item['AuthorName'], 'true?' => $item['ID'] == $item['TrueID'], 'whitelisted?' => $item['IsWhiteListed'], 'trusted?' => $item['IsTrusted'], ); if (!$item['IsTrusted']) { $source['trust-url'] = e2_compose_url ( 'e2m_source_trust', array ('source' => $item['ID']) ); } if ($item['IsTrusted']) { $source['premoderate-url'] = e2_compose_url ( 'e2m_source_premoderate', array ('source' => $item['ID']) ); } $source['ban-url'] = e2_compose_url ( 'e2m_source_ban', array ('source' => $item['ID']) ); $source['forget-url'] = e2_compose_url ( 'e2m_source_forget', array ('source' => $item['ID']) ); $sources[] = $source; } $ret = array ( 'title' => 'Sources', 'heading' => 'Sources', ); if (count ($sources)) { $ret['sources'] = $sources; } else { $ret['nothing'] = 'No sources'; } return $ret; } function e2m_source_trust ($parameters) { global $_config; $source_id = $parameters['source']; e2_mysql_query ( "UPDATE  ". $_config['db_table_prefix'] . "Sources ". "SET `IsWhitelisted`=1, `IsTrusted`=1 ". "WHERE `ID`=". $source_id ); e2_mysql_query ( "UPDATE  ". $_config['db_table_prefix'] . "Notes ". "SET `IsPublished`=1 ". "WHERE `SourceID`=". $source_id ); e2_bsi_start_indexing (); e2_notes_drop_caches (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); e2_go_to (''); die; } function e2m_source_premoderate ($parameters) { global $_config; $source_id = $parameters['source']; e2_mysql_query ( "UPDATE  ". $_config['db_table_prefix'] . "Sources ". "SET `IsTrusted`=0 ". "WHERE `ID`=". $source_id ); e2_notes_drop_caches (); e2_go_to (''); die; } function e2m_source_ban ($parameters) { global $_config; $source_id = $parameters['source']; e2_mysql_query ( "UPDATE  ". $_config['db_table_prefix'] . "Sources ". "SET `IsWhiteListed`=0, `IsTrusted`=0 ". "WHERE `ID`=". $source_id ); e2_mysql_query ( "DELETE FROM  ". $_config['db_table_prefix'] . "Notes ". "WHERE `SourceID`=". $source_id ); e2_notes_drop_caches (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); e2_go_to (''); die; } function e2m_source_forget ($parameters) { global $_config; $source_id = $parameters['source']; e2_mysql_query ( "DELETE FROM  ". $_config['db_table_prefix'] . "Sources ". "WHERE `ID`=". $source_id ); e2_mysql_query ( "DELETE FROM  ". $_config['db_table_prefix'] . "Notes ". "WHERE `SourceID`=". $source_id ); e2_notes_drop_caches (); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); e2_go_to (''); die; } function e2hb__add_note ($note_info, $json_src) { if (__LOG) __log ('Holborn: Note info == '. print_r ($note_info, true)); if (@$note_info['items']) { if (__LOG) __log ('Holborn: JSON feed format'); $sourcerec = e2hb__sourcerec_from_blog_info (array ( 'author' => $note_info['author']['name'], 'title' => $note_info['title'], 'href' => $note_info['author']['url'], 'userpic-href' => $note_info['author']['avatar'], )); if (!$sourcerec['IsWhiteListed']) return; if (preg_match ('/\+(\d\d)\:(\d\d)/', $note_info['items'][0]['date_published'], $matches)) { $offset = $matches[1] * SECONDS_IN_AN_HOUR + $matches[2] * SECONDS_IN_A_MINUTE; } $source_note_e2_data = @$note_info['items'][0]['_e2_data'] or $source_note_e2_data = array (); $source_note_e2_data = json_encode ($source_note_e2_data); $noterec = array ( 'Title' => $note_info['items'][0]['title'], 'Text' => $note_info['items'][0]['content_html'], 'FormatterID' => 'raw', 'OriginalAlias' => '', 'Uploads' => '', 'Stamp' => strtotime ($note_info['items'][0]['date_published']), 'Offset' => (int) $offset, 'IsDST' => 0, 'LastModified' => strtotime ($note_info['items'][0]['date_modified']), 'IsCommentable' => 0, 'IsPublished' => $sourcerec['IsTrusted'], 'IsExternal' => 1, 'SourceID' => $sourcerec['ID'], 'SourceNoteID' => $note_info['items'][0]['id'], 'SourceNoteURL' => $note_info['items'][0]['url'], 'SourceNoteJSONURL' => $json_src, 'SourceNoteData' => $source_note_e2_data, ); $note_id = $note_info['items'][0]['id']; } else { if (__LOG) __log ('Holborn: legacy custom format'); $blog_info = @$note_info['blog']; $sourcerec = e2hb__sourcerec_from_blog_info ($blog_info); if (!$sourcerec['IsWhiteListed']) return; $source_note_e2_data = @$note_info['note']['og-images'] or $source_note_e2_data = array (); $source_note_e2_data['og_images'] = $source_note_e2_data; $source_note_e2_data = json_encode ($source_note_e2_data); $noterec = array ( 'Title' => $note_info['note']['title'], 'Text' => $note_info['note']['text'], 'FormatterID' => 'raw', 'OriginalAlias' => '', 'Uploads' => '', 'Stamp' => $note_info['note']['time'][0], 'Offset' => (int) $note_info['note']['time'][1]['offset'], 'IsDST' => (int) $note_info['note']['time'][1]['is_dst'], 'LastModified' => $note_info['note']['last-modified'][0], 'IsCommentable' => 0, 'IsPublished' => $sourcerec['IsTrusted'], 'IsExternal' => 1, 'SourceID' => $sourcerec['ID'], 'SourceNoteID' => $note_info['note']['id'], 'SourceNoteURL' => $note_info['note']['href'], 'SourceNoteJSONURL' => $json_src, 'SourceNoteData' => $source_note_e2_data, ); $note_id = $note_info['note']['id']; } if ( $existing_noterec = e2hb__note_by_source_ids ($sourcerec['ID'], $note_id) ) { $noterec['ID'] = $existing_noterec['ID']; e2_update_record ('Notes', $noterec); } else { $noterec = e2_insert_record ('Notes', $noterec); } e2_index_noterec ($noterec); e2_drop_caches_for_note_($noterec['ID']); @unlink (CACHE_FILENAME_DRAFTS); @unlink (CACHE_FILENAME_DRAFTS_ALIAS_USE_COUNTS); } function e2hb__note_by_source_json_src ($json_src) { global $_config; $result = e2_mysql_query ( "SELECT `ID` FROM ". $_config['db_table_prefix'] . "Notes ". "WHERE `SourceNoteJSONURL`='". $json_src ."' ". "LIMIT 1" ); $result = e2_mysql_result_as_array (); return $result[0]; } function e2hb__note_by_source_ids ($source_id, $source_note_id) { global $_config; $result = e2_mysql_query ( "SELECT `ID` FROM ". $_config['db_table_prefix'] . "Notes ". "WHERE `SourceID`= '". $source_id ."' ". "AND `SourceNoteID`= '". $source_note_id ."' ". "LIMIT 1" ); $result = e2_mysql_result_as_array (); return $result[0]; } function e2hb__json_filter ($json) { for ($i = 0; $i <= 31; ++$i) { $json = str_replace (chr ($i), '', $json); } $json = str_replace (chr (127), '', $json); if (0 === strpos (bin2hex ($json), 'efbbbf')) { $json = substr ($json, 3); } return $json; } function e2hb__sourcerec_from_blog_info ($blog_info) { global $_config; $sourcerec_found = false; $result = e2_mysql_query ( "SELECT * FROM ". $_config['db_table_prefix'] . "Sources ". "WHERE `URL`= '". $blog_info['href'] ."' ". "LIMIT 1" ); $result = e2_mysql_result_as_array (); if (count ($result)) { $sourcerec_found = $result[0]; if ($sourcerec_found['ID'] != $sourcerec_found['TrueID']) { $result = e2_mysql_query ( "SELECT * FROM ". $_config['db_table_prefix'] . "Sources ". "WHERE `ID`= '". $sourcerec_found['TrueID'] ."' ". "LIMIT 1" ); $result = e2_mysql_result_as_array (); if (count ($result)) { $sourcerec_found = $result[0]; } } } $sourcerec = array ( 'Title' => $blog_info['title'], 'AuthorName' => $blog_info['author'], 'PictureURL' => $blog_info['userpic-href'], ); if ($sourcerec_found !== false) { if ( $sourcerec_found['Title'] !== $blog_info['title'] or $sourcerec_found['AuthorName'] !== $blog_info['author'] or $sourcerec_found['PictureURL'] !== $blog_info['userpic-href'] ) { $sourcerec['ID'] = $sourcerec_found['ID']; e2_update_record ('Sources', $sourcerec); } return $sourcerec_found; } else { $sourcerec['URL'] = $blog_info['href']; $sourcerec['IsWhiteListed'] = 1; $sourcerec['IsTrusted'] = 0; $sourcerec = e2_insert_record ('Sources', $sourcerec); $sourcerec['TrueID'] = $sourcerec['ID']; e2_update_record ('Sources', $sourcerec); return $sourcerec; } } function e2_note_source_info ($noterec, $replace_href = false) { global $_config; $out = array (); if (@$noterec['IsExternal']) { if (array_key_exists ('SourceID', $noterec)) { if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Sources` ". "WHERE `ID` = '". $noterec['SourceID'] ."'" )) { $tmp = e2_mysql_result_as_array (); } $out['source'] = $tmp[0]['Title']; $out['source-id'] = $noterec['SourceID']; $out['source-true-id'] = $tmp[0]['TrueID']; $out['source-whitelisted?'] = $tmp[0]['IsWhiteListed']; $out['source-trusted?'] = $tmp[0]['IsTrusted']; if (!$tmp[0]['IsTrusted']) { $out['source-trust-url'] = e2_compose_url ( 'e2m_source_trust', array ('source' => $noterec['SourceID']) ); } if ($tmp[0]['IsTrusted']) { $out['source-premoderate-url'] = e2_compose_url ( 'e2m_source_premoderate', array ('source' => $noterec['SourceID']) ); } $out['source-ban-url'] = e2_compose_url ( 'e2m_source_ban', array ('source' => $noterec['SourceID']) ); $out['source-forget-url'] = e2_compose_url ( 'e2m_source_forget', array ('source' => $noterec['SourceID']) ); $out['author'] = $tmp[0]['AuthorName']; $out['author-href'] = $tmp[0]['URL']; $out['userpic-href'] = $tmp[0]['PictureURL']; } if ($replace_href) { if (array_key_exists ('SourceNoteURL', $noterec) and @$noterec['SourceNoteURL'] != '') { $out['href'] = $noterec['SourceNoteURL']; $out['href-original'] = $noterec['SourceNoteURL']; } } } return $out; } function e2m_frontpage ($parameters = array ()) { global $settings, $_config, $_strings; $page = $parameters['page']; $items_per_page = $settings['appearance']['notes_per_page']; $items_total = e2_notes_count_generic (true, true); if (e2_secure ()) $items_total += e2_notes_count_generic (true, false); $total_pages = ceil ($items_total / $items_per_page); $cache_filename = CACHE_FILENAME_FRONTPAGE; if (e2_secure ()) $cache_filename = CACHE_FILENAME_FRONTPAGE_AUTHOR; if ($page < 1) return e2_error404_mode (); if (CACHE_FRONTPAGE and $page == 1 and is_file ($cache_filename)) { $notes = @unserialize (file_get_contents ($cache_filename)); } if (CACHE_FRONTPAGE and $page == 1 and is_array ($notes)) { } else { if (($result = e2frontpage__latest_notes ($page)) === false) { e2_error ($_strings['er--cannot-show-latest-notes'], E2E_DATABASE_ERROR); return array ( 'title' => htmlspecialchars (e2_blog_title (), ENT_NOQUOTES, HSC_ENC), ); } $notes = array (); if (count ($result) > 0) { foreach ($result as $k => $note) { $note['_']['_id'] = $note['ID']; $note['_']['_title'] = $note['Title']; $note['_']['_ord'] = $k; $note['_']['_ord_max'] = count ($result)-1; $note_ctree = e2_package_note ($note); $notes[] = $note_ctree; } } else { if ($page != 1) return e2_error404_mode (); } if (CACHE_FRONTPAGE and $page == 1) write_file ($cache_filename, serialize ($notes)); } $pages['timeline?'] = true; $pages['count'] = $total_pages; $pages['this'] = (int) $page; if ($total_pages > 1) { if ($page < $total_pages) $pages['earlier-href'] = e2_compose_url ('e2m_frontpage', array ('page' => $page + 1)); if ($page > 1) $pages['later-href'] = e2_compose_url ('e2m_frontpage', array ('page' => $page - 1)); $pages['earlier-title'] = $_strings['gs--earlier']; $pages['later-title'] = $_strings['gs--later']; } $title = e2_blog_title (); return array ( 'frontpage?' => (bool) ($page == 1), 'title' => $title, 'notes' => $notes, 'pages' => $pages, ); } function e2frontpage__latest_notes ($page = 1) { global $settings, $_config; $left_limit = ($page-1) * $settings['appearance']['notes_per_page']; $limit = $left_limit .', '. $settings['appearance']['notes_per_page']; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=1 ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY `Stamp` DESC ". "LIMIT ". $limit )) { $result = e2_mysql_result_as_array (); return $result; } else { return false; } } function e2m_json ($parameters = array ()) { list ($jsonfeed_array, $lastmod) = e2feeds__main_jsonfeed_array_and_lastmod (); $json = json_encode ($jsonfeed_array, E2_JSON_STYLE); e2feeds__flush_payload ($json, $lastmod, 'json'); } function e2m_rss ($parameters = array ()) { list ($jsonfeed_array, $lastmod) = e2feeds__main_jsonfeed_array_and_lastmod (); $rss = e2feeds__rss_using_jsonfeed_array_($jsonfeed_array); e2feeds__flush_payload ($rss, $lastmod, 'rss'); } function e2m_tag_json ($parameters = array ()) { if (array_key_exists ('*tag', $parameters)) { $tagrec = $parameters['*tag']; } else { return e2_error404_mode (); } list ($jsonfeed_array, $lastmod) = e2feeds__tag_jsonfeed_array_and_lastmod ($tagrec); $json = json_encode ($jsonfeed_array, E2_JSON_STYLE); e2feeds__flush_payload ($json, $lastmod, 'json'); } function e2m_tag_rss ($parameters = array ()) { global $settings, $_config, $_strings; if (array_key_exists ('*tag', $parameters)) { $tagrec = $parameters['*tag']; } else { return e2_error404_mode (); } list ($jsonfeed_array, $lastmod) = e2feeds__tag_jsonfeed_array_and_lastmod ($tagrec); $rss = e2feeds__rss_using_jsonfeed_array_($jsonfeed_array); e2feeds__flush_payload ($rss, $lastmod, 'rss'); } function e2m_note_json ($parameters = array ()) { global $settings, $_current_url; $noterec = $parameters['*note']; if ($noterec == false) { return e2_error404_mode (); } if (!e2_noterec_is_visible ($noterec, e2_secure ())) { return e2_error404_mode (); } $noterec['_']['_id'] = $noterec['ID']; $lastmod = $noterec['Stamp']; $jsonfeed_item_array = e2_jsonfeed_item_array_from_noterec_($noterec); $jsonfeed_item_arrays = array ($jsonfeed_item_array); $jsonfeed_array = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($jsonfeed_item_arrays); $jsonfeed_array['title'] = $settings['site_title']; $jsonfeed_array['home_page_url'] = e2_compose_url ('e2m_frontpage', array ('page' => 1)); $jsonfeed_array['feed_url'] = $_current_url; e2feeds__flush_payload (json_encode ($jsonfeed_array, E2_JSON_STYLE), $lastmod, 'json'); } function e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($jsonfeed_item_arrays) { return array ( 'version' => 'https://jsonfeed.org/version/1', 'title' => null, 'home_page_url' => null, 'feed_url' => null, 'icon' => e2_blog_userpic (), 'author' => array ( 'name' => e2_blog_author (), 'url' => e2_compose_url ('e2m_frontpage', array ('page' => 1)), 'avatar' => e2_blog_userpic (), ), 'items' => $jsonfeed_item_arrays, '_e2_version' => E2_VERSION, '_e2_ua_string' => E2_UA_STRING, ); } function e2_jsonfeed_item_array_from_noterec_($noterec) { global $settings; $noterec['_']['_id'] = $noterec['ID']; $url = e2_compose_url ('e2m_note', array ('*note' => $noterec)); $jsonfeed_pubdate = ( e2_format_dt_of_current_timezone ('Y-m-d\TH:i:s', $noterec['Stamp']) . e2_timezone_gmt_offset_of_current_timezone_rfc2822 ($noterec['Stamp'], ':') ); $jsonfeed_lastmod = ( e2_format_dt_of_current_timezone ('Y-m-d\TH:i:s', $noterec['LastModified']) . e2_timezone_gmt_offset_of_current_timezone_rfc2822 ($noterec['LastModified'], ':') ); $rss_pubdate = ( e2_format_dt_of_current_timezone ('D, d M Y H:i:s ', $noterec['Stamp']) . e2_timezone_gmt_offset_of_current_timezone_rfc2822 ($noterec['Stamp']) ); $formatinfo = e2_format_with_formatter ($noterec['FormatterID'], @$noterec['Text'], 'full-rss'); $og_images = e2_og_images ( 'note', $noterec['_']['_id'], $formatinfo['meta']['resources-detected'] ); $return = array ( 'id' => (string) $noterec['ID'], 'url' => $url, 'title' => e2_kavychki (htmlspecialchars ($noterec['Title'], ENT_NOQUOTES)), 'content_html' => $formatinfo['text-final'], 'date_published' => $jsonfeed_pubdate, 'date_modified' => $jsonfeed_lastmod, ); if ($noterec['IsExternal']) { $source_info = e2_note_source_info ($noterec, true); $return['url'] = $source_info['href']; $return['author'] = array ( 'name' => $source_info['author'], 'url' => $source_info['author-href'], 'avatar' => $source_info['userpic-href'], ); } if (count ($og_images) > 0) { $return['image'] = $og_images[0]; } $return['_date_published_rfc2822'] = $rss_pubdate; if ($noterec['Stamp'] < $settings['v3223_rss_permalinks_before_stamp']) { $return['_rss_guid_is_permalink'] = 'true'; $return['_rss_guid'] = $return['url']; } else { $return['_rss_guid_is_permalink'] = 'false'; $return['_rss_guid'] = (string) $noterec['ID']; } $return['_e2_data'] = array ( 'is_favourite' => (bool) $noterec['IsFavourite'], 'links_required' => $formatinfo['meta']['links-required'], 'og_images' => $og_images, ); return $return; } function e2_add_newsfeed ($feed_type, $title, $href) { global $_newsfeeds; $mime_type = ''; if ($feed_type == 'rss') $mime_type = 'application/rss+xml'; if ($feed_type == 'json') $mime_type = 'application/json'; $newsfeed = array ( 'type' => $mime_type, 'title' => htmlspecialchars ($title, ENT_NOQUOTES, HSC_ENC), 'href' => $href ); $_newsfeeds[] = $newsfeed; } function e2feeds__recent_public_noterecs () { global $_config; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=1 ". e2_and_note_visibility_check_sql (). "ORDER BY `Stamp` DESC ". "LIMIT ". $_config['rss_items'] )) { $result = e2_mysql_result_as_array (); return $result; } } function e2feeds__main_jsonfeed_array_and_lastmod () { global $settings, $_current_url; $lastmod = 0; $jsonfeed_item_arrays = array (); $jsonfeed_array = array (); $cache_filename = CACHE_FILENAME_FRONTPAGE_FEED; if (CACHE_FRONTPAGE_FEED and is_file ($cache_filename)) { if (__LOG) __log ('Feed array (RSS, JSON): cached'); $jsonfeed_array = @unserialize (file_get_contents ($cache_filename)); $lastmod = filemtime ($cache_filename); } else { if (__LOG) __log ('Feed array (RSS, JSON): not cached, will need to build'); if (($noterecs = e2feeds__recent_public_noterecs ()) !== false) { foreach ($noterecs as $noterec) { $jsonfeed_item_arrays[] = e2_jsonfeed_item_array_from_noterec_($noterec); $lastmod = max ($lastmod, $noterec['Stamp']); } $jsonfeed_array = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($jsonfeed_item_arrays); $jsonfeed_array['title'] = $settings['site_title']; $jsonfeed_array['home_page_url'] = e2_compose_url ('e2m_frontpage', array ('page' => 1)); $jsonfeed_array['feed_url'] = $_current_url; if (CACHE_FRONTPAGE_FEED) write_file ($cache_filename, serialize ($jsonfeed_array)); } } return array ($jsonfeed_array, $lastmod); } function e2feeds__tag_jsonfeed_array_and_lastmod ($tagrec) { global $settings, $_config, $_strings, $_current_url; $lastmod = 0; $jsonfeed_item_arrays = array (); if ((e2_mysql_query ( "SELECT n.* ". "FROM `". $_config['db_table_prefix'] . "Notes` n ". "INNER JOIN `". $_config['db_table_prefix'] . "NotesKeywords` nk ". "ON nk.`NoteID` = n.`ID` ". "WHERE (nk.`KeywordID` = ". $tagrec['ID'] .") ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY n.`Stamp` DESC ". "LIMIT ". $_config['rss_items'] )) !== false) { $noterecs = e2_mysql_result_as_array (); foreach ($noterecs as $noterec) { $jsonfeed_item_arrays[] = e2_jsonfeed_item_array_from_noterec_($noterec); $lastmod = max ($lastmod, $noterec['Stamp']); } $jsonfeed_array = e2_jsonfeed_array_stub_from_jsonfeed_item_arrays_($jsonfeed_item_arrays); $jsonfeed_array['title'] = ( $settings['site_title'] .', '. $_strings['gs--posts-tagged'] .': '. $tagrec['Keyword'] ); $jsonfeed_array['home_page_url'] = e2_compose_url ('e2m_tag', array ('*tag' => $tagrec)); $jsonfeed_array['feed_url'] = $_current_url; } return array ($jsonfeed_array, $lastmod); } function e2feeds__rss_using_jsonfeed_array_($content) { $tmpl_file = DEFAULTS_FOLDER . 'rss/rss.tmpl.php'; if (is_file ($tmpl_file)) { ob_start (); include $tmpl_file; $rss = ob_get_contents (); ob_end_clean (); } return $rss; } function e2feeds__rss_filter ($rss) { $rss = str_replace ("\x0", '', $rss); for ($i = 0; $i < strlen ($rss); ++$i) { if (ord ($rss[$i]) < 32 and !in_array (ord ($rss[$i]), array (10, 13))) { $rss[$i] = ''; } } return $rss; } function e2feeds__flush_payload ($payload, $lastmod, $feed_type) { $lastmod_rfc_formatted = gmdate ('r', $lastmod); $etag = md5 ($lastmod); if ($feed_type == 'rss') { if (XML_AS_TEXT) { header ('Content-Type: text/plain'); } else { header ('Content-type: application/xml; charset=utf-8'); } } elseif ($feed_type == 'json') { header ('Content-Type: application/json'); } else { header ('Content-Type: text/plain'); } header ('Last-modified: '. $lastmod_rfc_formatted); header ('Etag: '. $etag); header ('Cache-Control: public'); header ('Expires: '. date ('r', $lastmod + SECONDS_IN_A_DAY)); $if_modified_since = isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])? stripslashes ($_SERVER['HTTP_IF_MODIFIED_SINCE']) : false; $if_none_match = isset($_SERVER['HTTP_IF_NONE_MATCH'])? stripslashes ($_SERVER['HTTP_IF_NONE_MATCH']) : false; if ( !$if_modified_since && !$if_none_match or $if_none_match && $if_none_match != $etag or $if_modified_since && $if_modified_since != $lastmod_rfc_formatted ) { if ($feed_type == 'rss') { $rss = e2feeds__rss_filter ($rss); } echo $payload; } else { header ('HTTP/1.1 304 Not Modified'); } die; } function e2m_year ($parameters = array ()) { global $_strings, $_config; $year = $parameters['year']; $mode_title = e2l_get_string ('pt--nth-year', array ('year' => $year)); if (!e2_is_between_beginning_and_now ($year)) { return e2_error404_mode (); } $obvious_prev_i = gmmktime (0, 0, 0, 1, 1, $year - 1); $obvious_next_i = gmmktime (0, 0, 0, 1, 1, $year + 1); list ($prev_i, $next_i) = e2__fruitful_neighbours_with_ymd_($year); $neighbour_candy = 'e2m_year'; if ($prev_i) { $pages['prev-href'] = e2_compose_url ( $neighbour_candy, e2__parameters_with_timestamp_($prev_i) ); $pages['prev-jump?'] = (bool) (gmdate ('Y', $obvious_prev_i) != gmdate ('Y', $prev_i)); $pages['prev-title'] = gmdate ('Y', $prev_i); } if ($next_i) { $pages['next-href'] = e2_compose_url ( $neighbour_candy, e2__parameters_with_timestamp_($next_i) ); $pages['next-jump?'] = (bool) (gmdate ('Y', $obvious_next_i) != gmdate ('Y', $next_i)); $pages['next-title'] = gmdate ('Y', $next_i); } $pages['timeline?'] = false; $pages['this'] = $year; $pages['this-title'] = $year; $start_timeinfo = e2_edge_timeinfo ('start'); $end_timeinfo = e2_edge_timeinfo ('end'); if ( $year == e2_format_dt_of_timezone ('Y', $start_timeinfo['stamp'], $start_timeinfo['timezone']) ) { $starting_month = e2_format_dt_of_timezone ('m', $start_timeinfo['stamp'], $start_timeinfo['timezone']); } else { $starting_month = 1; } if ( $year == e2_format_dt_of_current_timezone ('Y', time ()) ) { $ending_month = e2_format_dt_of_current_timezone ('m', time ()); } else { $ending_month = 12; } $months_with_notes = e2__list_year_months_with_notes ($year); for ($month = 1; $month <= 12; ++ $month) { $initime = gmmktime (0, 0, 0, $month, 1, $year); $year_months[$month] = array ( 'number' => $month, 'start-time' => array ($initime, e2_no_timezone ()), 'href' => gmdate ('Y/m/', $initime), 'real?' => $month >= $starting_month and $month <= $ending_month, 'fruitful?' => @in_array (gmdate ('n', $initime), $months_with_notes), ); } list ($ww_start, $ww_end) = e2_boundaries_worldwide ($year); e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished` = 1 ". e2_and_note_visibility_check_sql (e2_secure ()). "AND `Stamp` BETWEEN ". $ww_start ." ". "AND ". $ww_end ." ". "ORDER BY `Stamp`" ); $result = e2_mysql_result_as_array (); $notes = e2__prepare_notes_list ($result, $year); $ret = array ( 'title' => $mode_title, 'heading' => $mode_title, 'pages' => $pages, 'year' => (int) $year, 'year-months' => $year_months, ); if (count ($notes)) { $ret['notes-list'] = $notes; } else { $ret['nothing'] = $_strings['gs--no-such-notes']; } return $ret; } function e2m_month ($parameters = array ()) { global $_strings, $_config; $year = $parameters['year']; $month = $parameters['month']; $mode_title = e2l_get_string ( 'pt--nth-month-of-nth-year', array ('year' => $year, 'month' => $month) ); if (!e2_is_between_beginning_and_now ($year, $month)) { return e2_error404_mode (); } $obvious_prev_i = gmmktime (0, 0, 0, $month - 1, 1, $year); $obvious_next_i = gmmktime (0, 0, 0, $month + 1, 1, $year); list ($prev_i, $next_i) = e2__fruitful_neighbours_with_ymd_($year, $month); $neighbour_candy = 'e2m_month'; if ($prev_i) { $pages['prev-href'] = e2_compose_url ( $neighbour_candy, e2__parameters_with_timestamp_($prev_i) ); $pages['prev-jump?'] = (bool) (gmdate ('Y/m', $obvious_prev_i) != gmdate ('Y/m', $prev_i)); $pages['prev-title'] = e2l_get_string ( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate ('Y', $prev_i), 'month' => gmdate ('n', $prev_i) ) ); } if ($next_i) { $pages['next-href'] = e2_compose_url ( $neighbour_candy, e2__parameters_with_timestamp_($next_i) ); $pages['next-jump?'] = (bool) (gmdate ('Y/m', $obvious_next_i) != gmdate ('Y/m', $next_i)); $pages['next-title'] = e2l_get_string ( 'gs--nth-month-of-nth-year', array ( 'year' => gmdate ('Y', $next_i), 'month' => gmdate ('n', $next_i) ) ); } $pages['timeline?'] = false; $pages['this-title'] = $mode_title; list ($ww_start, $ww_end) = e2_boundaries_worldwide ($year, $month); e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished` = 1 ". e2_and_note_visibility_check_sql (e2_secure ()). "AND `Stamp` BETWEEN ". $ww_start ." ". "AND ". $ww_end ." ". "ORDER BY `Stamp`" ); $result = e2_mysql_result_as_array (); $notes = e2__prepare_notes_list ($result, $year, $month); $return['title'] = $mode_title; $return['heading'] = $mode_title; $return['pages'] = $pages; $return['year'] = (int) $year; $return['month'] = (int) $month; $return['month-days'] = e2_pack_month_days_with_ymd_($year, $month, false); if (count ($notes)) { $return['notes-list'] = $notes; } else { $return['nothing'] = $_strings['gs--no-such-notes']; } return $return; } function e2m_day ($parameters = array ()) { global $_strings; $year = (int) $parameters['year']; $month = (int) $parameters['month']; $day = (int) $parameters['day']; if (!(e2_is_between_beginning_and_now ($year, $month, $day))) { return e2_error404_mode (); } $mode_title = e2l_get_string ( 'pt--nth-day-of-nth-month-of-nth-year', array ('year' => $year, 'month' => $month, 'day' => $day) ); $obvious_prev_i = gmmktime (0, 0, 0, $month, $day - 1, $year); $obvious_next_i = gmmktime (0, 0, 0, $month, $day + 1, $year); list ($prev_i, $next_i) = e2__fruitful_neighbours_with_ymd_($year, $month, $day); $neighbour_candy = 'e2m_day'; if ($prev_i) { $pages['prev-href'] = e2_compose_url ( $neighbour_candy, e2__parameters_with_timestamp_($prev_i) ); $pages['prev-jump?'] = (bool) (gmdate ('Y/m/d', $obvious_prev_i) != gmdate ('Y/m/d', $prev_i)); $pages['prev-title'] = e2l_get_string ( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate ('Y', $prev_i), 'month' => gmdate ('n', $prev_i), 'day' => gmdate ('j', $prev_i), ) ); } if ($next_i) { $pages['next-href'] = e2_compose_url ( $neighbour_candy, e2__parameters_with_timestamp_($next_i) ); $pages['next-jump?'] = (bool) (gmdate ('Y/m/d', $obvious_next_i) != gmdate ('Y/m/d', $next_i)); $pages['next-title'] = e2l_get_string ( 'gs--nth-day-of-nth-month-of-nth-year', array ( 'year' => gmdate ('Y', $next_i), 'month' => gmdate ('n', $next_i), 'day' => gmdate ('j', $next_i), ) ); } $pages['timeline?'] = false; $pages['this-title'] = $mode_title; if (($result = e2_all_notes_by_ymd ($year, $month, $day)) !== false) { $result = array_reverse ($result); $is_authorized = e2_secure (); foreach ($result as $k => $noterec) { if (e2_noterec_is_visible ($noterec, $is_authorized)) { $noterec['_']['_id'] = $noterec['ID']; $noterec['_']['_ord'] = k; $noterec['_']['_ord_max'] = count ($result) - 1; $notes[] = e2_package_note ($noterec); } } } $return['title'] = $mode_title; $return['heading'] = $mode_title; $return['pages'] = $pages; $return['month-days'] = e2_pack_month_days_with_ymd_($year, $month, $day); if (count ($notes)) { $return['notes'] = $notes; } else { $return['nothing'] = $_strings['gs--no-such-notes']; } return $return; } function e2__full_notes_list () { global $_config; $notes = null; if (CACHE_FULLLIST and is_file (CACHE_FILENAME_FULLLIST)) { $notes = @unserialize (file_get_contents (CACHE_FILENAME_FULLLIST)); if (__LOG) __log ('Everything: retrieving from cache...'); } if (!is_array ($notes)) { if (__LOG) __log ('Everything: retrieving from database...'); e2_mysql_query ( "SELECT `ID`, `Title`, `Stamp`, `LastModified`, `Offset`, `IsDST`, ". "`IsFavourite`, `IsPublished`, `IsVisible`, `SourceNoteURL`, `OriginalAlias` ". "FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished` = 1 ". e2_and_note_visibility_check_sql (). "ORDER BY `Stamp`" ); $result = e2_mysql_result_as_array (); if (__LOG) __log ('Everything: preparing notes list...'); $notes = e2__prepare_notes_list ($result); if (__LOG) __log ('Everything: saving cache...'); if (CACHE_FULLLIST) write_file (CACHE_FILENAME_FULLLIST, serialize ($notes)); } return $notes; } function e2m_everything ($parameters = array ()) { global $_strings; $notes = e2__full_notes_list (); $num_notes = count ($notes); $mode_title = e2l_get_string ('pt--n-posts', array ('number' => $num_notes)); if (array_key_exists ('part', $_GET) and array_key_exists ('of', $_GET)) { if (__LOG) __log ('Everything: splitting into parts...'); $part = $_GET['part']; $of = $_GET['of']; $mode_title .= ' ('. e2l_get_string ('gs--part-x-of-y', array ('part' => $part, 'of' => $of)) .')'; $part_length = $num_notes / $of; $from = ($part-1) * $part_length; $to = $part * $part_length; $notes = array_slice ($notes, round ($from), round ($to - round ($from))); } if (__LOG) __log ('Everything: done, returning'); $return['title'] = $mode_title; $return['heading'] = $mode_title; if (count ($notes)) { $return['notes-list'] = $notes; } else { $return['nothing'] = $_strings['gs--no-notes']; } return $return; } function e2m_sitemap_xml ($parameters = array ()) { if (XML_AS_TEXT) { header ('Content-Type: text/plain'); } else { header ('Content-type: application/xml; charset=utf-8'); } echo '<?xml version="1.0" encoding="UTF-8"?>'."\r\n"; echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'."\r\n"; $notes = e2__full_notes_list (); if (count ($notes)) { $lastmod = @$notes[0]['last-modified']; echo '<url>'."\r\n"; echo '<loc>'. e2_compose_url ('e2m_frontpage', array ('page' => 1)) .'</loc>'."\r\n"; echo '<lastmod>'; echo e2_format_dt_of_timezone ('Y-m-dH:i:s', $lastmod[0], $lastmod[1]); echo '</lastmod>'."\r\n"; echo '<changefreq>hourly</changefreq>'; echo '</url>'."\r\n"; foreach ($notes as $note) { echo '<url>'."\r\n"; echo '<loc>'; echo $note['href']; echo '</loc>'."\r\n"; echo '<lastmod>'; echo e2_format_dt_of_timezone ('Y-m-dH:i:s', $note['last-modified'][0], $note['last-modified'][1]); echo '</lastmod>'."\r\n"; echo '</url>'."\r\n"; } } echo '</urlset>'."\r\n"; die; } function e2_pack_month_days_with_ymd_($year, $month, $day) { $month_days_count = e2_format_dt_of_timezone ('t', gmmktime (0, 0, 0, $month, 1, $year), e2_no_timezone ()); $start_timeinfo = e2_edge_timeinfo ('start'); $end_timeinfo = e2_edge_timeinfo ('end'); if ( $year .'/'. $month == e2_format_dt_of_timezone ('Y/n', $start_timeinfo['stamp'], $start_timeinfo['timezone']) ) { $starting_day = e2_format_dt_of_timezone ('d', $start_timeinfo['stamp'], $start_timeinfo['timezone']); } else { $starting_day = 1; } if ( $year .'/'. $month == e2_format_dt_of_current_timezone ('Y/n', time ()) ) { $ending_day = e2_format_dt_of_current_timezone ('d', time ()); } else { $ending_day = $month_days_count; } $days_with_notes = e2__list_month_days_with_notes ($year, $month); for ($i = 1; $i <= $month_days_count; ++ $i) { $initime = gmmktime (0, 0, 0, $month, $i, $year); $month_days[$i] = array ( 'number' => $i, 'start-time' => array ($initime, e2_no_timezone ()), 'href' => gmdate ('Y/m/d/', $initime), 'this?' => (bool) ($i == $day), 'real?' => $i >= $starting_day and $i <= $ending_day, 'fruitful?' => @in_array (gmdate ('d', $initime), $days_with_notes), ); } return $month_days; } function e2_is_between_beginning_and_now ($year, $month = false, $day = false) { $start_timeinfo = e2_edge_timeinfo ('start'); if ($start_timeinfo === false) { return false; } $visual_year_of_beginning = e2_format_dt_of_timezone ('Y', $start_timeinfo['stamp'], $start_timeinfo['timezone']); $visual_year_of_now = e2_format_dt_of_current_timezone ('Y', time ()); if ($month === false) { return (bool) ( $year >= $visual_year_of_beginning and $year <= $visual_year_of_now ); } else { $visual_month_of_beginning = e2_format_dt_of_timezone ('n', $start_timeinfo['stamp'], $start_timeinfo['timezone']); $visual_month_of_now = e2_format_dt_of_current_timezone ('n', time ()); if ($day === false) { return (bool) ( $month >= 1 and $month <= 12 and ( ($year > $visual_year_of_beginning and $year < $visual_year_of_now) or ($year == $visual_year_of_beginning and $month >= $visual_month_of_beginning) or ($year == $visual_year_of_now and $month <= $visual_month_of_now) ) ); } else { $visual_day_of_beginning = e2_format_dt_of_timezone ('j', $start_timeinfo['stamp'], $start_timeinfo['timezone']); $visual_day_of_now = e2_format_dt_of_current_timezone ('j', time ()); if (1) { return (bool) ( checkdate ($month, $day, $year) and ( ($year > $visual_year_of_beginning and $year < $visual_year_of_now) or ($year == $visual_year_of_beginning and $month > $visual_month_of_beginning) or ($year == $visual_year_of_beginning and $month == $visual_month_of_beginning and $day >= $visual_day_of_beginning) or ($year == $visual_year_of_now and $month < $visual_month_of_now) or ($year == $visual_year_of_now and $month == $visual_month_of_now and $day <= $visual_day_of_now) ) ); } } } } function e2__fruitful_neighbours_with_ymd_($y, $m = false, $d = false) { global $_db, $_config; list ($ww_unit_start, $ww_unit_end) = e2_boundaries_worldwide ($y, $m, $d); $seconds_is_a_unit = SECONDS_IN_A_DAY; if ($d === false) $seconds_is_a_unit = SECONDS_IN_A_MONTH; if ($m === false) $seconds_is_a_unit = SECONDS_IN_A_YEAR; if (e2_mysql ()) { $_db['result'] = mysqli_query ( $_db['link'], "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `IsPublished`=1 ". "AND `Stamp` < '". ($ww_unit_end - $seconds_is_a_unit) ."' ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY Stamp DESC" ); while ($line = @mysqli_fetch_array ($_db['result'], MYSQLI_ASSOC)) { list ($year, $month, $day) = explode ('/', e2_format_dt_of_timezone ('Y/n/j', $line['Stamp'], e2_note_timezone ($line)) ); $thisunit = $y * 10000 + ($m? ($m * 100) : 0) + ($d? $d : 0); $foundunit = $year * 10000 + ($m? ($month * 100) : 0) + ($d? $day : 0); if ($foundunit < $thisunit) { $prev_unit = gmmktime (0, 0, 0, $month, $day, $year); break; } } $_db['result'] = mysqli_query ( $_db['link'], "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix']. "Notes` n ". "WHERE `IsPublished`=1 ". "AND `Stamp` > '". ($ww_unit_start + $seconds_is_a_unit) ."' ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY Stamp" ); while ($line = @mysqli_fetch_array ($_db['result'], MYSQLI_ASSOC)) { list ($year, $month, $day) = explode ('/', e2_format_dt_of_timezone ('Y/n/j', $line['Stamp'], e2_note_timezone ($line)) ); $thisunit = $y * 10000 + ($m? ($m * 100) : 0) + ($d? $d : 0); $foundunit = $year * 10000 + ($m? ($month * 100) : 0) + ($d? $day : 0); if ($foundunit > $thisunit) { $next_unit = gmmktime (0, 0, 0, $month, $day, $year); break; } } return array ($prev_unit, $next_unit); } } function e2__parameters_with_timestamp_($stamp) { list ( $parameters['year'], $parameters['month'], $parameters['day'] ) = explode ('/', gmdate ('Y/m/d', $stamp)); return $parameters; } function e2__prepare_notes_list ($noterecs, $year = false, $month = false) { $daynumber = 0; $notes = array (); $prev_ymd = ''; $notes = array (); $note_titles = array (); foreach ($noterecs as $k => $noterec) { $note['href'] = e2_compose_url ('e2m_note', array ('*note' => $noterec)); $note['time'] = array ((int) min ($noterec['Stamp'], time ()), e2_note_timezone ($noterec)); $note['last-modified'] = array ((int) min ($noterec['LastModified'], time ()), e2_note_timezone ($noterec)); $note['favourite?'] = (bool) ($noterec['IsFavourite'] && $noterec['IsPublished']); $note['visible?'] = e2_noterec_is_visible ($noterec); if (array_key_exists ('SourceNoteURL', $noterec) and @$noterec['SourceNoteURL'] != '') { $note['href'] = $noterec['SourceNoteURL']; $note['href-original'] = $noterec['SourceNoteURL']; } if ( ($year and $month and ( ((int) $year) .'/'. ((int) $month) == e2_format_dt_of_timezone ('Y/n', $noterec['Stamp'], e2_note_timezone ($noterec)) )) or ($year and !$month and ( (int) $year == e2_format_dt_of_timezone ('Y', $noterec['Stamp'], e2_note_timezone ($noterec)) )) or (!$year and !$month) ) { array_unshift ($notes, $note); array_unshift ($note_titles, str_replace ("\n", ' ', $noterec['Title'])); } } $note_titles_text = implode ("\n", $note_titles); if (strlen ($note_titles_text) < 20000) { $note_titles_text = e2_kavychki (htmlspecialchars ($note_titles_text, ENT_NOQUOTES, HSC_ENC)); $note_titles = explode ("\n", $note_titles_text); } foreach ($notes as $k => $v) { $notes[$k]['title'] = $note_titles[$k]; } return $notes; } function e2__list_year_months_with_notes ($y) { global $_config; list ($ww_year_start, $ww_year_end) = e2_boundaries_worldwide ($y); if (e2_mysql_query ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $ww_year_start. "' AND '". $ww_year_end ."' ". e2_and_note_visibility_check_sql (e2_secure ()) )) { $result = e2_mysql_result_as_array (); $months = array (); foreach ($result as $candidate) { if ( ((int) $y) == e2_format_dt_of_timezone ('Y', $candidate['Stamp'], e2_note_timezone ($candidate)) ) { $months[] = (int) e2_format_dt_of_timezone ('n', $candidate['Stamp'], e2_note_timezone ($candidate)); } } $months = @array_unique ($months); sort ($months); return $months; } else { return false; } } function e2__list_month_days_with_notes ($y, $m) { global $_config; list ($ww_month_start, $ww_month_end) = e2_boundaries_worldwide ($y, $m); if (e2_mysql_query ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=1 ". "AND `Stamp` BETWEEN '". $ww_month_start ."' AND '". $ww_month_end ."' ". e2_and_note_visibility_check_sql (e2_secure ()) )) { $result = e2_mysql_result_as_array (); $days = array (); foreach ($result as $candidate) { if ( ((int) $y) .'/'. ((int) $m) == e2_format_dt_of_timezone ('Y/n', $candidate['Stamp'], e2_note_timezone ($candidate)) ) { $days[] = (int) e2_format_dt_of_timezone ('j', $candidate['Stamp'], e2_note_timezone ($candidate)); } } $days = @array_unique ($days); sort ($days); return $days; } else { return false; } } function e2_edge_timeinfo ($start_or_end) { global $_config; $which = 'p1'; if (!e2_secure ()) { $which = 'p1v1'; } $cache_filename = CACHES_FOLDER . $start_or_end .'-stamp-'. $which .'.e2time.psa'; if (CACHE_EDGE_TIMEINFO and is_file ($cache_filename)) { $result = @unserialize (file_get_contents ($cache_filename)); } if (is_array ($result)) { return $result; } else { if ($start_or_end == 'start') { e2_mysql_query ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=1 ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY `Stamp` LIMIT 1" ); } elseif ($start_or_end == 'end') { e2_mysql_query ( "SELECT `Stamp`, `Offset`, `IsDST` ". "FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=1 ". e2_and_note_visibility_check_sql (e2_secure ()). "ORDER BY `Stamp` DESC LIMIT 1" ); } $result = e2_mysql_result_as_array (); if (count ($result)) { $result = array ( 'stamp' => $result[0]['Stamp'], 'timezone' => e2_note_timezone ($result[0]), ); if (CACHE_EDGE_TIMEINFO) write_file ($cache_filename, serialize ($result)); return $result; } else { return array (); } } } function e2s_sync () { e2_drop_all_kinds_of_cache (); die ('All caches clean.'); } function e2_note_cache_filename_with_id_($id) { return str_replace ('*', $id, CACHE_FILENAMES_NOTES); } function e2_drop_caches_for_note_($note_id) { if (is_numeric ($note_id)) { if (__LOG) __log ('Caches: Drop caches for note id '. $note_id); @unlink (e2_note_cache_filename_with_id_($note_id)); @unlink (e2_note_cache_filename_with_id_($note_id .'-comments')); @unlink (e2_note_cache_filename_with_id_($note_id .'-comments-author')); } else { e2_unlink_glob (CACHE_FILENAMES_NOTES); e2_unlink_glob (CACHE_FILENAMES_NOTES_COMMENTS); e2_unlink_glob (CACHE_FILENAMES_NOTES_COMMENTS_AUTHOR); } e2_notes_count_drop_caches (); e2_edge_timeinfo_drop_caches (); @unlink (CACHE_FILENAME_HOT); @unlink (CACHE_FILENAME_POPULAR); @unlink (CACHE_FILENAME_FRONTPAGE); @unlink (CACHE_FILENAME_FRONTPAGE_AUTHOR); @unlink (CACHE_FILENAME_FRONTPAGE_FEED); @unlink (CACHE_FILENAME_FULLLIST); @unlink (CACHE_FILENAME_TAGS); @unlink (CACHE_FILENAME_TAGS_AUTHOR); @unlink (CACHE_FILENAME_LASTMODIFIEDS); } function e2_notes_drop_caches () { if (__LOG) __log ('Caches: Drop notes caches'); e2_drop_caches_for_note_(null); } function e2_notes_count_drop_caches () { if (__LOG) __log ('Caches: Drop notes counts cache'); e2_unlink_glob (CACHE_FILENAMES_NOTES_COUNTS); } function e2_edge_timeinfo_drop_caches () { if (__LOG) __log ('Caches: Drop egde time info cache'); e2_unlink_glob (CACHE_FILENAMES_EDGE_TIMEINFO); } function e2_drop_all_kinds_of_cache () { if (__LOG) __log ('Caches: Drop all kinds of caches'); e2_unlink_glob (CACHES_FOLDER . '*'); return true; } function e2o_prepare_template ($template_name) { global $_template, $_config; if (__LOG) __log ('Olba: Prepare template <'. $template_name .'>'); $template_stack = array (); $processed_template_name = $template_name; $template_folder = TEMPLATES_FOLDER . $processed_template_name .'/'; $template_max_image_width = false; $template_meta_viewport = false; $template_use_likely_light = false; if ( $template_name != '' ) { if ( is_dir ($template_folder) and is_file ($template_folder .'/theme-info.php') ) { while (1) { $template_folder = TEMPLATES_FOLDER . $processed_template_name .'/'; array_push ($template_stack, $template_folder); $template_info = include $template_folder .'/theme-info.php'; $template_infos[$template_folder] = $template_info; if (array_key_exists ('max_image_width', $template_info)) { if ($template_max_image_width === false) { $template_max_image_width = $template_info['max_image_width']; } } if (array_key_exists ('meta_viewport', $template_info)) { if ($template_meta_viewport === false) { $template_meta_viewport = $template_info['meta_viewport']; } } if (array_key_exists ('use_likely_light', $template_info)) { if ($template_use_likely_light === false) { $template_use_likely_light = $template_info['use_likely_light']; } } if (array_key_exists ('based_on', $template_info)) { $processed_template_name = $template_info['based_on']; } else { break; } } } else { } } $template_folder = SYSTEM_TEMPLATE_FOLDER; array_push ($template_stack, $template_folder); if ($template_max_image_width === false) { $template_max_image_width = $_config['max_image_width']; } $_template['name'] = $template_name; $_template['max_image_width'] = $template_max_image_width; $_template['meta_viewport'] = $template_meta_viewport; $_template['use_likely_light'] = $template_use_likely_light; $_template['stack'] = $template_stack; $_template['infos'] = $template_infos; }; function e2o_eat ($include) { global $content; ++ $_olba_includes; include $include; } function e2o_apply_extra ($tmpl) { if (0) { echo '<div style="background: #ff0">'.$tmpl.'</div>'; } if (is_dir (EXTRAS_FOLDER)) { $tmpl_filename = EXTRAS_FOLDER . $tmpl .'.tmpl.php'; if (is_file ($tmpl_filename)) { e2o_eat ($tmpl_filename); } } return ''; } function e2o_apply_template ($tmpl) { global $_template, $_olba_includes; $tmpl_filename = 'templates/'. $tmpl .'.tmpl.php'; if ($include = e2o__usable_file_with_basename_($tmpl_filename)) { if (__LOG) __log ('Olba: Apply template <'. $include .'>'); e2o_eat ($include); } else { e2o_template_missing ($tmpl_filename); } } function e2o_apply_initial_template () { global $_config; if ( @$_config['raw_template_data'] or @$_config['raw_template_data_with_param'] and array_key_exists ('raw', $_GET) ) { $template_entry_point = 'raw'; } else { $template_entry_point = 'main'; } return e2o_apply_template ($template_entry_point); } function e2o_template_missing ($which) { e2o__push_value_to_global_array ($which, '_olba_missing_templates'); } function e2o_use_stylesheet ($stylesheet) { e2o__push_value_to_global_array ($stylesheet .'.css', '_olba_used_stylesheets'); } function e2o_use_script ($script) { e2o__push_value_to_global_array ($script .'.js', '_olba_used_scripts'); } function e2o_use_library ($lib) { foreach (array (SYSTEM_LIBRARY_FOLDER, USER_LIBRARY_FOLDER) as $libfolder) { foreach (glob ($libfolder . $lib .'/*') as $file) { $ext = pathinfo ($file, PATHINFO_EXTENSION); if ($ext == 'js') { e2o__push_value_to_global_array ($file, '_olba_used_scripts'); } if ($ext == 'css') { e2o__push_value_to_global_array ($file, '_olba_used_stylesheets'); } } } } function e2o_missing_templates () { global $_olba_missing_templates; if (isset ($_olba_missing_templates)) { return array_unique ($_olba_missing_templates); } } function e2o_templates_list () { global $_template, $_config, $settings; if ($handle = @opendir (TEMPLATES_FOLDER)) { while (false !== ($subfolder = readdir ($handle))) { if (is_dir (TEMPLATES_FOLDER. $subfolder) and $subfolder != '.' and $subfolder != '..') { if (is_file (TEMPLATES_FOLDER . $subfolder .'/theme-info.php')) { $folder_list[$subfolder] = TEMPLATES_FOLDER . $subfolder .'/'; } } } closedir ($handle); } $list = array (); $unordered = 1000; foreach ($folder_list as $name => $folder) { $template_info = include $folder .'theme-info.php'; $display_name = @$template_info['display_name']; if (!$display_name) continue; if (is_array ($display_name)) { if (array_key_exists ($settings['language'], $display_name)) { $display_name = $display_name[$settings['language']]; } else { $display_name = array_shift ($display_name); } } $index = @$template_info['index'] or $index = $unordered ++; $colors = @$template_info['colors']; if (!$colors) $colors = array ( 'background' => 'transparent', 'headings' => 'rgba(128,128,128,.2)', 'text' => 'rgba(128,128,128,.2)', 'link' => 'rgba(128,128,128,.2)', ); $is_current = (bool) ($name == $_template['name']); if ($is_current) { $preview_url = e2_compose_url ('e2m_theme_preview', array ('theme' => '')); } else { $preview_url = e2_compose_url ('e2m_theme_preview', array ('theme' => $name)); } $list[$index] = array ( 'name' => $name, 'display-name' => $display_name, 'colors' => $colors, 'current?' => $is_current, 'preview-url' => $preview_url, ); } ksort ($list); return $list; } function e2o_image_fullname ($filename) { return e2o__usable_file_with_basename_('images/'. $filename); } function e2o_svg_code ($svgname) { return file_get_contents (e2o__usable_file_with_basename_('images/'. $svgname .'.svg')); } function e2o_stylesheet_href ($stylesheet) { global $_template; $basename = 'styles/'. $stylesheet .'.css'; $stylesheets_to_add = array (); foreach ($_template['stack'] as $template_folder) { if (is_file ($filename = $template_folder . $basename)) { $stylesheets_to_add[] = $filename; } if ( array_key_exists ('reset_styles', $_template['infos'][$template_folder]) and in_array ($stylesheet, $_template['infos'][$template_folder]['reset_styles']) ) { break; } } $stylesheets_to_add = array_reverse ($stylesheets_to_add); } function e2o_stylesheets () { global $_olba_used_stylesheets, $_template; if (!isset ($_olba_used_stylesheets)) return; $_olba_used_stylesheets = array_unique ($_olba_used_stylesheets); $stylesheets = array (); foreach ($_olba_used_stylesheets as $stylesheet) { if (is_file ($stylesheet)) { $stylesheets[] = $stylesheet; continue; } if (is_file ($filename = USER_FOLDER .'js/'. $stylesheet)) { $stylesheets[] = $filename; } $basename = 'styles/'. $stylesheet; $stylesheets_to_add = array (); foreach ($_template['stack'] as $template_folder) { if (is_file ($filename = $template_folder . $basename)) { $stylesheets_to_add[] = $filename; } if ( array_key_exists ('reset_styles', $_template['infos'][$template_folder]) and in_array ($stylesheet, $_template['infos'][$template_folder]['reset_styles']) ) { break; } } $stylesheets_to_add = array_reverse ($stylesheets_to_add); $stylesheets = array_merge ($stylesheets, $stylesheets_to_add); } foreach ($stylesheets as $k => $v) { $fs = stat ($v); $stylesheets[$k] .= '?'. $fs['mtime']; } return $stylesheets; } function e2o_scripts () { global $_olba_used_scripts; if (!isset ($_olba_used_scripts)) return; $_olba_used_scripts = array_unique ($_olba_used_scripts); $scripts = array (); foreach ($_olba_used_scripts as $script) { if ( substr ($script, 0, 7) == 'http://' or substr ($script, 0, 8) == 'https://' or substr ($script, 0, 2) == '//' ) { $scripts[] = $script; continue; } if (is_file ($script)) { $scripts[] = $script; continue; } if (is_file ($jsfile = USER_FOLDER .'js/'. $script)) { $scripts[] = $jsfile; } $basename = 'js/'. $script; if ($jsfile = e2o__usable_file_with_basename_($basename)) { $scripts[] = $jsfile; } } foreach ($scripts as $k => $v) { $fs = stat ($v); if ($fs['mtime']) { $scripts[$k] .= '?'. $fs['mtime']; } } return $scripts; } function e2o__push_value_to_global_array ($value, $array) { if (!isset ($GLOBALS[$array])) { $GLOBALS[$array] = array ($value); } else { $GLOBALS[$array][] = $value; } } function e2o__usable_file_with_basename_($basename) { global $_template; foreach ($_template['stack'] as $template_folder) { if (is_file ($filename = $template_folder . $basename)) { return $filename; } } return ''; } function e2m_theme_preview ($parameters) { global $_lang, $_strings, $_superconfig, $_template; if (@$_superconfig['disallow_themes_preview']) { return e2_error404_mode (); } if ($parameters['theme'] == $_template['name']) { e2_go_to (e2_compose_url ('e2m_theme_preview', array ('theme' => ''))); } if ($parameters['theme']) { e2o_prepare_template ($parameters['theme']); } $lang = $_lang; if (!is_file ($file = 'system/preview/'. $lang .'.php')) { $lang = $_strings['--secondary-language']; $file = 'system/preview/'. $lang .'.php'; } if (!is_file ($file = 'system/preview/'. $lang .'.php')) { $file = 'system/preview/'. DEFAULT_LANGUAGE .'.php'; } $return = include $file; return $return; } define ('SEARCH_EXTRA_PREFIX', 'Rose'); define ('SEARCH_LIMIT', 20); define ('SEARCH_SNIPPETS_LIMIT', 20); define ('SEARCH_USE_ROSE', 1); define ('SEARCH_USE_MYSQL', 1); use S2\Rose\Storage\Exception\EmptyIndexException; use S2\Rose\Storage\Database\PdoStorage; use S2\Rose\Stemmer\PorterStemmerRussian; use S2\Rose\Indexer; use S2\Rose\Entity\Indexable; use S2\Rose\Entity\Query; use S2\Rose\Finder; use S2\Rose\SnippetBuilder; function e2m_found ($parameters = array ()) { global $_strings, $_config, $settings, $full_blog_url; $parameters['query'] = trim ($parameters['query']); $query = $parameters['query']; if (!$query) { return array ( 'title' => $_strings['pt--search-query-empty'], 'heading' => $_strings['pt--search'], 'nothing' => $_strings['gs--search-query-empty'], ); } $search_related_tag = false; if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Keywords` ". "WHERE `Keyword`='". e2_mysql_real_escape_string ($query)."'" )) { $tmp = e2_mysql_result_as_array (); if (isset ($tmp[0]['ID'])) { $search_related_tag = array ( 'href' => e2_compose_url ('e2m_tag', array ('*tag' => $tmp[0])), 'name' => htmlspecialchars ($query, ENT_NOQUOTES, HSC_ENC), ); } } $highlight = e2_smart_explode (' ', $parameters['query']); $stemmer = new PorterStemmerRussian (); foreach ($highlight as $k => $v) { $highlight[$k] = $stemmer -> stemWord ($highlight[$k]); } $notes_found = array (); $is_autorized = e2_secure (); if (SEARCH_USE_ROSE) { try { $storage = e2_rose_storage (); $finder = new Finder ($storage, $stemmer); $finder -> setHighlightTemplate ('<mark>%s</mark>'); $rose_query = new Query ($query); $rose_query -> setLimit (SEARCH_LIMIT); $resultSet = $finder -> find ($rose_query); foreach ($resultSet -> getFoundExternalIds () as $external_id) { if ($external_id[0] == 'n') { $note_id = substr ($external_id, 1); $note = e2_note_by_id ($note_id); if ($note['IsFavourite']) { $resultSet->setRelevanceRatio ($external_id, @$_config['search_favourites_boost']); } } } $snippetBuilder = new SnippetBuilder ($stemmer); $snippetBuilder -> setSnippetLineSeparator(' · '); $snippetBuilder -> attachSnippets ($resultSet, function (array $ids) { $result = array (); foreach (array_slice ($ids, 0, SEARCH_SNIPPETS_LIMIT) as $external_id) { if ($external_id[0] == 'n') { $note_id = substr ($external_id, 1); $noterec = @e2_note_by_id ($note_id); if ($noterec) { $noterec['_']['_id'] = $note_id; $note = e2_package_note ($noterec); $result[$external_id] = $note['text']; } } } return $result; }); foreach ($resultSet -> getItems () as $external_id => $item) { if ($external_id[0] == 'n') { $note_id = substr ($external_id, 1); $note = e2_note_by_id ($note_id); $note['_']['_id'] = $note_id; $note['_']['_srprovider'] = 'rose'; $note['_']['_rose_relevance'] = $item -> getRelevance (); $note['_']['_rose_title'] = $item -> getHighlightedTitle ($stemmer); $note['_']['_rose_snippet'] = $item -> getSnippet (); if ($note['IsPublished'] and e2_noterec_is_visible ($note, $is_autorized)) { $notes_found[] = $note; } } } if ($_config['rose_debug_info']) { $rose_debug_info = print_r ($resultSet -> getTrace (), true); } } catch (EmptyIndexException $e) {} } if (1 and SEARCH_USE_MYSQL) { $against = e2_mysql_real_escape_string (preg_quote ($query)); $dbquery = ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` n ". "WHERE `IsPublished`=1 AND MATCH (`Title`, `Text`) AGAINST ('". $against ."')". e2_and_note_visibility_check_sql ($is_autorized). "LIMIT ". SEARCH_LIMIT ); if (e2_mysql_query ($dbquery)) { $result = e2_mysql_result_as_array (); foreach ($result as $k => $note) { $note['_']['_id'] = $note['ID']; $note['_']['_srprovider'] = 'mysql'; $notes_found[] = $note; } } } $notes_packaged = array (); $notes = array (); $i = 0; foreach ($notes_found as $noterec) { if (!in_array ($noterec['ID'], $notes_packaged)) { $note = e2_package_note ($noterec); if (@$note['_']['_rose_title']) { $note['title'] = $note['_']['_rose_title']; } else { $note['title'] = e2_highlight_search_term ($note['title'], $highlight); } $note['title'] = e2_kavychki ($note['title']); if (@$note['_']['_rose_snippet']) { $note['text'] = '<p>'. $note['_']['_rose_snippet'] .'</p>'; } else { $text = $note['text']; $text = preg_replace ('/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/i', '', $text); $text = preg_replace ('/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/i', '', $text); $text = str_replace ( array ( '<br>', '<br/>', '<br />', '</h1>', '</h2>', '</h3>', '</h4>', '</h5>', '</h6>', '</p>', '</pre>', '</blockquote>', '</li>', ), ' ', $text ); $text = strip_tags ($text); $fragments = array (); $sentences = preg_split ('/[\\n\(\)\[\]]|[.:;?!](\s|$)/uis', $text); $j = 0; $first_sentence = ''; foreach ($sentences as $sentence) { $sentence = trim ($sentence); if (!$sentence) continue; if (!$first_sentence) $first_sentence = $sentence; $sentence_h = $sentence; $sentence_h = e2_highlight_search_term ($sentence_h, $highlight); if ($sentence_h != $sentence) { $fragments[] = e2_capitalize ($sentence_h); $j ++; if ($j > 3) break; } } if (count ($fragments)) { $note['text'] = '<p>'. implode (' · ', $fragments) .'</p>'; } else { $note['text'] = '<p>'. $first_sentence .'</p>'; } } $note['has-highlighed-thumbs?'] = false; if ($resources = @$note['format-info']['resources-detected']) { $thumbs = e2_list_available_thumbnails_for_resources ($resources); foreach ($thumbs as $k => $v) { $thumbs[$k]['highlighted?'] = ( strstr ($v['original-filename'], $query) !== false ); if ($thumbs[$k]['highlighted?']) { $note['has-highlighted-thumbs?'] = true; } } $note['thumbs'] = $thumbs; } $notes[] = $note; $notes_packaged[] = $noterec['ID']; $i ++; if ($i >= SEARCH_LIMIT) break; } } $total = count ($notes); if ($total) { $totalstr = e2l_get_string ( 'pt--n-posts', array ('number' => $total) ); } else { $totalstr = $_strings['pt--no-posts']; $ret['nothing'] = $_strings['gs--nothing-found']; } if ($i >= SEARCH_LIMIT) { $totalstr = $_strings['gs--many-posts']; } if ($search_related_tag) { $ret['search-related-tag'] = $search_related_tag; } $ret['notes'] = $notes; $ret['pages'] = array (); $ret['title'] = $totalstr .' '. $_strings['gs--found-for-query'] .': '. htmlspecialchars ($query, ENT_NOQUOTES, HSC_ENC); $ret['superheading'] = $totalstr .' '. $_strings['gs--found-for-query']; $ret['heading'] = $query; if (@$rose_debug_info) { $ret['rose-debug-info'] = $rose_debug_info; } return $ret; } function e2s_search () { $query = @$_POST['query']; $query = str_replace ('?', urlencode ('?'), $query); $query = str_replace ('/', ' ', $query); $query = trim ($query); $query = str_replace (' ', '+', $query); e2_go_to (e2_compose_url ('e2m_found', array ('query' => $query))); die; } function e2s_bsi_status () { global $_db, $_config; echo '<pre>'; echo '/@bsi/step/ — Make one step of indexing<br />'; echo '/@bsi/drop/ — Drop indexes<br /><br />'; $indexing = @unserialize (file_get_contents (USER_FOLDER . 'indexing.psa')); if (!is_array ($indexing)) $indexing = array ('spent' => '?'); if (e2_mysql () and $_db['link']) { $total_count = $indexed_count = '?'; if (e2_mysql_query ( "SELECT count(*) c FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `IsPublished`=1 " )) { $res = e2_mysql_result_as_array (); $total_count = $res[0]['c']; } if (e2_mysql_query ( "SELECT count(*) c FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `IsIndexed`=1 AND `IsPublished`=1 " )) { $res = e2_mysql_result_as_array (); $indexed_count = $res[0]['c']; } $percentage = round ($indexed_count / $total_count * 100); echo 'Indexed '. $indexed_count .' notes of '. $total_count .' ('. $percentage .'%)<br />'; echo 'Spent '. $indexing['spent'] .' s (or more)'; } else { echo 'DB unaccessible'; } die ('</pre>'); } function e2s_bsi_step () { global $_db, $_config, $_strings; if (__LOG) __log ('BSI step'); if (!e2_bsi_is_indexing ()) { die ('Not indexing</pre>'); } $indexing = @unserialize (file_get_contents (USER_FOLDER . 'indexing.psa')); if (!is_array ($indexing)) $indexing = array ('spent' => '?'); if ( !isset ($indexing['lock']) or $indexing['lock'] < time () - (BSI_GIVE_UP_TIMEOUT + BSI_UNLOCK_TIMEOUT) ) { if (isset ($indexing['lock'])) { echo 'Old lock: '. $indexing['lock'] .'<br />'; } else { echo 'No old lock<br />'; } $indexing['lock'] = time (); if (!@write_file (USER_FOLDER . 'indexing.psa', serialize ($indexing))) { echo 'Can’t get a new lock<br />'; die; } echo 'New lock: '. $indexing['lock'] .'<br /><br />'; if (e2_mysql () and $_db['link']) { $i = 0; $so_far = 0; $stopwatch_local = getmicrotime (); $all_done = false; while ($so_far < BSI_GIVE_UP_TIMEOUT) { if (e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "Notes` ". "WHERE `IsIndexed`=0 AND `IsPublished`=1 ". "ORDER BY `Stamp` DESC ". "LIMIT ". BSI_SELECT_PORTION )) { $res = e2_mysql_result_as_array (); } if (count ($res)) { echo 'Portion '. ++$i .'<br />'; foreach ($res as $note_record) { echo 'Indexing: '. $note_record['Title'] .'<br />'; $note_record['IsIndexed'] = '1'; if (e2_update_record ('Notes', $note_record)) { e2_index_noterec ($note_record); if ($_config['broadcast_on_indexing']) { e2_broadcast_noterec ($note_record); } } } $so_far = round (getmicrotime () - $stopwatch_local, 3); echo 'Done '. count ($res) .', spent '. $so_far .' ms so far<br /><br />'; } else { $all_done = true; break; } } if ($all_done) { echo 'Indexing done<br /><br />'; @unlink (USER_FOLDER . 'indexing.psa'); } else { echo 'Time out<br />'; unset ($indexing['lock']); $indexing['done'] = count ($res); if ($indexing['spent'] != '?') $indexing['spent'] += $so_far; @write_file (USER_FOLDER . 'indexing.psa', serialize ($indexing)); } } else { echo 'DB unaccessible<br />'; } } else { echo 'Locked<br />'; } die ('</pre>'); } function e2s_bsi_drop () { global $_db, $_config; if (e2_mysql () and $_db['link']) { echo '<pre>'; if (e2_mark_all_for_reindexing ()) { echo 'All notes marked for reindexing<br />'; $storage = e2_rose_storage (); try { $storage -> erase (); echo 'Indexes dropped<br />'; } catch (\S2\Rose\Exception\RuntimeException $e) { echo 'Rose not available<br />'; } } else { echo 'DB error: '. mysqli_error ($_db['link']).'<br />'; } e2_bsi_start_indexing (); die ('</pre>'); } die ('<pre>DB unaccessible</pre>'); } define ('BSI_SELECT_PORTION', 10); define ('BSI_GIVE_UP_TIMEOUT', 10); define ('BSI_UNLOCK_TIMEOUT', 10); function e2_bsi_start_indexing () { $indexing = array (); @write_file (USER_FOLDER . 'indexing.psa', serialize ($indexing)); } function e2_bsi_is_indexing () { return (is_file (USER_FOLDER . 'indexing.psa')); } function e2_index_noterec ($noterec) { static $indexer = null; try { if ($indexer === null) { $stemmer = new PorterStemmerRussian (); $indexer = new Indexer (e2_rose_storage (), $stemmer); } $formatinfo = e2_format_with_formatter ($noterec['FormatterID'], @$noterec['Text'], 'full-rss'); e2_augment_uploads_using_formatinfo ($noterec, $formatinfo); $text = strip_tags ($formatinfo['text-final']); $indexable = new Indexable ( 'n'. $noterec['ID'], $noterec['Title'], $text ); return $indexer -> index ($indexable); } catch (Exception $e) { return false; } } function e2_unindex_note_by_id ($id) { static $indexer = null; try { if ($indexer === null) { $stemmer = new PorterStemmerRussian (); $indexer = new Indexer (e2_rose_storage (), $stemmer); } return $indexer -> removeById ('n'. $id); } catch (Exception $e) { return false; } } function e2_rose_loader ($class) { $prefix = 'S2\\Rose\\'; $base_dir = __DIR__ . '/library/rose/'; $len = strlen ($prefix); if (strncmp ($prefix, $class, $len) !== 0) return; $relative_class = substr ($class, $len); $file = $base_dir . str_replace ('\\', '/', $relative_class) . '.php'; if (file_exists ($file)) require $file; } function e2_rose_tables_map () { return array ( 'TOC' => 'Contents', 'WORD' => 'Word', 'FULLTEXT_INDEX' => 'Fulltext', 'KEYWORD_INDEX' => 'Keyword', 'KEYWORD_MULTIPLE_INDEX' => 'KeywordMultiple', ); } function e2_rose_storage () { global $_config, $settings; static $pdostorage = null; if ($pdostorage === null) { $pdo = new \PDO ( 'mysql:'. 'host='. $settings['db']['server'] .';'. 'dbname='. $settings['db']['name'], $settings['db']['user_name'], e2_decrypt ($settings['db']['passw']) ); $version = $pdo -> getAttribute(\PDO::ATTR_SERVER_VERSION); $encoding = version_compare ($version, '5.5.3', '>=') ? 'utf8mb4' : 'utf8'; $pdo -> exec('SET NAMES '.$encoding); $pdo -> setAttribute (\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION); $rose_tables_map = e2_rose_tables_map (); $pdostorage = new PdoStorage ( $pdo, $_config['db_table_prefix'] . SEARCH_EXTRA_PREFIX, array ( PdoStorage::TOC => $rose_tables_map['TOC'], PdoStorage::WORD => $rose_tables_map['WORD'], PdoStorage::FULLTEXT_INDEX => $rose_tables_map['FULLTEXT_INDEX'], PdoStorage::KEYWORD_INDEX => $rose_tables_map['KEYWORD_INDEX'], PdoStorage::KEYWORD_MULTIPLE_INDEX => $rose_tables_map['KEYWORD_MULTIPLE_INDEX'], ) ); } return $pdostorage; } function e2_highlight_search_term ($text, $highlight) { foreach ($highlight as $h) { if ($h == '-') continue; $h = preg_quote ($h, '/'); $h = str_replace ('е', '[её]', $h); $h = str_replace ('Е', '[ЕЁ]', $h); $text = preg_replace ('/(?<=^|\W)('.$h.'[\w\p{M}]*)/iu', '<mark>$1</mark>', $text); } $text = str_replace ('</mark> <mark>', ' ', $text); $text = str_replace ('</mark> <mark>', ' ', $text); return $text; } function e2_capitalize ($str) { $fc = mb_strtoupper (mb_substr ($str, 0, 1)); return $fc . mb_substr ($str, 1); } function e2_mark_all_for_reindexing () { global $_config; return e2_mysql_query ( "UPDATE `". $_config['db_table_prefix'] . "Notes` ". "SET `IsIndexed`=0" ); } function e2_check_timeout() { static $timeout; if (is_null($timeout)) { $max_execution_time = ini_get('max_execution_time'); if ($max_execution_time) { $timeout = time() + $max_execution_time - 5; } else { $timeout = 0; } } return ($timeout == 0) ? true : $timeout >= time(); } function e2_write_dump_header($file) { $header = ( 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' .PHP_EOL. 'SET AUTOCOMMIT=0;' .PHP_EOL. 'START TRANSACTION;' .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;" .PHP_EOL. "/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;" .PHP_EOL. "/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;" .PHP_EOL. "/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;" .PHP_EOL. "/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;" .PHP_EOL. "/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=NO_AUTO_VALUE_ON_ZERO */;" .PHP_EOL. "/*!40101 SET NAMES utf8 */;" .PHP_EOL. "/*!50503 SET NAMES utf8mb4 */;" .PHP_EOL. '' ); fwrite($file, $header); return true; } function e2_write_dump_footer($file) { $footer = 'COMMIT;' .PHP_EOL; $footer .= "/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;" . PHP_EOL . "/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;" . PHP_EOL . "/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;" . PHP_EOL . "/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;" . PHP_EOL . "/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;" . PHP_EOL . "/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;" . PHP_EOL; fwrite($file, $footer); return true; } function e2_get_table_definition($conn, $table) { $create_stmt = null; $result = mysqli_query($conn, "SHOW CREATE TABLE `{$table}`"); if ($result) { $arr = mysqli_fetch_array($result); $create_stmt = $arr['Create Table']; } return $create_stmt; } function e2_write_table_definition($file, $conn, $table) { $definition = e2_get_table_definition($conn, $table); if (e2_check_timeout() && $definition) { fwrite($file, $definition); fwrite($file, ';'); fwrite($file, PHP_EOL . PHP_EOL); return true; } return false; } function e2_get_table_data($conn, $table, $offset, $limit) { $query = "SELECT * FROM `{$table}` LIMIT {$offset}, {$limit}"; $result = mysqli_query($conn, $query); if (!$result) { return false; } $insert_stmt = ''; $insert_tmpl = "INSERT INTO `{$table}` VALUES"; while ($row = mysqli_fetch_assoc($result)) { $items = array(); foreach($row as $value) { $items[] = is_null($value) ? "NULL" : "'" . mysqli_real_escape_string($conn, $value) . "'"; } $insert_stmt .= $insert_tmpl . '(' . join(', ', $items) . ');' . PHP_EOL; } return $insert_stmt; } function e2_table_disable_keys($table) { return "ALTER TABLE `{$table}` DISABLE KEYS;" . PHP_EOL; } function e2_table_enable_keys($table) { return "ALTER TABLE `{$table}` ENABLE KEYS;" . PHP_EOL; } function e2_get_total_records($conn, $table) { $k = mysqli_fetch_row(mysqli_query($conn, "SELECT COUNT(*) FROM `{$table}`")); return $k[0]; } function e2_write_table_data($file, $conn, $table) { $total = e2_get_total_records($conn, $table); $offset = 0; $limit = 1000; $result = true; $bytes_per_line = 20000; $records_per_line = 30; if ($total) { $disable_keys = e2_table_disable_keys($table); fwrite($file, $disable_keys); } $insert_stmt = "INSERT INTO `{$table}` VALUES"; $remaning_records = $total; while ($remaning_records > 0) { $query = "SELECT * FROM `{$table}` LIMIT {$offset}, {$limit}"; $result = mysqli_query($conn, $query); $num_rows = mysqli_num_rows($result); if (!$result || !e2_check_timeout()) { $result = false; break; } $rows = array(); $bytes = 0; $rows_cnt = 0; while ($row = mysqli_fetch_assoc($result)) { if (!e2_check_timeout()) { $result = false; break; } $num_rows--; $columns = array(); foreach($row as $value) { $columns[] = is_null($value) ? "NULL" : "'" . mysqli_real_escape_string($conn, $value) . "'"; } $data = '(' . join(', ', $columns) . ')'; $bytes += strlen($data); $rows[] = $data; $rows_cnt++; if ( ($bytes >= $bytes_per_line) || ($rows_cnt >= $records_per_line) || ($num_rows == 0)) { $query = $insert_stmt . join(', ', $rows) . ';'; fwrite($file, $query); fwrite($file, PHP_EOL); $bytes = 0; $rows_cnt = 0; $rows = array(); } } $offset += $limit; $remaning_records -= $limit; } if ($total) { $enable_keys = e2_table_enable_keys($table); fwrite($file, $enable_keys); } return $result; } function e2_backup($conn, $tables, $backupfile, $options = array()) { $tmpfile = tmpfile(); e2_write_dump_header($tmpfile); if (__LOG) __log ('DB Backup: wrote header'); $running = true; foreach($tables as $table) { if (__LOG) __log ('DB Backup: table '. $table); $res1 = e2_write_table_definition($tmpfile, $conn, $table); if (__LOG) __log ('DB Backup: wrote table definition with result '. (int) $res1); $res2 = e2_write_table_data($tmpfile, $conn, $table); if (__LOG) __log ('DB Backup: wrote table data with result '. (int) $res2); $running = $res1 && $res2; if ($running === false) { break; } } if (__LOG) __log ('DB Backup: wrote data with running == '. (int) $running); if ($running) { e2_write_dump_footer($tmpfile); fseek($tmpfile, 0); $file = fopen($backupfile, 'w+'); while ($running && ($data = fread($tmpfile, 1024))) { if(e2_check_timeout()) { fwrite($file, $data); } else { $running = false; } } fclose($file); } fclose($tmpfile); return $running; } function e2_mail_body_using_template ($mtmpl, $content) { $mtmpl_file = MTMPL_FOLDER . $mtmpl .'.mtmpl.php'; if (is_file ($mtmpl_file)) { ob_start (); include $mtmpl_file; $mail_body = ob_get_contents (); ob_end_clean (); return trim ($mail_body); } } function e2_mail_from () { global $_config, $_superconfig; $mail_from = $_config['mail_from']; if (@$_superconfig['mail_from']) { $mail_from = $_superconfig['mail_from']; } if ($mail_from[strlen ($mail_from) - 1] == '@') { $mail_from .= $_SERVER['HTTP_HOST']; } return $mail_from; } function e2_mail ($to, $subject, $message, $additional_headers = '') { global $_superconfig; if (@$_superconfig['mail_debug']) { $f = tempnam ('mail-debug', ''); $text = ( 'To:       '.$to ."\n". 'Subject:  '.$subject ."\n". $additional_headers ."\n". "--------------------------------------------------\n". $message ); write_file ($f, $text); chmod ($f, NEW_FILES_RIGHTS); rename ($f, $f.'.txt'); } $subject = '=?UTF-8?B?'. base64_encode ($subject) .'?='; $additional_headers .= "\r\nContent-Type: text/plain; charset=utf-8"; mail ($to, $subject, $message, trim ($additional_headers)); } function _A ($text) { global $_candy, $_protocol, $server_name, $folder_on_server, $_current_url; if ( preg_match ('/\<a href\=\"(.*?)\"[^>]*\>(.*?)\<\/a\>/si', $text, $matches) and ( $matches[1] == '' or $matches[1] == $_current_url or $_protocol .'://'. $server_name . $matches[1] == $_current_url or $_protocol .'://'. $server_name . $folder_on_server .'/'. $matches[1] == $_current_url or $_candy == 'e2m_install' ) ) { return $matches[2]; } else { return $text; } } function _AT ($href) { global $_candy, $server_name, $folder_on_server, $_current_url; return ( $href == '' or $href == $_current_url or $_protocol .'://'. $server_name . $href == $_current_url or $_protocol .'://'. $server_name . $folder_on_server .'/'. $href == $_current_url ); } function _IMGSRC ($filename) { return e2o_image_fullname ($filename); } function _SVG ($filename) { return e2o_svg_code ($filename); } function _COLOR ($one, $two, $fade, $curve = 1) { if (strlen ($one) != 3 and strlen ($one) != 6) return 'f0f'; if (strlen ($two) != 3 and strlen ($two) != 6) return 'f0f'; if (strlen ($one) == 3) $one = $one{0}.$one{0}.$one{1}.$one{1}.$one{2}.$one{2}; if (strlen ($two) == 3) $two = $two{0}.$two{0}.$two{1}.$two{1}.$two{2}.$two{2}; $values = array ( $one{0}.$one{1}, $one{2}.$one{3}, $one{4}.$one{5}, $two{0}.$two{1}, $two{2}.$two{3}, $two{4}.$two{5}, ); foreach ($values as $k => $v) { $values[$k] = hexdec ($v); } $new = array ( $values[0] + pow ($fade, $curve) * ($values[3] - $values[0]), $values[1] + pow ($fade, $curve) * ($values[4] - $values[1]), $values[2] + pow ($fade, $curve) * ($values[5] - $values[2]), ); $color = ''; foreach ($new as $k => $v) { $color .= str_pad (dechex ($v), 2, '0', STR_PAD_LEFT); } return $color; } function _DT ($format, $e2time) { if (!$e2time) return ''; list ($stamp, $timezone) = $e2time; $ret = $format; $month = e2_format_dt_of_timezone ('m', $stamp, $timezone); $ret = str_replace ('{zone}', e2__escape_all (e2_format_timezone_offset ($timezone['offset'])), $ret); $ret = str_replace ('{month}', e2__escape_all (e2l_get_string ('um--month', array ('month' => $month))), $ret); $ret = str_replace ('{month-short}', e2__escape_all (e2l_get_string ('um--month-short', array ('month' => $month))), $ret); $ret = str_replace ('{month-g}', e2__escape_all (e2l_get_string ('um--month-g', array ('month' => $month))), $ret); $ret = e2_format_dt_of_timezone ($ret, $stamp, $timezone); return $ret; } function _AGO ($e2time) { return e2_ago ($e2time[0], array ('offset' => $e2time[1]['offset'], 'is_dst' => $e2time[1]['is_dst']) ); } function _NUM ($text) { return e2_decline_for_number ($text); } function _FIRST ($something) { return ($something['_']['_ord'] == 0); } function _LAST ($something) { return ($something['_']['_ord'] == $something['_']['_ord_max']); } function _CSS ($css) { return e2o_use_stylesheet ($css); } function _CSS_HREF ($css) { return e2o_stylesheet_href ($css); } function _JS ($js) { return e2o_use_script ($js); } function _LIB ($lib) { return e2o_use_library ($lib); } function _T ($tmpl) { return e2o_apply_template ($tmpl); } function _X ($tmpl) { return e2o_apply_extra ($tmpl); } function _T_FOR ($tmpl, $for = null) { global $content; if ($for === null) $for = $tmpl; if (array_key_exists ($for, $content)) { e2o_apply_template ($tmpl); } else { return ''; } } function _GUIDES ($param = false) { global $_olba_guides; if (is_array ($param)) $_olba_guides = $param; if (!is_array ($_olba_guides)) return; $guides_view = '<div style="position: fixed; width: 100%; height: 100%; z-index: -100">'; $sum = 0; $cols = $_olba_guides; $cols[] = 100; foreach ($cols as $i => $col) { if ($col == 100) break; $sum += $col; $guides_view .= '<div style="position: fixed; left: '. $col .'%; width: 0; height: 100%; border-left: 1px #000 dotted; opacity: .2; -webkit-opacity: .2; -moz-opacity: .2"></div>'; $style = 'position: absolute; padding: 2px 3px; top: 0; font-size: 9px; background: #ccc; color: #000; font-family: "Verdana", sans-serif; opacity: .8; -webkit-opacity: .8; -moz-opacity: .8'; if ($cols[$i+1] - $cols[$i] < 4) { $guides_view .= '<div style="'. $style.'; right: '. (100 - $col) .'%; border-bottom-left-radius: .5em; -webkit-border-bottom-left-radius: .5em; -moz-border-bottom-left-radius: .5em;">'. $col .'%</div>'; } else { $guides_view .= '<div style="'. $style.'; left: '. $col .'%; border-bottom-right-radius: .5em; -webkit-border-bottom-right-radius: .5em; -moz-border-bottom-right-radius: .5em;">'. $col .'%</div>'; } } $guides_view .= '</div>'; $_olba_current_col = 0; return $guides_view; } function _S ($string) { global $_strings; return $_strings[$string]; } function _SHORTCUT ($name) { return e2_shortcut ($name); } function e2__escape_all ($string) { $ret = ''; for ($i = 0; $i < mb_strlen ($string); ++ $i) { $ret .= '\\'. mb_substr ($string, $i, 1); } return $ret; } function e2l_get_string ($string_id, $data) { global $_strings; $name = $_strings[$string_id]; if (preg_match_all ('/\$\[(.+?)\]/u', $name, $matches, PREG_SET_ORDER)) { foreach ($matches as $match) { $var = $match[1]; $formatter = ''; if (strstr ($var, '.')) list ($var, $formatter) = explode ('.', $var, 2); if (array_key_exists ($var, $data)) { if ($formatter) { $name = str_replace ($match[0], e2l__format_value ($formatter, $data[$var], $string_id), $name); } else { $name = str_replace ($match[0], $data[$var], $name); } } } } return $name; } function e2l_transliterate ($string) { $t = array (); if (is_file (DEFAULTS_FOLDER . 'translit.txt')) { $t = file (DEFAULTS_FOLDER . 'translit.txt'); } $from = $to = ''; foreach ($t as $i => $line) { if (!($i%2)) $from .= rtrim ($line) .' '; else $to .= rtrim ($line) .' '; if ($i%2) { while (mb_strlen ($to) < mb_strlen ($from)) $to .= ' '; while (mb_strlen ($to) > mb_strlen ($from)) $from .= ' '; } } $tok = ''; $tokpos = -1; for ($i = 0; $i < mb_strlen ($from); ++ $i) { $c = mb_substr ($from, $i, 1); if ($c != ' ') { $tok .= $c; if ($tokpos == -1) $tokpos = $i; } elseif ($tok) { $tok2 = trim (mb_substr ($to, $tokpos, mb_strpos ($to, ' ', $tokpos + 1) - $tokpos)); $pair = array ($tok, $tok2); $pairs_by_length[mb_strlen ($tok)][] = $pair; $tok = ''; $tokpos = -1; } } $map = array (); for ($i = count ($pairs_by_length); $i > 0; -- $i) { foreach ($pairs_by_length[$i] as $pair) $map[$pair[0]] = $pair[1]; } return strtr ($string, $map); } function e2l__format_value ($formatter, $value, $string_id) { list ($formatter, $modifier) = explode ('.', $formatter, 2); $formatfunc = 'e2lstr_'. $formatter; if (function_exists ($formatfunc)) { return call_user_func ($formatfunc, $value, $modifier, $string_id); } else { return $value; } return $value; } abstract class E2GIP { protected $gip_cookie_name = 'gip'; protected $gip_token_cookie_name = 'gip_access_token'; protected $gip_token = null; abstract public function get_auth_url(); abstract public static function get_profile_url($id); abstract public function callback(); public static function set_session_data($key, $value) { if (session_status() == PHP_SESSION_NONE) { session_start(); } $_SESSION[$key] = $value; } public static function get_session_data($key, $unset = false) { if (session_status() == PHP_SESSION_NONE) { session_start(); } if(!isset($_SESSION[$key])) { return null; } $value = $_SESSION[$key]; if($unset) { unset($_SESSION[$key]); } return $value; } public function get_config($key) { $config_filename = 'gips/'. $this->type .'.json'; if (is_file (USER_FOLDER . $config_filename)) { $json = @file_get_contents (USER_FOLDER . $config_filename); } else { $json = @file_get_contents (SYSTEM_FOLDER . $config_filename); } if ($json !== false) { $ret = json_decode ($json, true, 512, JSON_BIGINT_AS_STRING)[$key]; if ($ret) return $ret; } return null; } public function get_callback_url() { return e2_compose_url('e2m_gip_sign_in_callback', array('provider' => $this->type)); } public function get_gip_session_data() { global $_config; $token = $this->gip_token ? $this->gip_token : $_COOKIE[e2_cookie_prefix($this->gip_token_cookie_name)]; e2_mysql_query ( "SELECT * FROM `". $_config['db_table_prefix'] . "GIPsSessions` ". "WHERE `GIP` = '". $this->type ."' AND `SessionToken` = '" . e2_mysql_real_escape_string($token) . "'ORDER BY `ID` DESC LIMIT 1" ); $result = e2_mysql_result_as_array (); return $result ? $result[0] : array(); } public function is_logged_in() { if(empty($_COOKIE[e2_cookie_prefix($this->gip_cookie_name)]) || !in_array($_COOKIE[e2_cookie_prefix($this->gip_cookie_name)], e2_list_gips()) || $_COOKIE[e2_cookie_prefix($this->gip_cookie_name)] != $this->type || empty($_COOKIE[e2_cookie_prefix($this->gip_token_cookie_name)])) { return false; } $data = $this->get_gip_session_data(); return (bool)$data; } protected function save_session($id, $name, $accessToken, $avatar_name = '') { $stamp = time(); e2_insert_record ( 'GIPsSessions', array ( 'GIP' => $this->type, 'GIPAuthorID' => $id, 'AuthorName' => $name, 'SessionToken' => $accessToken, 'Stamp' => $stamp, ), 'INSERT', 'ON DUPLICATE KEY UPDATE        `SessionToken` = "' . e2_mysql_real_escape_string($accessToken) . '",        `AuthorName` = "' . e2_mysql_real_escape_string($name) . '",        `Stamp` = "' . $stamp . '"' ); e2_set_cookie($this->gip_cookie_name, $this->type); e2_set_cookie($this->gip_token_cookie_name, $accessToken); $this->gip_token = $accessToken; } public static function get_logout_key() { if ($logout_key = self::get_session_data('logout_key')) { return $logout_key; } $logout_key = md5(microtime()); self::set_session_data('logout_key', $logout_key); return $logout_key; } public static function is_valid_logout_key($key) { $session_key = self::get_session_data('logout_key', true); if (empty($session_key) || empty($key) || $session_key != $key) { return false; } return true; } public function logout() { global $_config; e2_set_cookie($this->gip_cookie_name); e2_set_cookie($this->gip_token_cookie_name); return e2_mysql_query ( "DELETE FROM `". $_config['db_table_prefix'] . "GIPsSessions` ". "WHERE `GIP` = '" . $this->type . "' AND `SessionToken` = '" . e2_mysql_real_escape_string($_COOKIE[e2_cookie_prefix($this->gip_token_cookie_name)]) . "'" ); } public function get_avatar_width() { return USERPIC_WIDTH; } public function get_avatar_height() { return USERPIC_HEIGHT; } public function save_avatar($id, $avatar_url) { $filename = MEDIA_ROOT_FOLDER . PICTURES_FOLDER . 'userpics/'. $this->type .'-'. $id .'.jpg'; if ($userpicdata = file_get_contents ($avatar_url)) { file_put_contents ($filename, $userpicdata); } return $filename; } } function e2m_gip_sign_in($data) { global $_config; $type = $data['provider']; $instance = e2_get_gip_instance($type); if (!$instance) { e2_go_back (); die; } header('Location: ' . $instance->get_auth_url()); die; } function e2m_gip_sign_in_callback($data) { global $_config; $type = $data['provider']; $instance = e2_get_gip_instance($type); if (!$instance) { die($type . ' is not defined'); } $callback_response = $instance->callback(); echo '<script>'; if ($callback_response === true) { $gip_session = $instance->get_gip_session_data(); $js_data = [ 'name' => $gip_session['AuthorName'], 'gipIcon' => _SVG($type), 'logoutUrl' => e2_compose_url('e2m_gip_sign_out', array('provider' => E2GIP::get_logout_key())), ]; echo 'window.opener.oauthAuthorized(' . json_encode($js_data) . ');'; } else { echo 'alert (\''. $callback_response. '\');'; } echo 'window.close();</script>'; die; } function e2m_gip_sign_out($data) { global $_config; $logout_key = $data['provider']; if (!E2GIP::is_valid_logout_key($logout_key)) { die('invalid logout key'); } $instance = e2_get_logged_gip(); if($instance) { $instance->logout(); } e2_go_back(); die; } function e2_list_gips() { static $gips = null; if(!is_null($gips)) { return $gips; } $gips_dir = SYSTEM_FOLDER. 'gips/'; $dh = opendir($gips_dir); $gips = []; while (($file = readdir($dh)) !== false) { if(pathinfo($file, PATHINFO_EXTENSION) != 'php') continue; $gips[] = pathinfo($file, PATHINFO_FILENAME); } closedir($dh); return $gips; } function e2_get_gip_class_name($type) { return "E2GIP" . ucfirst($type); } function e2_get_gip_instance($type) { if (!in_array($type, e2_list_gips())) { return false; } $class_name = e2_get_gip_class_name($type); $instance = new $class_name; return $instance; } function e2_get_gip_auth_url($type) { return e2_compose_url('e2m_gip_sign_in', array('provider' => $type)); } function e2_is_logged_in($type = '') { $types = !$type ? e2_list_gips() : array($type); foreach($types as $type) { $instance = e2_get_gip_instance($type); if ($instance && $instance->is_logged_in()) { return true; } } return false; } function e2_get_logged_gip() { foreach(e2_list_gips() as $type) { $instance = e2_get_gip_instance($type); if ($instance && $instance->is_logged_in()) { return $instance; } } return false; } function e2_get_logged_gip_name() { foreach(e2_list_gips() as $type) { $instance = e2_get_gip_instance($type); if ($instance && $instance->is_logged_in()) { return $type; } } return false; } function e2_get_user_profile_url($type, $id) { $class_name = e2_get_gip_class_name($type); return $class_name::get_profile_url($id); } function e2_get_gip_session($type) { $instance = e2_get_gip_instance($type); if (!$instance || !$instance->is_logged_in()) { return false; } return $instance->get_gip_session_data(); } foreach(e2_list_gips() as $gip) { require_once 'system/gips/' . $gip . '.php'; } spl_autoload_register (e2_rose_loader); if ($_config['write_log_reset']) __log (null); if (__LOG) __log ('System: loaded'); if (is_file ($language_file = LANGUAGES_FOLDER . $settings['language'] .'.php')) { $_lang = $settings['language']; include $language_file; } elseif (is_file ($language_file = LANGUAGES_FOLDER . DEFAULT_LANGUAGE .'.php')) { $_lang = DEFAULT_LANGUAGE; include $language_file; } else { die ('Language file missing: '. $language_file); } $_strings = e2l_load_strings (); if (!$built) @include 'builder.php'; function e2 () { global $server_name, $settings, $errors, $content, $folder_on_server, $full_blog_url, $stopwatch, $total_queries, $_current_url, $_newsfeeds, $_instance, $_candy, $_config, $_superconfig, $_route, $_strings, $_lang, $_candies_installer, $_candies_public, $_candies_indexable, $_candies_indexable_conditionally, $_candies_ajax, $_candies_to_disallow_in_read_only, $_user_folder_name, $_template, $_olba_includes, $_diagnose; e2_deal_with_magic_quotes (); if (__LOG) __log ('System: go'); $errors = array (); header ('Content-type: text/html; charset='. OUTPUT_CHARSET); $_instance = false; if (@is_file (USER_FOLDER . 'instance.psa')) { $it = @file_get_contents (USER_FOLDER . 'instance.psa') or $it = false; if ($it) { $it = @unserialize ($it) or $it = false; if ($it) { $_instance = $it; } } } $template = @$settings['template'] or $template = DEFAULT_TEMPLATE; e2o_prepare_template ($template); $url = urldecode ($_GET['go']); if (__LOG) __log ('System: Resolve <'. $url .'> {'); e2_prepare_urls (); list ($candy, $parameters) = e2_resolve_url ($url); foreach ($_GET as $key => $value) { $parameters[$key] = $value; } if (__LOG) __log ('} // Resolve'); if (__LOG) __log ( 'System: Candy <'. $candy .'> {' ); if (__LOG) __log ('Parameters: <'. print_r ($parameters, true).'>'); $_candy = $candy; $content = array (); if ( @$_config['debug_slow_ajax'] and ( in_array ($candy, $_candies_ajax) ) ) { sleep (1 + 2 * (rand () / getrandmax ())); } if (!in_array ($candy, $_candies_installer)) { e2_make_sure_that_installed (); } if (@$_config['read_only'] and in_array ($candy, $_candies_to_disallow_in_read_only)) { $candy = 'e2m_error404'; } $sign_in_done = (bool) e2_secure (); $sign_in_required = !in_array ($candy, $_candies_public); $sign_in_necessary = $sign_in_required && !$sign_in_done; if (__LOG) __log ('System: signed in? '. (int) $sign_in_done); $sign_in = array ( 'done?' => $sign_in_done, 'required?' => $sign_in_required, 'necessary?' => $sign_in_necessary, ); $_newsfeeds = false; e2_add_newsfeed ('rss', e2_blog_title (), e2_compose_url ('e2m_rss')); e2_add_newsfeed ('json', e2_blog_title (), e2_compose_url ('e2m_json')); if (is_callable ($candy)) { if ($sign_in_necessary) { if (substr ($candy, 0, 4) == 'e2s_') { $content = call_user_func ('e2s_sign_in_necessary'); } else { $content['title'] = $_strings['pt--sign-in']; } } else { if (__LOG) __log ('System: candy call'); $content = call_user_func ($candy, $parameters); if (__LOG) __log ('System: candy return'); } } else { $sign_in['required?'] = false; $sign_in['necessary?'] = false; $content = e2_error404_mode (); } if (__LOG) __log ('} // Candy'); if (!is_array ($content)) $content = array (); if (!array_key_exists ('notes', $content)) $content['notes'] = array (); if (!array_key_exists ('drafts', $content)) $content['drafts'] = array (); if (!array_key_exists ('comments', $content)) $content['comments'] = array (); if (!array_key_exists ('notes-list', $content)) $content['notes-list'] = array (); if (!array_key_exists ('tags', $content)) $content['tags'] = array (); if (!array_key_exists ('class', $content)) { $content['class'] = str_replace ('_', '-', str_replace ('e2m_', '', $candy)); } $content['sign-in'] = $sign_in; $content['sign-in-prompt'] = $_strings['gs--need-password']; if (e2_is_installed ()) { if (__LOG) __log ('System: nav and pages'); $content['navigation-links'] = array (array ( 'rel' => 'index', 'href' => e2_compose_url ('e2m_frontpage', array ('page' => 1)), 'id' => 'link-index', )); if (array_key_exists ('pages', $content)) { foreach (array ('prev', 'next', 'earlier', 'later') as $word) { if (array_key_exists ($word .'-href', $content['pages'])) { $rel = $word; if ($word == 'earlier') $rel = 'prev'; if ($word == 'later') $rel = 'next'; $content['navigation-links'][] = array ( 'rel' => $rel, 'href' => $content['pages'][$word .'-href'], 'id' => 'link-'. $word, ); } } } if (__LOG) __log ('System: search form'); if (array_key_exists ('query', $parameters)) { $query = trim ($parameters['query']); } else { $query = ''; } $content['search'] = array ( 'form-action' => e2_compose_url ('e2s_search'), 'query' => htmlspecialchars (@$query, ENT_COMPAT, HSC_ENC), ); if (__LOG) __log ('System: blog information'); $content['blog']['author'] = htmlspecialchars (e2_blog_author (), ENT_NOQUOTES, HSC_ENC); if (array_key_exists ('description', $settings)) { $formatinfo = e2_format_with_default_formatter ($settings['description'], 'full'); $description = $formatinfo['text-final']; $content['blog']['description'] = $description; $content['blog']['description-format-info'] = $formatinfo['meta']; } $content['blog']['title'] = htmlspecialchars (e2_blog_title (), ENT_NOQUOTES, HSC_ENC); $content['blog']['userpic-set?'] = false; if ($content['blog']['userpic-href'] = e2_blog_userpic ()) { $content['blog']['userpic-set?'] = true; } else { $content['blog']['userpic-href'] = DEFAULT_USERPIC_FILENAME; if (e2_secure ()) { $content['blog']['userpic-href'] = DEFAULT_USERPIC_PLACEHOLDER_FILENAME; } } $content['blog']['favicon-type'] = 'image/x-icon'; $content['blog']['favicon-href'] = 'favicon.ico'; if (e2_secure ()) { $content['blog']['userpic-upload-action'] = e2_compose_url ('e2j_userpic_upload'); } $content['blog']['href'] = e2_compose_url ('e2m_frontpage', array ('page' => 1)); $content['blog']['rss-href'] = e2_compose_url ('e2m_rss'); $content['blog']['jsonfeed-href'] = e2_compose_url ('e2m_json'); $content['blog']['language'] = $_lang; $content['blog']['show-subscribe-button?'] = false; $content['template']['use-likely-light?'] = $_template['use_likely_light']; if (__LOG) __log ('System: edge timeinfo'); $now = array (time (), e2_current_timezone ()); $now_year = e2_format_dt_of_current_timezone ('Y', $now[0]); $content['blog']['now'] = $now; $blog_start_year = $now_year; $blog_start_dt = e2_edge_timeinfo ('start'); if (array_key_exists ('stamp', $blog_start_dt)) { $blog_start_year = e2_format_dt_of_current_timezone ('Y', $blog_start_dt['stamp']); $content['blog']['start-time'] = array ((int) $blog_start_dt['stamp'], $blog_start_dt['timezone']); } $notes_count = (int) e2_notes_count_generic (true, true); if (e2_secure ()) { if (__LOG) __log ('System: stuff for logged in user'); $content['blog']['drafts-count'] = (int) e2_notes_count_generic (false, true); $content['admin-hrefs'] = array ( 'new-note' => e2_compose_url ('e2m_write'), 'drafts' => e2_compose_url ('e2m_drafts'), 'settings' => e2_compose_url ('e2m_settings'), 'theme-preview' => e2_compose_url ('e2m_theme_preview', array ('theme' => '')), 'password' => e2_compose_url ('e2m_password', array ('recovery-key' => '')), 'database' => e2_compose_url ('e2m_database'), 'timezone' => e2_compose_url ('e2m_timezone'), 'logout' => e2_compose_url ('e2m_sign_out'), ); if (e2_can_get_backup ()) { $content['admin-hrefs']['get-backup'] = e2_compose_url ('e2m_get_backup'); } if (@$_config['read_only']) { unset ($content['admin-hrefs']['new-note']); unset ($content['admin-hrefs']['settings']); unset ($content['admin-hrefs']['timezone']); } if (@$_superconfig['disallow_themes_preview']) { unset ($content['admin-hrefs']['theme-preview']); } if (@$_superconfig['disallow_db_config']) { unset ($content['admin-hrefs']['database']); } list ($new_comments_count, $new_comments_texts, $new_comments_href) = e2_new_comments (); if ($new_comments_count) $content['new-comments'] = array ( 'count' => $new_comments_count, 'href' => $new_comments_href, ); } else { if (__LOG) __log ('System: login form'); $content['form-login']['form-action'] = e2_compose_url ('e2s_sign_in'); $content['form-login']['form-check-password-action'] = e2_compose_url ('e2j_check_password'); $content['form-login']['login-name'] = @$settings['author']; $content['form-login']['public-pc?'] = false; $content['form-login']['reset-href'] = e2_compose_url ('e2m_password_reset'); if (array_key_exists ('_login_request_message', $content)) { $content['form-login']['request'] = $content['_login_request_message']; } } if (e2_secure ()) { $virgin = (($notes_count + (int) e2_notes_count_generic (true, false)) == 0); } else { $virgin = ($notes_count == 0); } if ($_db_error) { $virgin = false; } $years_range_separator = $_config['years_range_separator']? $_config['years_range_separator'] : '&mdash;'; $content['blog']['years-range'] = $blog_start_year . (($blog_start_year == $now_year)? '':($years_range_separator . $now_year)); $content['blog']['notes-count'] = $notes_count; $content['blog']['virgin?'] = $virgin; if ($folder_on_server) { $content['blog']['parent-site-href'] = substr ($folder_on_server, (int) strpos ('/', $folder_on_server)); } $content['hrefs'] = array ( 'sign-in' => e2_compose_url ('e2m_sign_in'), 'tags' => e2_compose_url ('e2m_tags'), 'everything' => e2_compose_url ('e2m_everything'), ); } $noindex_follow_maybe = 'noindex, follow'; if (@$_config['index_follow_everything']) { $noindex_follow_maybe = 'index, follow'; } if (in_array ($candy, $_candies_indexable)) { $content['robots'] = 'index, follow'; } if (in_array ($candy, $_candies_indexable_conditionally)) { $content['robots'] = $noindex_follow_maybe; } $content['output-charset'] = OUTPUT_CHARSET; $content['base-href'] = $full_blog_url. '/'; $content['current-href'] = $_current_url; if (!array_key_exists ('summary', $content)) { $content['summary'] = strip_tags ($content['blog']['description']); } $content['title'] = strip_tags (e2_kavychki (htmlspecialchars ($content['title'], ENT_NOQUOTES, HSC_ENC))); if (@$content['heading']) { $content['heading'] = strip_tags (e2_kavychki (htmlspecialchars ($content['heading'], ENT_NOQUOTES, HSC_ENC))); } if (__LOG) __log ('System: e2_modes {'); e2_modes ($parameters); if (__LOG) __log ('} // e2_modes'); if (@$_config['request_logging']) { $f = fopen (USER_FOLDER. 'log-'. date ('Y-m-d') .'.txt', 'a'); fwrite ($f, date ('d.m.Y H:i:s') ."\tT = ". $content['pgt'] ."\tQ = ". $content['total_queries'] ."\tIP = ". $_SERVER['REMOTE_ADDR'] ."\tRequest = ". $_SERVER['REQUEST_URI'] ."\r\n"); fclose ($f); } $content['misc']['sape-link'] = 'http://www.sape.ru/r.206a4276c2.php'; $pgt = round (getmicrotime () - $stopwatch, 3); $e2_website = 'http://'. $_strings['e2--website-host'] .'/'; $content['engine']['pgt'] = str_replace ('.', ',', $pgt); if (function_exists ('memory_get_peak_usage')) { $content['engine']['mp'] = str_replace ('.', ',', round ((memory_get_peak_usage () / 1024 / 1024) * 100) / 100); } $content['engine']['qc'] = (int) @$total_queries; $content['engine']['built?'] = $built; $content['engine']['installed?'] = e2_is_installed (); $content['engine']['version'] = 'v'. E2_VERSION; $vdesc = '('. $_strings['e2--release'] .' '. E2_RELEASE .', v'. E2_VERSION .')'; $content['engine']['version-description'] = $_strings['e2--vname-aegea'] .' '. $vdesc; $content['engine']['user-folder-name'] = $_user_folder_name; $content['engine']['cookie-prefix'] = e2_cookie_prefix (); $content['engine']['href'] = $e2_website; $content['engine']['about'] = '<span title="E2 '.$vdesc .'">'. $_strings['e2--powered-by'] .' <a href="'. $e2_website .'" class="nu"><u>'. $_strings['e2--vname-aegea'] .'</u> <span class="e2-svgi">'. _SVG ('aegea') .'</span></a></span>'; $content['meta-viewport'] = $_template['meta_viewport']; $content['stylesheets'] = e2o_stylesheets (); $content['scripts'] = e2o_scripts (); if (is_file (MEDIA_ROOT_FOLDER . 'manifest.json')) { $content['manifest-href'] = $full_blog_url. '/manifest.json'; } if (!@isset ($_diagnose['ok?'])) { if (@$_COOKIE[e2_cookie_prefix ('diagnose')] or @$_diagnose['need?']) { e2_diagnose (); } } if ($e = e2_show_errors ()) { $content['message'] = $e; } if (e2_secure ()) { $content['last-modifieds-by-id'] = '{}'; if (@$_COOKIE[e2_cookie_prefix ('local_copies')]) { $content['last-modifieds-by-id'] = ( e2_list_lastmodifies_as_json_by_ids_csv ($_COOKIE[e2_cookie_prefix ('local_copies')]) ); } } $content['og-images'] = array (); if (is_array ($content['notes']['only']['og-images'])) { $content['og-images'] = $content['notes']['only']['og-images']; $content['twitter-card'] = 'summary_large_image'; } if (is_array ($content['tag']['og-images'])) { $content['og-images'] = $content['tag']['og-images']; $content['twitter-card'] = 'summary_large_image'; } if (!count ($content['og-images'])) { $content['twitter-card'] = 'summary'; $content['og-images'] = array ($content['blog']['userpic-href']); } if (count ($content['notes']) > 0) { $content['notes'] = e2_populate_read_counts_in_notes_ctree_($content['notes']); } ob_start (); e2o_apply_initial_template (); $output = ob_get_contents (); ob_end_clean (); if (is_array ($content['notes'])) { foreach ($content['notes'] as $note) { if (is_array ($note['format-info']['links-required'])) { foreach ($note['format-info']['links-required'] as $link) { if (substr ($link, -3) == '.js') { e2o_use_script (substr ($link, 0, -3)); } if (substr ($link, -4) == '.css') { e2o_use_stylesheet (substr ($link, 0, -4)); } } } } } $content['stylesheets'] = e2o_stylesheets (); $content['scripts'] = e2o_scripts (); if ($_newsfeeds) $content['newsfeeds'] = $_newsfeeds; ob_start (); e2o_apply_template ('head'); $head_html = ob_get_contents (); ob_end_clean (); ob_start (); e2o_apply_template ('scripts'); $scripts_html = ob_get_contents (); ob_end_clean (); $output = str_replace ('<e2:head-data />', $head_html, $output); $output = str_replace ('<e2:scripts-data />', $scripts_html, $output); $spawn_bsi = false; if (e2_bsi_is_indexing ()) { if (is_writable (USER_FOLDER . 'indexing.psa')) { $spawn_bsi = true; } else { $_diagnose['need?'] = true; e2_set_cookie ('diagnose', '1'); } } if ( $missing_templates = e2o_missing_templates () and !$_config['ignore_missing_template_files'] ) { echo '<h1>Templates missing</h1>'; echo '<ul>'; foreach ($missing_templates as $missing_template) { echo '<li>'. $missing_template.' </li>'; } echo '</ul>'; echo '<pre>'; print_r ($content); echo '</pre>'; } else { echo $output; } if ($spawn_bsi) { if (__LOG) __log ('System: spawn BSI step'); e2_spawn (e2_compose_url ('e2s_bsi_step', array ())); } if (__LOG) __log ('} // System'); if (DEV_TRACK_TIME and $server_name == DEV_HOST) { $olba_time = str_replace ('.', ',', round (getmicrotime () - $stopwatch, 3) - $pgt); echo '<div style="font-size: 300%; text-align: center; position: fixed; bottom: 0; width: 100%; background: #ffc; opacity: .88">'. '<span style="color: #f80">'. $content['engine']['pgt'] .' '. '<small>'. $content['engine']['qc'] .'q</small></span>'. '<span style="color: #08f"> + '. $olba_time . ' '. '<small>'. $_olba_includes .'i</small></span>'. '</div>'; } } if (__LOG) __log (''); ?>